; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, ptr }

@_QMlu_dataEa = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEb = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEc = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEce = external local_unnamed_addr global [13 x [5 x double]]
@_QMlu_dataEd = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEdssp = external local_unnamed_addr global double
@_QMlu_dataEdx1 = external local_unnamed_addr global double
@_QMlu_dataEdx2 = external local_unnamed_addr global double
@_QMlu_dataEdx3 = external local_unnamed_addr global double
@_QMlu_dataEdx4 = external local_unnamed_addr global double
@_QMlu_dataEdx5 = external local_unnamed_addr global double
@_QMlu_dataEdy1 = external local_unnamed_addr global double
@_QMlu_dataEdy2 = external local_unnamed_addr global double
@_QMlu_dataEdy3 = external local_unnamed_addr global double
@_QMlu_dataEdy4 = external local_unnamed_addr global double
@_QMlu_dataEdy5 = external local_unnamed_addr global double
@_QMlu_dataEdz1 = external local_unnamed_addr global double
@_QMlu_dataEdz2 = external local_unnamed_addr global double
@_QMlu_dataEdz3 = external local_unnamed_addr global double
@_QMlu_dataEdz4 = external local_unnamed_addr global double
@_QMlu_dataEdz5 = external local_unnamed_addr global double
@_QMlu_dataEflux = external global [102 x [5 x double]]
@_QMlu_dataEfrct = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }
@_QMlu_dataEiend = external local_unnamed_addr global i32
@_QMlu_dataEist = external local_unnamed_addr global i32
@_QMlu_dataEjend = external local_unnamed_addr global i32
@_QMlu_dataEjst = external local_unnamed_addr global i32
@_QMlu_dataEnx = external local_unnamed_addr global i32
@_QMlu_dataEnx0 = external local_unnamed_addr global i32
@_QMlu_dataEny = external local_unnamed_addr global i32
@_QMlu_dataEny0 = external local_unnamed_addr global i32
@_QMlu_dataEnz = external local_unnamed_addr global i32
@_QMlu_dataErsd = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }
@_QMlu_dataEtx1 = external local_unnamed_addr global double
@_QMlu_dataEtx2 = external local_unnamed_addr global double
@_QMlu_dataEtx3 = external local_unnamed_addr global double
@_QMlu_dataEty1 = external local_unnamed_addr global double
@_QMlu_dataEty2 = external local_unnamed_addr global double
@_QMlu_dataEty3 = external local_unnamed_addr global double
@_QMlu_dataEtz1 = external local_unnamed_addr global double
@_QMlu_dataEtz2 = external local_unnamed_addr global double
@_QMlu_dataEtz3 = external local_unnamed_addr global double
@0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @0 }, align 8
@_QMlu_dataEa.cache = common global ptr null, align 8
@_QMlu_dataEb.cache = common global ptr null, align 8
@_QMlu_dataEc.cache = common global ptr null, align 8
@_QMlu_dataEd.cache = common global ptr null, align 8
@_QMlu_dataEflux.cache = common global ptr null, align 8
@2 = private unnamed_addr constant %struct.ident_t { i32 0, i32 66, i32 0, i32 22, ptr @0 }, align 8

; Function Attrs: nounwind
define void @erhs_() local_unnamed_addr #0 {
entry:
  %omp_global_thread_num5 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @1)
  %0 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEa, i64 20400, ptr nonnull @_QMlu_dataEa.cache)
  %1 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEb, i64 20400, ptr nonnull @_QMlu_dataEb.cache)
  %2 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEc, i64 20400, ptr nonnull @_QMlu_dataEc.cache)
  %3 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEd, i64 20400, ptr nonnull @_QMlu_dataEd.cache)
  %4 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEflux, i64 4080, ptr nonnull @_QMlu_dataEflux.cache)
  tail call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @1, i32 0, ptr nonnull @erhs_..omp_par)
  ret void
}

; Function Attrs: nounwind
define internal void @erhs_..omp_par(ptr noalias nocapture readnone %tid.addr, ptr noalias nocapture readnone %zero.addr) #0 {
omp.par.entry:
  %p.lastiter = alloca i32, align 4
  %p.lowerbound = alloca i32, align 4
  %p.upperbound = alloca i32, align 4
  %p.stride = alloca i32, align 4
  %p.lastiter60 = alloca i32, align 4
  %p.lowerbound61 = alloca i32, align 4
  %p.upperbound62 = alloca i32, align 4
  %p.stride63 = alloca i32, align 4
  %p.lastiter120 = alloca i32, align 4
  %p.lowerbound121 = alloca i32, align 4
  %p.upperbound122 = alloca i32, align 4
  %p.stride123 = alloca i32, align 4
  %p.lastiter180 = alloca i32, align 4
  %p.lowerbound181 = alloca i32, align 4
  %p.upperbound182 = alloca i32, align 4
  %p.stride183 = alloca i32, align 4
  %p.lastiter240 = alloca i32, align 4
  %p.lowerbound241 = alloca i32, align 4
  %p.upperbound242 = alloca i32, align 4
  %p.stride243 = alloca i32, align 4
  %omp_global_thread_num244 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @1)
  %0 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num244, ptr nonnull @_QMlu_dataEflux, i64 4080, ptr nonnull @_QMlu_dataEflux.cache)
  %1 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %2 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !10
  %omp_loop.tripcount = tail call i32 @llvm.smax.i32(i32 %1, i32 0)
  %omp_loop.tripcount8 = tail call i32 @llvm.smax.i32(i32 %2, i32 0)
  %3 = mul nuw i32 %omp_loop.tripcount8, %omp_loop.tripcount
  store i32 0, ptr %p.lowerbound, align 4
  %4 = add i32 %3, -1
  store i32 %4, ptr %p.upperbound, align 4
  store i32 1, ptr %p.stride, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num244, i32 34, ptr nonnull %p.lastiter, ptr nonnull %p.lowerbound, ptr nonnull %p.upperbound, ptr nonnull %p.stride, i32 1, i32 0)
  %5 = load i32, ptr %p.lowerbound, align 4
  %6 = load i32, ptr %p.upperbound, align 4
  %reass.sub6907 = sub i32 %6, %5
  %omp_collapsed.cmp6861.not = icmp eq i32 %reass.sub6907, -1
  br i1 %omp_collapsed.cmp6861.not, label %omp_collapsed.exit, label %omp_collapsed.body.lr.ph

omp_collapsed.body.lr.ph:                         ; preds = %omp.par.entry
  %7 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !12
  %8 = icmp sgt i32 %7, 0
  %.unpack6828 = load ptr, ptr @_QMlu_dataEfrct, align 8
  %.unpack6835.unpack.unpack6840 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack6835.unpack6836.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1), align 8
  %.unpack6835.unpack6836.unpack6843 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack6835.unpack6837.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2), align 8
  %.unpack6835.unpack6837.unpack6846 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack6835.unpack6838.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 3), align 8
  %9 = mul nsw i64 %.unpack6835.unpack6836.unpack6843, %.unpack6835.unpack.unpack6840
  %10 = mul nsw i64 %.unpack6835.unpack6837.unpack6846, %9
  br i1 %8, label %omp_collapsed.body.us.preheader, label %omp_collapsed.exit

omp_collapsed.body.us.preheader:                  ; preds = %omp_collapsed.body.lr.ph
  %.unpack6835.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7), align 8
  %11 = zext nneg i32 %7 to i64
  %12 = sub nsw i64 1, %.unpack6835.unpack.unpack
  %13 = sub nsw i64 2, %.unpack6835.unpack.unpack
  %14 = sub nsw i64 3, %.unpack6835.unpack.unpack
  %15 = sub nsw i64 4, %.unpack6835.unpack.unpack
  %16 = sub nsw i64 5, %.unpack6835.unpack.unpack
  %xtraiter = and i64 %11, 1
  %17 = icmp eq i32 %7, 1
  %unroll_iter = and i64 %11, 2147483646
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %omp_collapsed.body.us

omp_collapsed.body.us:                            ; preds = %omp_collapsed.body.us.preheader, %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us
  %omp_collapsed.iv6862.us = phi i32 [ %omp_collapsed.next.us, %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us ], [ 0, %omp_collapsed.body.us.preheader ]
  %18 = add i32 %omp_collapsed.iv6862.us, %5
  %19 = urem i32 %18, %omp_loop.tripcount8
  %20 = udiv i32 %18, %omp_loop.tripcount8
  %21 = add i32 %20, 1
  %22 = add nuw nsw i32 %19, 1
  %23 = zext nneg i32 %22 to i64
  %24 = sext i32 %21 to i64
  %25 = sub nsw i64 %23, %.unpack6835.unpack6837.unpack
  %26 = mul nsw i64 %25, %9
  %27 = sub nsw i64 %24, %.unpack6835.unpack6838.unpack
  %28 = mul nsw i64 %10, %27
  %29 = getelementptr double, ptr %.unpack6828, i64 %28
  %30 = getelementptr double, ptr %29, i64 %26
  br i1 %17, label %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us.unr-lcssa, label %omp.wsloop.region22.preheader.us

omp.wsloop.region22.preheader.us:                 ; preds = %omp_collapsed.body.us, %omp.wsloop.region22.preheader.us
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %omp.wsloop.region22.preheader.us ], [ 1, %omp_collapsed.body.us ]
  %niter = phi i64 [ %niter.next.1, %omp.wsloop.region22.preheader.us ], [ 0, %omp_collapsed.body.us ]
  %31 = sub nsw i64 %indvars.iv, %.unpack6835.unpack6836.unpack
  %32 = mul nsw i64 %31, %.unpack6835.unpack.unpack6840
  %33 = getelementptr double, ptr %30, i64 %32
  %34 = getelementptr double, ptr %33, i64 %12
  store double 0.000000e+00, ptr %34, align 8, !tbaa !14
  %35 = getelementptr double, ptr %33, i64 %13
  store double 0.000000e+00, ptr %35, align 8, !tbaa !14
  %36 = getelementptr double, ptr %33, i64 %14
  store double 0.000000e+00, ptr %36, align 8, !tbaa !14
  %37 = getelementptr double, ptr %33, i64 %15
  store double 0.000000e+00, ptr %37, align 8, !tbaa !14
  %38 = getelementptr double, ptr %33, i64 %16
  store double 0.000000e+00, ptr %38, align 8, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %39 = sub nsw i64 %indvars.iv.next, %.unpack6835.unpack6836.unpack
  %40 = mul nsw i64 %39, %.unpack6835.unpack.unpack6840
  %41 = getelementptr double, ptr %30, i64 %40
  %42 = getelementptr double, ptr %41, i64 %12
  store double 0.000000e+00, ptr %42, align 8, !tbaa !14
  %43 = getelementptr double, ptr %41, i64 %13
  store double 0.000000e+00, ptr %43, align 8, !tbaa !14
  %44 = getelementptr double, ptr %41, i64 %14
  store double 0.000000e+00, ptr %44, align 8, !tbaa !14
  %45 = getelementptr double, ptr %41, i64 %15
  store double 0.000000e+00, ptr %45, align 8, !tbaa !14
  %46 = getelementptr double, ptr %41, i64 %16
  store double 0.000000e+00, ptr %46, align 8, !tbaa !14
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.next.1 = add i64 %niter, 2
  %niter.ncmp.1 = icmp eq i64 %niter.next.1, %unroll_iter
  br i1 %niter.ncmp.1, label %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us.unr-lcssa, label %omp.wsloop.region22.preheader.us

omp.wsloop.region20.omp.wsloop.region25_crit_edge.us.unr-lcssa: ; preds = %omp.wsloop.region22.preheader.us, %omp_collapsed.body.us
  %indvars.iv.unr = phi i64 [ 1, %omp_collapsed.body.us ], [ %indvars.iv.next.1, %omp.wsloop.region22.preheader.us ]
  br i1 %lcmp.mod.not, label %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us, label %omp.wsloop.region22.preheader.us.epil

omp.wsloop.region22.preheader.us.epil:            ; preds = %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us.unr-lcssa
  %47 = sub nsw i64 %indvars.iv.unr, %.unpack6835.unpack6836.unpack
  %48 = mul nsw i64 %47, %.unpack6835.unpack.unpack6840
  %49 = getelementptr double, ptr %30, i64 %48
  %50 = getelementptr double, ptr %49, i64 %12
  store double 0.000000e+00, ptr %50, align 8, !tbaa !14
  %51 = getelementptr double, ptr %49, i64 %13
  store double 0.000000e+00, ptr %51, align 8, !tbaa !14
  %52 = getelementptr double, ptr %49, i64 %14
  store double 0.000000e+00, ptr %52, align 8, !tbaa !14
  %53 = getelementptr double, ptr %49, i64 %15
  store double 0.000000e+00, ptr %53, align 8, !tbaa !14
  %54 = getelementptr double, ptr %49, i64 %16
  store double 0.000000e+00, ptr %54, align 8, !tbaa !14
  br label %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us

omp.wsloop.region20.omp.wsloop.region25_crit_edge.us: ; preds = %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us.unr-lcssa, %omp.wsloop.region22.preheader.us.epil
  %omp_collapsed.next.us = add nuw i32 %omp_collapsed.iv6862.us, 1
  %exitcond6922.not = icmp eq i32 %omp_collapsed.iv6862.us, %reass.sub6907
  br i1 %exitcond6922.not, label %omp_collapsed.exit, label %omp_collapsed.body.us

omp_collapsed.exit:                               ; preds = %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us, %omp_collapsed.body.lr.ph, %omp.par.entry
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num244)
  %55 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %56 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !10
  %omp_loop.tripcount27 = call i32 @llvm.smax.i32(i32 %55, i32 0)
  %omp_loop.tripcount31 = call i32 @llvm.smax.i32(i32 %56, i32 0)
  %57 = mul nuw i32 %omp_loop.tripcount31, %omp_loop.tripcount27
  store i32 0, ptr %p.lowerbound61, align 4
  %58 = add i32 %57, -1
  store i32 %58, ptr %p.upperbound62, align 4
  store i32 1, ptr %p.stride63, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num244, i32 34, ptr nonnull %p.lastiter60, ptr nonnull %p.lowerbound61, ptr nonnull %p.upperbound62, ptr nonnull %p.stride63, i32 1, i32 0)
  %59 = load i32, ptr %p.lowerbound61, align 4
  %60 = load i32, ptr %p.upperbound62, align 4
  %reass.sub6908 = sub i32 %60, %59
  %omp_collapsed.cmp586863.not = icmp eq i32 %reass.sub6908, -1
  br i1 %omp_collapsed.cmp586863.not, label %omp_collapsed.exit55, label %omp_collapsed.body53.lr.ph

omp_collapsed.body53.lr.ph:                       ; preds = %omp_collapsed.exit
  %61 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %62 = add i32 %61, -1
  %63 = sitofp i32 %62 to double
  %64 = load i32, ptr @_QMlu_dataEny0, align 4, !tbaa !17
  %65 = add i32 %64, -1
  %66 = sitofp i32 %65 to double
  %67 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !12
  %68 = sext i32 %67 to i64
  %69 = icmp sgt i32 %67, 0
  %70 = load i32, ptr @_QMlu_dataEnx0, align 4
  %71 = add i32 %70, -1
  %72 = sitofp i32 %71 to double
  %.unpack6804 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack6811.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack6811.unpack.unpack6816 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack6811.unpack6812.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack6811.unpack6812.unpack6819 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack6811.unpack6813.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack6811.unpack6813.unpack6822 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack6811.unpack6814.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %73 = mul nsw i64 %.unpack6811.unpack6812.unpack6819, %.unpack6811.unpack.unpack6816
  %74 = mul nsw i64 %.unpack6811.unpack6813.unpack6822, %73
  %75 = load double, ptr @_QMlu_dataEce, align 8
  %76 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 1, i64 0), align 8
  %77 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 4, i64 0), align 8
  %78 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 7, i64 0), align 8
  %79 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 10, i64 0), align 8
  %80 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 2, i64 0), align 8
  %81 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 5, i64 0), align 8
  %82 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 8, i64 0), align 8
  %83 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 11, i64 0), align 8
  %84 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 3, i64 0), align 8
  %85 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 6, i64 0), align 8
  %86 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 9, i64 0), align 8
  %87 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 12, i64 0), align 8
  %88 = sub nsw i64 1, %.unpack6811.unpack.unpack
  %89 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 0, i64 1), align 8
  %90 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 1, i64 1), align 8
  %91 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 4, i64 1), align 8
  %92 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 7, i64 1), align 8
  %93 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 10, i64 1), align 8
  %94 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 2, i64 1), align 8
  %95 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 5, i64 1), align 8
  %96 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 8, i64 1), align 8
  %97 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 11, i64 1), align 8
  %98 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 3, i64 1), align 8
  %99 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 6, i64 1), align 8
  %100 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 9, i64 1), align 8
  %101 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 12, i64 1), align 8
  %102 = sub nsw i64 2, %.unpack6811.unpack.unpack
  %103 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 0, i64 2), align 8
  %104 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 1, i64 2), align 8
  %105 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 4, i64 2), align 8
  %106 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 7, i64 2), align 8
  %107 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 10, i64 2), align 8
  %108 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 2, i64 2), align 8
  %109 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 5, i64 2), align 8
  %110 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 8, i64 2), align 8
  %111 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 11, i64 2), align 8
  %112 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 3, i64 2), align 8
  %113 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 6, i64 2), align 8
  %114 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 9, i64 2), align 8
  %115 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 12, i64 2), align 8
  %116 = sub nsw i64 3, %.unpack6811.unpack.unpack
  %117 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 0, i64 3), align 8
  %118 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 1, i64 3), align 8
  %119 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 4, i64 3), align 8
  %120 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 7, i64 3), align 8
  %121 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 10, i64 3), align 8
  %122 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 2, i64 3), align 8
  %123 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 5, i64 3), align 8
  %124 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 8, i64 3), align 8
  %125 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 11, i64 3), align 8
  %126 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 3, i64 3), align 8
  %127 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 6, i64 3), align 8
  %128 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 9, i64 3), align 8
  %129 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 12, i64 3), align 8
  %130 = sub nsw i64 4, %.unpack6811.unpack.unpack
  %131 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 0, i64 4), align 8
  %132 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 1, i64 4), align 8
  %133 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 4, i64 4), align 8
  %134 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 7, i64 4), align 8
  %135 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 10, i64 4), align 8
  %136 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 2, i64 4), align 8
  %137 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 5, i64 4), align 8
  %138 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 8, i64 4), align 8
  %139 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 11, i64 4), align 8
  %140 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 3, i64 4), align 8
  %141 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 6, i64 4), align 8
  %142 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 9, i64 4), align 8
  %143 = load double, ptr getelementptr inbounds ([13 x [5 x double]], ptr @_QMlu_dataEce, i64 0, i64 12, i64 4), align 8
  %144 = sub nsw i64 5, %.unpack6811.unpack.unpack
  br label %omp_collapsed.body53

omp_collapsed.exit55:                             ; preds = %omp.wsloop.region49, %omp_collapsed.exit
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num244)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num244)
  %145 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %146 = add i32 %145, -1
  %147 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !19
  %148 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !21
  %149 = icmp slt i32 %146, 2
  %150 = add i32 %145, -2
  %omp_loop.tripcount66 = select i1 %149, i32 0, i32 %150
  %151 = sub i32 %148, %147
  %152 = icmp slt i32 %148, %147
  %153 = add i32 %151, 1
  %omp_loop.tripcount70 = select i1 %152, i32 0, i32 %153
  %154 = mul nuw i32 %omp_loop.tripcount70, %omp_loop.tripcount66
  store i32 0, ptr %p.lowerbound121, align 4
  %155 = add i32 %154, -1
  store i32 %155, ptr %p.upperbound122, align 4
  store i32 1, ptr %p.stride123, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num244, i32 34, ptr nonnull %p.lastiter120, ptr nonnull %p.lowerbound121, ptr nonnull %p.upperbound122, ptr nonnull %p.stride123, i32 1, i32 0)
  %156 = load i32, ptr %p.lowerbound121, align 4
  %157 = load i32, ptr %p.upperbound122, align 4
  %reass.sub6909 = sub i32 %157, %156
  %omp_collapsed.cmp1186867.not = icmp eq i32 %reass.sub6909, -1
  br i1 %omp_collapsed.cmp1186867.not, label %omp_collapsed.exit115, label %omp_collapsed.body113.lr.ph

omp_collapsed.body113.lr.ph:                      ; preds = %omp_collapsed.exit55
  %.unpack6675 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack6682.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack6682.unpack.unpack6687 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack6682.unpack6683.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack6682.unpack6683.unpack6690 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack6682.unpack6684.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack6682.unpack6684.unpack6693 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack6682.unpack6685.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %158 = mul nsw i64 %.unpack6682.unpack6683.unpack6690, %.unpack6682.unpack.unpack6687
  %159 = mul nsw i64 %.unpack6682.unpack6684.unpack6693, %158
  %invariant.gep = getelementptr i8, ptr %0, i64 -40
  %.unpack6651 = load ptr, ptr @_QMlu_dataEfrct, align 8
  %.unpack6658.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7), align 8
  %.unpack6658.unpack.unpack6663 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack6658.unpack6659.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1), align 8
  %.unpack6658.unpack6659.unpack6666 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack6658.unpack6660.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2), align 8
  %.unpack6658.unpack6660.unpack6669 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack6658.unpack6661.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 3), align 8
  %160 = mul nsw i64 %.unpack6658.unpack6659.unpack6666, %.unpack6658.unpack.unpack6663
  %161 = mul nsw i64 %.unpack6658.unpack6660.unpack6669, %160
  %162 = sub nsw i64 1, %.unpack6682.unpack.unpack
  %163 = sub nsw i64 2, %.unpack6682.unpack.unpack
  %164 = sub nsw i64 3, %.unpack6682.unpack.unpack
  %165 = sub nsw i64 4, %.unpack6682.unpack.unpack
  %166 = sub nsw i64 5, %.unpack6682.unpack.unpack
  %167 = sub nsw i64 2, %.unpack6658.unpack6659.unpack
  %168 = mul nsw i64 %167, %.unpack6658.unpack.unpack6663
  %169 = sub nsw i64 2, %.unpack6682.unpack6683.unpack
  %170 = mul nsw i64 %169, %.unpack6682.unpack.unpack6687
  %171 = sub nsw i64 3, %.unpack6682.unpack6683.unpack
  %172 = mul nsw i64 %171, %.unpack6682.unpack.unpack6687
  %173 = sub nsw i64 4, %.unpack6682.unpack6683.unpack
  %174 = mul nsw i64 %173, %.unpack6682.unpack.unpack6687
  %175 = sub nsw i64 3, %.unpack6658.unpack6659.unpack
  %176 = mul nsw i64 %175, %.unpack6658.unpack.unpack6663
  %177 = sub nsw i64 5, %.unpack6682.unpack6683.unpack
  %178 = mul nsw i64 %177, %.unpack6682.unpack.unpack6687
  %179 = sub nsw i64 1, %.unpack6658.unpack.unpack
  %180 = sub nsw i64 2, %.unpack6658.unpack.unpack
  %181 = sub nsw i64 3, %.unpack6658.unpack.unpack
  %182 = sub nsw i64 4, %.unpack6658.unpack.unpack
  %183 = sub nsw i64 5, %.unpack6658.unpack.unpack
  %184 = sub nsw i64 2, %.unpack6658.unpack.unpack
  %185 = sub nsw i64 3, %.unpack6658.unpack.unpack
  %186 = sub nsw i64 4, %.unpack6658.unpack.unpack
  %187 = sub nsw i64 5, %.unpack6658.unpack.unpack
  %188 = xor i64 %.unpack6682.unpack6683.unpack, -1
  %.unpack6173.unpack.unpack6178 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8, !tbaa !23
  %.unpack6173.unpack6174.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8, !tbaa !23
  %.unpack6173.unpack6174.unpack6181 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8, !tbaa !23
  %.unpack6173.unpack6175.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8, !tbaa !23
  %.unpack6173.unpack6175.unpack6184 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8, !tbaa !23
  %.unpack6173.unpack6176.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8, !tbaa !23
  %189 = mul nsw i64 %.unpack6173.unpack6174.unpack6181, %.unpack6173.unpack.unpack6178
  %190 = mul nsw i64 %.unpack6173.unpack6175.unpack6184, %189
  %scevgep = getelementptr i8, ptr %0, i64 -16
  %scevgep7106 = getelementptr i8, ptr %0, i64 -8
  %scevgep7111 = getelementptr i8, ptr %0, i64 -24
  %scevgep7116 = getelementptr i8, ptr %0, i64 -32
  %scevgep7121 = getelementptr i8, ptr %0, i64 -32
  %191 = shl i64 %.unpack6682.unpack.unpack, 3
  %192 = sub i64 40, %191
  %scevgep7126 = getelementptr i8, ptr %.unpack6675, i64 %192
  %193 = shl i64 %.unpack6682.unpack6684.unpack6693, 3
  %scevgep7128 = getelementptr i8, ptr %.unpack6675, i64 %192
  %194 = mul i64 %.unpack6682.unpack6683.unpack, -8
  %195 = sub i64 32, %191
  %scevgep7132 = getelementptr i8, ptr %.unpack6675, i64 %195
  %scevgep7134 = getelementptr i8, ptr %.unpack6675, i64 %195
  %196 = sub i64 24, %191
  %scevgep7139 = getelementptr i8, ptr %.unpack6675, i64 %196
  %scevgep7141 = getelementptr i8, ptr %.unpack6675, i64 %196
  %197 = sub i64 16, %191
  %scevgep7146 = getelementptr i8, ptr %.unpack6675, i64 %197
  %scevgep7148 = getelementptr i8, ptr %.unpack6675, i64 %197
  %198 = sub i64 8, %191
  %scevgep7153 = getelementptr i8, ptr %.unpack6675, i64 %198
  %scevgep7155 = getelementptr i8, ptr %.unpack6675, i64 %198
  %scevgep7160 = getelementptr i8, ptr %.unpack6675, i64 %192
  %scevgep7162 = getelementptr i8, ptr %.unpack6675, i64 %192
  %scevgep7167 = getelementptr i8, ptr %.unpack6675, i64 %195
  %scevgep7169 = getelementptr i8, ptr %.unpack6675, i64 %195
  %scevgep7174 = getelementptr i8, ptr %.unpack6675, i64 %196
  %scevgep7176 = getelementptr i8, ptr %.unpack6675, i64 %196
  %scevgep7181 = getelementptr i8, ptr %.unpack6675, i64 %197
  %scevgep7183 = getelementptr i8, ptr %.unpack6675, i64 %197
  %scevgep7188 = getelementptr i8, ptr %.unpack6675, i64 %198
  %scevgep7190 = getelementptr i8, ptr %.unpack6675, i64 %198
  %scevgep7245 = getelementptr i8, ptr %0, i64 -40
  %199 = shl i64 %.unpack6682.unpack.unpack, 3
  %200 = sub i64 40, %199
  %scevgep7247 = getelementptr i8, ptr %.unpack6675, i64 %200
  %201 = shl i64 %.unpack6682.unpack6683.unpack, 3
  %202 = shl i64 %.unpack6682.unpack6684.unpack6693, 3
  %scevgep7249 = getelementptr i8, ptr %.unpack6675, i64 %200
  %203 = sub i64 32, %199
  %scevgep7254 = getelementptr i8, ptr %.unpack6675, i64 %203
  %scevgep7256 = getelementptr i8, ptr %.unpack6675, i64 %203
  %204 = sub i64 24, %199
  %scevgep7261 = getelementptr i8, ptr %.unpack6675, i64 %204
  %scevgep7263 = getelementptr i8, ptr %.unpack6675, i64 %204
  %205 = sub i64 8, %199
  %scevgep7268 = getelementptr i8, ptr %.unpack6675, i64 %205
  %scevgep7270 = getelementptr i8, ptr %.unpack6675, i64 %205
  %206 = sub i64 16, %199
  %scevgep7275 = getelementptr i8, ptr %.unpack6675, i64 %206
  %scevgep7277 = getelementptr i8, ptr %.unpack6675, i64 %206
  %207 = shl i64 %.unpack6682.unpack6684.unpack, 3
  %invariant.gep7771 = getelementptr i8, ptr %0, i64 -40
  %208 = shl i64 %.unpack6682.unpack6684.unpack, 3
  %209 = add i64 %.unpack6682.unpack6683.unpack, 1
  %210 = shl i64 %.unpack6682.unpack6683.unpack, 3
  %211 = add i64 %210, 8
  br label %omp_collapsed.body113

omp_collapsed.exit115:                            ; preds = %omp.wsloop.region107.preheader, %omp_collapsed.exit55
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num244)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num244)
  %212 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %213 = add i32 %212, -1
  %214 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !25
  %215 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !27
  %216 = icmp slt i32 %213, 2
  %217 = add i32 %212, -2
  %omp_loop.tripcount126 = select i1 %216, i32 0, i32 %217
  %218 = sub i32 %215, %214
  %219 = icmp slt i32 %215, %214
  %220 = add i32 %218, 1
  %omp_loop.tripcount130 = select i1 %219, i32 0, i32 %220
  %221 = mul nuw i32 %omp_loop.tripcount130, %omp_loop.tripcount126
  store i32 0, ptr %p.lowerbound181, align 4
  %222 = add i32 %221, -1
  store i32 %222, ptr %p.upperbound182, align 4
  store i32 1, ptr %p.stride183, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num244, i32 34, ptr nonnull %p.lastiter180, ptr nonnull %p.lowerbound181, ptr nonnull %p.upperbound182, ptr nonnull %p.stride183, i32 1, i32 0)
  %223 = load i32, ptr %p.lowerbound181, align 4
  %224 = load i32, ptr %p.upperbound182, align 4
  %reass.sub6913 = sub i32 %224, %223
  %omp_collapsed.cmp1786881.not = icmp eq i32 %reass.sub6913, -1
  br i1 %omp_collapsed.cmp1786881.not, label %omp_collapsed.exit175, label %omp_collapsed.body173.lr.ph

omp_collapsed.body173.lr.ph:                      ; preds = %omp_collapsed.exit115
  %.unpack6013 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack6020.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack6020.unpack.unpack6025 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack6020.unpack6021.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack6020.unpack6021.unpack6028 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack6020.unpack6022.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack6020.unpack6022.unpack6031 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack6020.unpack6023.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %225 = mul nsw i64 %.unpack6020.unpack6021.unpack6028, %.unpack6020.unpack.unpack6025
  %226 = mul nsw i64 %.unpack6020.unpack6022.unpack6031, %225
  %invariant.gep6871 = getelementptr i8, ptr %0, i64 -40
  %.unpack5989 = load ptr, ptr @_QMlu_dataEfrct, align 8
  %.unpack5996.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7), align 8
  %.unpack5996.unpack.unpack6001 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5996.unpack5997.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1), align 8
  %.unpack5996.unpack5997.unpack6004 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5996.unpack5998.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2), align 8
  %.unpack5996.unpack5998.unpack6007 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5996.unpack5999.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 3), align 8
  %227 = mul nsw i64 %.unpack5996.unpack5997.unpack6004, %.unpack5996.unpack.unpack6001
  %228 = mul nsw i64 %.unpack5996.unpack5998.unpack6007, %227
  %229 = sub nsw i64 2, %.unpack5996.unpack5998.unpack
  %230 = mul nsw i64 %229, %227
  %231 = sub nsw i64 2, %.unpack6020.unpack6022.unpack
  %232 = mul nsw i64 %231, %225
  %233 = sub nsw i64 3, %.unpack6020.unpack6022.unpack
  %234 = mul nsw i64 %233, %225
  %235 = sub nsw i64 4, %.unpack6020.unpack6022.unpack
  %236 = mul nsw i64 %235, %225
  %237 = sub nsw i64 3, %.unpack5996.unpack5998.unpack
  %238 = mul nsw i64 %237, %227
  %239 = sub nsw i64 5, %.unpack6020.unpack6022.unpack
  %240 = mul nsw i64 %239, %225
  %241 = sub nsw i64 1, %.unpack5996.unpack.unpack
  %242 = sub nsw i64 2, %.unpack5996.unpack.unpack
  %243 = sub nsw i64 3, %.unpack5996.unpack.unpack
  %244 = sub nsw i64 4, %.unpack5996.unpack.unpack
  %245 = sub nsw i64 5, %.unpack5996.unpack.unpack
  %246 = sub nsw i64 1, %.unpack6020.unpack.unpack
  %247 = sub nsw i64 2, %.unpack5996.unpack.unpack
  %248 = sub nsw i64 2, %.unpack6020.unpack.unpack
  %249 = sub nsw i64 3, %.unpack5996.unpack.unpack
  %250 = sub nsw i64 3, %.unpack6020.unpack.unpack
  %251 = sub nsw i64 4, %.unpack5996.unpack.unpack
  %252 = sub nsw i64 4, %.unpack6020.unpack.unpack
  %253 = sub nsw i64 5, %.unpack5996.unpack.unpack
  %254 = sub nsw i64 5, %.unpack6020.unpack.unpack
  %255 = xor i64 %.unpack6020.unpack6022.unpack, -1
  %.unpack5501.unpack.unpack5506 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8, !tbaa !23
  %.unpack5501.unpack5502.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8, !tbaa !23
  %.unpack5501.unpack5502.unpack5509 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8, !tbaa !23
  %.unpack5501.unpack5503.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8, !tbaa !23
  %.unpack5501.unpack5503.unpack5512 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8, !tbaa !23
  %.unpack5501.unpack5504.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8, !tbaa !23
  %256 = mul nsw i64 %.unpack5501.unpack5502.unpack5509, %.unpack5501.unpack.unpack5506
  %257 = mul nsw i64 %.unpack5501.unpack5503.unpack5512, %256
  %scevgep7316 = getelementptr i8, ptr %0, i64 -16
  %scevgep7321 = getelementptr i8, ptr %0, i64 -8
  %scevgep7326 = getelementptr i8, ptr %0, i64 -24
  %scevgep7331 = getelementptr i8, ptr %0, i64 -32
  %scevgep7337 = getelementptr i8, ptr %0, i64 -32
  %258 = shl i64 %.unpack6020.unpack.unpack, 3
  %259 = sub i64 40, %258
  %scevgep7342 = getelementptr i8, ptr %.unpack6013, i64 %259
  %260 = mul i64 %.unpack6020.unpack6021.unpack, -8
  %261 = mul i64 %.unpack6020.unpack6022.unpack, -8
  %262 = shl i64 %.unpack6020.unpack6022.unpack6031, 3
  %scevgep7344 = getelementptr i8, ptr %.unpack6013, i64 %259
  %263 = sub i64 32, %258
  %scevgep7349 = getelementptr i8, ptr %.unpack6013, i64 %263
  %scevgep7351 = getelementptr i8, ptr %.unpack6013, i64 %263
  %264 = sub i64 24, %258
  %scevgep7356 = getelementptr i8, ptr %.unpack6013, i64 %264
  %scevgep7358 = getelementptr i8, ptr %.unpack6013, i64 %264
  %265 = sub i64 16, %258
  %scevgep7363 = getelementptr i8, ptr %.unpack6013, i64 %265
  %scevgep7365 = getelementptr i8, ptr %.unpack6013, i64 %265
  %266 = sub i64 8, %258
  %scevgep7370 = getelementptr i8, ptr %.unpack6013, i64 %266
  %scevgep7372 = getelementptr i8, ptr %.unpack6013, i64 %266
  %scevgep7377 = getelementptr i8, ptr %.unpack6013, i64 %259
  %scevgep7379 = getelementptr i8, ptr %.unpack6013, i64 %259
  %scevgep7384 = getelementptr i8, ptr %.unpack6013, i64 %263
  %scevgep7386 = getelementptr i8, ptr %.unpack6013, i64 %263
  %scevgep7391 = getelementptr i8, ptr %.unpack6013, i64 %264
  %scevgep7393 = getelementptr i8, ptr %.unpack6013, i64 %264
  %scevgep7398 = getelementptr i8, ptr %.unpack6013, i64 %265
  %scevgep7400 = getelementptr i8, ptr %.unpack6013, i64 %265
  %scevgep7405 = getelementptr i8, ptr %.unpack6013, i64 %266
  %scevgep7407 = getelementptr i8, ptr %.unpack6013, i64 %266
  %scevgep7482 = getelementptr i8, ptr %0, i64 -40
  %267 = shl i64 %.unpack6020.unpack.unpack, 3
  %268 = sub i64 40, %267
  %scevgep7484 = getelementptr i8, ptr %.unpack6013, i64 %268
  %269 = mul i64 %.unpack6020.unpack6021.unpack, -8
  %270 = shl i64 %.unpack6020.unpack6022.unpack, 3
  %271 = shl i64 %.unpack6020.unpack6022.unpack6031, 3
  %scevgep7486 = getelementptr i8, ptr %.unpack6013, i64 %268
  %272 = sub i64 32, %267
  %scevgep7491 = getelementptr i8, ptr %.unpack6013, i64 %272
  %scevgep7493 = getelementptr i8, ptr %.unpack6013, i64 %272
  %273 = sub i64 16, %267
  %scevgep7498 = getelementptr i8, ptr %.unpack6013, i64 %273
  %scevgep7500 = getelementptr i8, ptr %.unpack6013, i64 %273
  %274 = sub i64 8, %267
  %scevgep7505 = getelementptr i8, ptr %.unpack6013, i64 %274
  %scevgep7507 = getelementptr i8, ptr %.unpack6013, i64 %274
  %275 = sub i64 24, %267
  %scevgep7512 = getelementptr i8, ptr %.unpack6013, i64 %275
  %scevgep7514 = getelementptr i8, ptr %.unpack6013, i64 %275
  %invariant.gep7773 = getelementptr i8, ptr %0, i64 -40
  %276 = add i64 %.unpack6020.unpack6022.unpack, 1
  %277 = shl i64 %.unpack6020.unpack6022.unpack, 3
  %278 = add i64 %277, 8
  br label %omp_collapsed.body173

omp_collapsed.exit175:                            ; preds = %omp.wsloop.region167.preheader, %omp_collapsed.exit115
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num244)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num244)
  %279 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !19
  %280 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !21
  %281 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !25
  %282 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !27
  %283 = icmp slt i32 %280, %279
  %reass.sub6917 = sub i32 %280, %279
  %284 = add i32 %reass.sub6917, 1
  %omp_loop.tripcount186 = select i1 %283, i32 0, i32 %284
  %285 = sub nsw i32 %282, %281
  %286 = icmp slt i32 %282, %281
  %287 = add i32 %285, 1
  %omp_loop.tripcount190 = select i1 %286, i32 0, i32 %287
  %288 = mul nuw i32 %omp_loop.tripcount190, %omp_loop.tripcount186
  store i32 0, ptr %p.lowerbound241, align 4
  %289 = add i32 %288, -1
  store i32 %289, ptr %p.upperbound242, align 4
  store i32 1, ptr %p.stride243, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num244, i32 34, ptr nonnull %p.lastiter240, ptr nonnull %p.lowerbound241, ptr nonnull %p.upperbound242, ptr nonnull %p.stride243, i32 1, i32 0)
  %290 = load i32, ptr %p.lowerbound241, align 4
  %291 = load i32, ptr %p.upperbound242, align 4
  %reass.sub6918 = sub i32 %291, %290
  %omp_collapsed.cmp2386905.not = icmp eq i32 %reass.sub6918, -1
  br i1 %omp_collapsed.cmp2386905.not, label %omp_collapsed.exit235, label %omp_collapsed.body233.lr.ph

omp_collapsed.body233.lr.ph:                      ; preds = %omp_collapsed.exit175
  %.unpack5341 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack5348.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack5348.unpack.unpack5353 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5348.unpack5349.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack5348.unpack5349.unpack5356 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5348.unpack5350.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack5348.unpack5350.unpack5359 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5348.unpack5351.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %292 = mul nsw i64 %.unpack5348.unpack5349.unpack5356, %.unpack5348.unpack.unpack5353
  %293 = mul nsw i64 %.unpack5348.unpack5350.unpack5359, %292
  %invariant.gep6887 = getelementptr i8, ptr %0, i64 -40
  %.unpack5317 = load ptr, ptr @_QMlu_dataEfrct, align 8
  %.unpack5324.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7), align 8
  %.unpack5324.unpack.unpack5329 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5324.unpack5325.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1), align 8
  %.unpack5324.unpack5325.unpack5332 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5324.unpack5326.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2), align 8
  %.unpack5324.unpack5326.unpack5335 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5324.unpack5327.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 3), align 8
  %294 = mul nsw i64 %.unpack5324.unpack5325.unpack5332, %.unpack5324.unpack.unpack5329
  %295 = mul nsw i64 %.unpack5324.unpack5326.unpack5335, %294
  %296 = sub nsw i64 2, %.unpack5324.unpack5327.unpack
  %297 = mul nsw i64 %296, %295
  %298 = getelementptr double, ptr %.unpack5317, i64 %297
  %299 = sub nsw i64 2, %.unpack5348.unpack5351.unpack
  %300 = mul nsw i64 %299, %293
  %301 = getelementptr double, ptr %.unpack5341, i64 %300
  %302 = sub nsw i64 3, %.unpack5348.unpack5351.unpack
  %303 = mul nsw i64 %302, %293
  %304 = getelementptr double, ptr %.unpack5341, i64 %303
  %305 = sub nsw i64 4, %.unpack5348.unpack5351.unpack
  %306 = mul nsw i64 %305, %293
  %307 = getelementptr double, ptr %.unpack5341, i64 %306
  %308 = sub nsw i64 3, %.unpack5324.unpack5327.unpack
  %309 = mul nsw i64 %308, %295
  %310 = getelementptr double, ptr %.unpack5317, i64 %309
  %311 = sub nsw i64 5, %.unpack5348.unpack5351.unpack
  %312 = mul nsw i64 %311, %293
  %313 = getelementptr double, ptr %.unpack5341, i64 %312
  %314 = sub nsw i64 1, %.unpack5324.unpack.unpack
  %315 = sub nsw i64 2, %.unpack5324.unpack.unpack
  %316 = sub nsw i64 3, %.unpack5324.unpack.unpack
  %317 = sub nsw i64 4, %.unpack5324.unpack.unpack
  %318 = sub nsw i64 5, %.unpack5324.unpack.unpack
  %319 = xor i64 %.unpack5348.unpack5351.unpack, -1
  %320 = xor i64 %.unpack5348.unpack5351.unpack, -1
  %321 = sub nsw i64 2, %.unpack5324.unpack.unpack
  %322 = sub nsw i64 3, %.unpack5324.unpack.unpack
  %323 = sub nsw i64 4, %.unpack5324.unpack.unpack
  %324 = sub nsw i64 5, %.unpack5324.unpack.unpack
  %325 = xor i64 %.unpack5348.unpack5351.unpack, -1
  %.unpack4828.unpack4830.unpack4839 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8, !tbaa !23
  %.unpack4828.unpack4831.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8, !tbaa !23
  %326 = mul nsw i64 %.unpack4828.unpack4830.unpack4839, %292
  %scevgep7553 = getelementptr i8, ptr %0, i64 48
  %scevgep7554 = getelementptr i8, ptr %0, i64 -40
  %327 = shl i64 %.unpack5348.unpack.unpack, 3
  %328 = sub i64 40, %327
  %scevgep7556 = getelementptr i8, ptr %.unpack5341, i64 %328
  %329 = mul i64 %.unpack5348.unpack5349.unpack5356, %.unpack5348.unpack5350.unpack5359
  %330 = sub i64 1, %.unpack5348.unpack5351.unpack
  %331 = mul i64 %329, %330
  %scevgep7558 = getelementptr i8, ptr %.unpack5341, i64 %328
  %332 = mul i64 %.unpack5348.unpack5349.unpack5356, %.unpack5348.unpack5350.unpack5359
  %333 = shl i64 %.unpack5348.unpack5351.unpack, 3
  %334 = sub i64 32, %327
  %scevgep7563 = getelementptr i8, ptr %.unpack5341, i64 %334
  %scevgep7565 = getelementptr i8, ptr %.unpack5341, i64 %334
  %335 = sub i64 24, %327
  %scevgep7570 = getelementptr i8, ptr %.unpack5341, i64 %335
  %scevgep7572 = getelementptr i8, ptr %.unpack5341, i64 %335
  %336 = sub i64 16, %327
  %scevgep7577 = getelementptr i8, ptr %.unpack5341, i64 %336
  %scevgep7579 = getelementptr i8, ptr %.unpack5341, i64 %336
  %337 = sub i64 8, %327
  %scevgep7584 = getelementptr i8, ptr %.unpack5341, i64 %337
  %scevgep7586 = getelementptr i8, ptr %.unpack5341, i64 %337
  %scevgep7591 = getelementptr i8, ptr %.unpack5341, i64 %328
  %338 = mul i64 %.unpack5348.unpack5349.unpack5356, %.unpack5348.unpack5350.unpack5359
  %339 = sub i64 2, %.unpack5348.unpack5351.unpack
  %340 = mul i64 %338, %339
  %scevgep7593 = getelementptr i8, ptr %.unpack5341, i64 %328
  %341 = mul i64 %.unpack5348.unpack5349.unpack5356, %.unpack5348.unpack5350.unpack5359
  %scevgep7598 = getelementptr i8, ptr %.unpack5341, i64 %334
  %scevgep7600 = getelementptr i8, ptr %.unpack5341, i64 %334
  %scevgep7605 = getelementptr i8, ptr %.unpack5341, i64 %335
  %scevgep7607 = getelementptr i8, ptr %.unpack5341, i64 %335
  %scevgep7612 = getelementptr i8, ptr %.unpack5341, i64 %336
  %scevgep7614 = getelementptr i8, ptr %.unpack5341, i64 %336
  %scevgep7619 = getelementptr i8, ptr %.unpack5341, i64 %337
  %scevgep7621 = getelementptr i8, ptr %.unpack5341, i64 %337
  %scevgep7691 = getelementptr i8, ptr %0, i64 -40
  %342 = shl i64 %.unpack5348.unpack.unpack, 3
  %343 = sub i64 40, %342
  %scevgep7693 = getelementptr i8, ptr %.unpack5341, i64 %343
  %344 = mul i64 %.unpack5348.unpack5349.unpack, -8
  %345 = sub i64 1, %.unpack5348.unpack5351.unpack
  %346 = mul i64 %.unpack5348.unpack5350.unpack5359, %345
  %347 = sub i64 %346, %.unpack5348.unpack5350.unpack
  %scevgep7695 = getelementptr i8, ptr %.unpack5341, i64 %343
  %348 = sub i64 24, %342
  %scevgep7700 = getelementptr i8, ptr %.unpack5341, i64 %348
  %scevgep7702 = getelementptr i8, ptr %.unpack5341, i64 %348
  %349 = sub i64 16, %342
  %scevgep7707 = getelementptr i8, ptr %.unpack5341, i64 %349
  %scevgep7709 = getelementptr i8, ptr %.unpack5341, i64 %349
  %350 = sub i64 8, %342
  %scevgep7714 = getelementptr i8, ptr %.unpack5341, i64 %350
  %scevgep7716 = getelementptr i8, ptr %.unpack5341, i64 %350
  %351 = sub i64 32, %342
  %scevgep7721 = getelementptr i8, ptr %.unpack5341, i64 %351
  %scevgep7723 = getelementptr i8, ptr %.unpack5341, i64 %351
  %352 = shl i64 %.unpack5348.unpack5350.unpack, 3
  %invariant.gep7775 = getelementptr i8, ptr %0, i64 -40
  %bound07665 = icmp ult ptr %scevgep7553, getelementptr inbounds (double, ptr @_QMlu_dataEtz3, i64 1)
  br label %omp_collapsed.body233

omp_collapsed.exit235:                            ; preds = %omp.wsloop.region227.preheader, %omp_collapsed.exit175
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num244)
  ret void

omp_collapsed.body233:                            ; preds = %omp_collapsed.body233.lr.ph, %omp.wsloop.region227.preheader
  %omp_collapsed.iv2376906 = phi i32 [ 0, %omp_collapsed.body233.lr.ph ], [ %omp_collapsed.next239, %omp.wsloop.region227.preheader ]
  %353 = add i32 %omp_collapsed.iv2376906, %290
  %354 = urem i32 %353, %287
  %355 = udiv i32 %353, %287
  %356 = add i32 %355, %279
  %357 = add i32 %354, %281
  %358 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %359 = icmp sgt i32 %358, 0
  br i1 %359, label %omp.wsloop.region204.lr.ph, label %omp.wsloop.region205

omp.wsloop.region204.lr.ph:                       ; preds = %omp_collapsed.body233
  %360 = sext i32 %357 to i64
  %361 = sext i32 %356 to i64
  %362 = sub nsw i64 %360, %.unpack5348.unpack5349.unpack
  %363 = mul nsw i64 %362, %.unpack5348.unpack.unpack5353
  %reass.sub5365 = sub i64 %363, %.unpack5348.unpack.unpack
  %364 = sub nsw i64 %361, %.unpack5348.unpack5350.unpack
  %365 = mul nsw i64 %364, %292
  %invariant.gep6883 = getelementptr double, ptr %.unpack5341, i64 %365
  %invariant.gep6885 = getelementptr double, ptr %invariant.gep6883, i64 %reass.sub5365
  %narrow7095 = add nuw i32 %358, 1
  %366 = zext i32 %narrow7095 to i64
  %367 = add nsw i64 %366, -1
  %min.iters.check7749 = icmp ult i32 %358, 4
  br i1 %min.iters.check7749, label %omp.wsloop.region204.preheader, label %vector.memcheck7690

vector.memcheck7690:                              ; preds = %omp.wsloop.region204.lr.ph
  %368 = mul nuw nsw i64 %366, 40
  %scevgep7692 = getelementptr i8, ptr %scevgep7691, i64 %368
  %369 = shl nsw i64 %361, 3
  %370 = add i64 %347, %361
  %371 = shl i64 %370, 3
  %372 = mul i64 %.unpack5348.unpack5349.unpack5356, %371
  %373 = add i64 %344, %372
  %374 = shl nsw i64 %360, 3
  %375 = add i64 %373, %374
  %376 = mul i64 %.unpack5348.unpack.unpack5353, %375
  %scevgep7694 = getelementptr i8, ptr %scevgep7693, i64 %376
  %377 = sub i64 %366, %.unpack5348.unpack5351.unpack
  %reass.sub7765 = shl i64 %377, 3
  %378 = add i64 %reass.sub7765, -8
  %379 = mul i64 %.unpack5348.unpack5350.unpack5359, %378
  %380 = sub i64 %379, %352
  %381 = add i64 %380, %369
  %382 = mul i64 %.unpack5348.unpack5349.unpack5356, %381
  %383 = add i64 %344, %382
  %384 = add i64 %383, %374
  %385 = mul i64 %.unpack5348.unpack.unpack5353, %384
  %scevgep7696 = getelementptr i8, ptr %scevgep7695, i64 %385
  %386 = icmp ult ptr %scevgep7694, %scevgep7696
  %umin7697 = select i1 %386, ptr %scevgep7694, ptr %scevgep7696
  %387 = icmp ugt ptr %scevgep7694, %scevgep7696
  %umax7698 = select i1 %387, ptr %scevgep7694, ptr %scevgep7696
  %scevgep7699 = getelementptr i8, ptr %umax7698, i64 8
  %scevgep7701 = getelementptr i8, ptr %scevgep7700, i64 %376
  %scevgep7703 = getelementptr i8, ptr %scevgep7702, i64 %385
  %388 = icmp ult ptr %scevgep7701, %scevgep7703
  %umin7704 = select i1 %388, ptr %scevgep7701, ptr %scevgep7703
  %389 = icmp ugt ptr %scevgep7701, %scevgep7703
  %umax7705 = select i1 %389, ptr %scevgep7701, ptr %scevgep7703
  %scevgep7706 = getelementptr i8, ptr %umax7705, i64 8
  %scevgep7708 = getelementptr i8, ptr %scevgep7707, i64 %376
  %scevgep7710 = getelementptr i8, ptr %scevgep7709, i64 %385
  %390 = icmp ult ptr %scevgep7708, %scevgep7710
  %umin7711 = select i1 %390, ptr %scevgep7708, ptr %scevgep7710
  %391 = icmp ugt ptr %scevgep7708, %scevgep7710
  %umax7712 = select i1 %391, ptr %scevgep7708, ptr %scevgep7710
  %scevgep7713 = getelementptr i8, ptr %umax7712, i64 8
  %scevgep7715 = getelementptr i8, ptr %scevgep7714, i64 %376
  %scevgep7717 = getelementptr i8, ptr %scevgep7716, i64 %385
  %392 = icmp ult ptr %scevgep7715, %scevgep7717
  %umin7718 = select i1 %392, ptr %scevgep7715, ptr %scevgep7717
  %393 = icmp ugt ptr %scevgep7715, %scevgep7717
  %umax7719 = select i1 %393, ptr %scevgep7715, ptr %scevgep7717
  %scevgep7720 = getelementptr i8, ptr %umax7719, i64 8
  %scevgep7722 = getelementptr i8, ptr %scevgep7721, i64 %376
  %scevgep7724 = getelementptr i8, ptr %scevgep7723, i64 %385
  %394 = icmp ult ptr %scevgep7722, %scevgep7724
  %umin7725 = select i1 %394, ptr %scevgep7722, ptr %scevgep7724
  %395 = icmp ugt ptr %scevgep7722, %scevgep7724
  %umax7726 = select i1 %395, ptr %scevgep7722, ptr %scevgep7724
  %scevgep7727 = getelementptr i8, ptr %umax7726, i64 8
  %bound07728 = icmp ult ptr %0, %scevgep7699
  %bound17729 = icmp ult ptr %umin7697, %scevgep7692
  %found.conflict7730 = and i1 %bound07728, %bound17729
  %bound07731 = icmp ult ptr %0, %scevgep7706
  %bound17732 = icmp ult ptr %umin7704, %scevgep7692
  %found.conflict7733 = and i1 %bound07731, %bound17732
  %conflict.rdx7734 = or i1 %found.conflict7730, %found.conflict7733
  %bound07735 = icmp ult ptr %0, %scevgep7713
  %bound17736 = icmp ult ptr %umin7711, %scevgep7692
  %found.conflict7737 = and i1 %bound07735, %bound17736
  %conflict.rdx7738 = or i1 %conflict.rdx7734, %found.conflict7737
  %bound07739 = icmp ult ptr %0, %scevgep7720
  %bound17740 = icmp ult ptr %umin7718, %scevgep7692
  %found.conflict7741 = and i1 %bound07739, %bound17740
  %conflict.rdx7742 = or i1 %conflict.rdx7738, %found.conflict7741
  %bound07743 = icmp ult ptr %0, %scevgep7727
  %bound17744 = icmp ult ptr %umin7725, %scevgep7692
  %found.conflict7745 = and i1 %bound07743, %bound17744
  %conflict.rdx7746 = or i1 %conflict.rdx7742, %found.conflict7745
  br i1 %conflict.rdx7746, label %omp.wsloop.region204.preheader, label %vector.ph7750

vector.ph7750:                                    ; preds = %vector.memcheck7690
  %n.vec7752 = and i64 %367, -2
  %ind.end7753 = or i64 %367, 1
  br label %vector.body7756

vector.body7756:                                  ; preds = %vector.body7756, %vector.ph7750
  %index7757 = phi i64 [ 0, %vector.ph7750 ], [ %index.next7760, %vector.body7756 ]
  %offset.idx7758 = or disjoint i64 %index7757, 1
  %396 = add i64 %index7757, 2
  %397 = sub nsw i64 %offset.idx7758, %.unpack5348.unpack5351.unpack
  %398 = sub nsw i64 %396, %.unpack5348.unpack5351.unpack
  %399 = mul nsw i64 %293, %397
  %400 = mul nsw i64 %293, %398
  %401 = getelementptr double, ptr %invariant.gep6885, i64 %399
  %402 = getelementptr double, ptr %invariant.gep6885, i64 %400
  %403 = getelementptr i8, ptr %401, i64 32
  %404 = getelementptr i8, ptr %402, i64 32
  %405 = load double, ptr %403, align 8, !tbaa !29, !alias.scope !31
  %406 = load double, ptr %404, align 8, !tbaa !29, !alias.scope !31
  %407 = insertelement <2 x double> poison, double %405, i64 0
  %408 = insertelement <2 x double> %407, double %406, i64 1
  %409 = mul nuw nsw i64 %offset.idx7758, 5
  %410 = getelementptr i8, ptr %401, i64 8
  %411 = getelementptr i8, ptr %402, i64 8
  %412 = load double, ptr %410, align 8, !tbaa !29, !alias.scope !34
  %413 = load double, ptr %411, align 8, !tbaa !29, !alias.scope !34
  %414 = insertelement <2 x double> poison, double %412, i64 0
  %415 = insertelement <2 x double> %414, double %413, i64 1
  %416 = fdiv contract <2 x double> %408, %415
  %417 = getelementptr i8, ptr %401, i64 16
  %418 = getelementptr i8, ptr %402, i64 16
  %419 = load double, ptr %417, align 8, !tbaa !29, !alias.scope !36
  %420 = load double, ptr %418, align 8, !tbaa !29, !alias.scope !36
  %421 = insertelement <2 x double> poison, double %419, i64 0
  %422 = insertelement <2 x double> %421, double %420, i64 1
  %423 = fmul contract <2 x double> %422, %422
  %424 = getelementptr i8, ptr %401, i64 24
  %425 = getelementptr i8, ptr %402, i64 24
  %426 = load double, ptr %424, align 8, !tbaa !29, !alias.scope !38
  %427 = load double, ptr %425, align 8, !tbaa !29, !alias.scope !38
  %428 = insertelement <2 x double> poison, double %426, i64 0
  %429 = insertelement <2 x double> %428, double %427, i64 1
  %430 = fmul contract <2 x double> %429, %429
  %431 = fadd contract <2 x double> %423, %430
  %432 = fmul contract <2 x double> %408, %408
  %433 = fadd contract <2 x double> %432, %431
  %434 = fmul contract <2 x double> %433, <double 5.000000e-01, double 5.000000e-01>
  %435 = fdiv contract <2 x double> %434, %415
  %436 = fmul contract <2 x double> %422, %416
  %437 = load double, ptr %424, align 8, !tbaa !29, !alias.scope !38
  %438 = load double, ptr %425, align 8, !tbaa !29, !alias.scope !38
  %439 = insertelement <2 x double> poison, double %437, i64 0
  %440 = insertelement <2 x double> %439, double %438, i64 1
  %441 = fmul contract <2 x double> %416, %440
  %442 = load double, ptr %403, align 8, !tbaa !29, !alias.scope !31
  %443 = load double, ptr %404, align 8, !tbaa !29, !alias.scope !31
  %444 = insertelement <2 x double> poison, double %442, i64 0
  %445 = insertelement <2 x double> %444, double %443, i64 1
  %446 = fmul contract <2 x double> %416, %445
  %447 = getelementptr i8, ptr %401, i64 40
  %448 = getelementptr i8, ptr %402, i64 40
  %449 = load double, ptr %447, align 8, !tbaa !29, !alias.scope !40
  %450 = load double, ptr %448, align 8, !tbaa !29, !alias.scope !40
  %451 = insertelement <2 x double> poison, double %449, i64 0
  %452 = insertelement <2 x double> %451, double %450, i64 1
  %453 = fsub contract <2 x double> %452, %435
  %454 = fmul contract <2 x double> %453, <double 4.000000e-01, double 4.000000e-01>
  %455 = fadd contract <2 x double> %446, %454
  %456 = load double, ptr %447, align 8, !tbaa !29, !alias.scope !40
  %457 = load double, ptr %448, align 8, !tbaa !29, !alias.scope !40
  %458 = insertelement <2 x double> poison, double %456, i64 0
  %459 = insertelement <2 x double> %458, double %457, i64 1
  %460 = fmul contract <2 x double> %459, <double 1.400000e+00, double 1.400000e+00>
  %461 = fmul contract <2 x double> %435, <double 4.000000e-01, double 4.000000e-01>
  %462 = fsub contract <2 x double> %460, %461
  %463 = fmul contract <2 x double> %416, %462
  %gep7776 = getelementptr double, ptr %invariant.gep7775, i64 %409
  %464 = shufflevector <2 x double> %408, <2 x double> %436, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %465 = shufflevector <2 x double> %441, <2 x double> %455, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %466 = shufflevector <4 x double> %464, <4 x double> %465, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %467 = shufflevector <2 x double> %463, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec7759 = shufflevector <8 x double> %466, <8 x double> %467, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec7759, ptr %gep7776, align 8, !tbaa !42
  %index.next7760 = add nuw i64 %index7757, 2
  %468 = icmp eq i64 %index.next7760, %n.vec7752
  br i1 %468, label %middle.block7747, label %vector.body7756, !llvm.loop !43

middle.block7747:                                 ; preds = %vector.body7756
  %cmp.n7755 = icmp eq i64 %367, %n.vec7752
  br i1 %cmp.n7755, label %omp.wsloop.region205.loopexit, label %omp.wsloop.region204.preheader

omp.wsloop.region204.preheader:                   ; preds = %vector.memcheck7690, %omp.wsloop.region204.lr.ph, %middle.block7747
  %indvars.iv6982.ph = phi i64 [ 1, %vector.memcheck7690 ], [ 1, %omp.wsloop.region204.lr.ph ], [ %ind.end7753, %middle.block7747 ]
  br label %omp.wsloop.region204

omp.wsloop.region205.loopexit:                    ; preds = %omp.wsloop.region204, %middle.block7747
  %.pre7018 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  br label %omp.wsloop.region205

omp.wsloop.region205:                             ; preds = %omp.wsloop.region205.loopexit, %omp_collapsed.body233
  %469 = phi i32 [ %.pre7018, %omp.wsloop.region205.loopexit ], [ %358, %omp_collapsed.body233 ]
  %470 = add i32 %469, -1
  %471 = icmp sgt i32 %470, 1
  br i1 %471, label %omp.wsloop.region208.preheader.lr.ph, label %omp.wsloop.region211

omp.wsloop.region208.preheader.lr.ph:             ; preds = %omp.wsloop.region205
  %472 = zext nneg i32 %470 to i64
  %473 = sext i32 %357 to i64
  %474 = sext i32 %356 to i64
  %475 = sub nsw i64 %473, %.unpack5324.unpack5325.unpack
  %476 = mul nsw i64 %475, %.unpack5324.unpack.unpack5329
  %477 = sub nsw i64 %474, %.unpack5324.unpack5326.unpack
  %478 = mul nsw i64 %477, %294
  %invariant.gep6891 = getelementptr double, ptr %.unpack5317, i64 %478
  %invariant.gep6893 = getelementptr double, ptr %invariant.gep6891, i64 %476
  %479 = load double, ptr @_QMlu_dataEtz2, align 8, !tbaa !46
  br label %omp.wsloop.region208.preheader

omp.wsloop.region208.preheader:                   ; preds = %omp.wsloop.region208.preheader.lr.ph, %omp.wsloop.region208.preheader
  %.in = phi i64 [ %472, %omp.wsloop.region208.preheader.lr.ph ], [ %533, %omp.wsloop.region208.preheader ]
  %480 = phi i32 [ 2, %omp.wsloop.region208.preheader.lr.ph ], [ %484, %omp.wsloop.region208.preheader ]
  %481 = sext i32 %480 to i64
  %482 = sub nsw i64 %481, %.unpack5324.unpack5327.unpack
  %483 = mul nsw i64 %295, %482
  %gep6894 = getelementptr double, ptr %invariant.gep6893, i64 %483
  %484 = add i32 %480, 1
  %485 = sext i32 %484 to i64
  %486 = mul nsw i64 %485, 5
  %gep6888 = getelementptr double, ptr %invariant.gep6887, i64 %486
  %487 = add i32 %480, -1
  %488 = sext i32 %487 to i64
  %489 = mul nsw i64 %488, 5
  %gep6890 = getelementptr double, ptr %invariant.gep6887, i64 %489
  %490 = getelementptr double, ptr %gep6894, i64 %314
  %491 = load double, ptr %490, align 8, !tbaa !14
  %492 = load double, ptr %gep6888, align 8, !tbaa !42
  %493 = load double, ptr %gep6890, align 8, !tbaa !42
  %494 = fsub contract double %492, %493
  %495 = fmul contract double %479, %494
  %496 = fsub contract double %491, %495
  store double %496, ptr %490, align 8, !tbaa !14
  %497 = getelementptr double, ptr %gep6894, i64 %315
  %498 = load double, ptr %497, align 8, !tbaa !14
  %499 = getelementptr i8, ptr %gep6888, i64 8
  %500 = load double, ptr %499, align 8, !tbaa !42
  %501 = getelementptr i8, ptr %gep6890, i64 8
  %502 = load double, ptr %501, align 8, !tbaa !42
  %503 = fsub contract double %500, %502
  %504 = fmul contract double %479, %503
  %505 = fsub contract double %498, %504
  store double %505, ptr %497, align 8, !tbaa !14
  %506 = getelementptr double, ptr %gep6894, i64 %316
  %507 = load double, ptr %506, align 8, !tbaa !14
  %508 = getelementptr i8, ptr %gep6888, i64 16
  %509 = load double, ptr %508, align 8, !tbaa !42
  %510 = getelementptr i8, ptr %gep6890, i64 16
  %511 = load double, ptr %510, align 8, !tbaa !42
  %512 = fsub contract double %509, %511
  %513 = fmul contract double %479, %512
  %514 = fsub contract double %507, %513
  store double %514, ptr %506, align 8, !tbaa !14
  %515 = getelementptr double, ptr %gep6894, i64 %317
  %516 = load double, ptr %515, align 8, !tbaa !14
  %517 = getelementptr i8, ptr %gep6888, i64 24
  %518 = load double, ptr %517, align 8, !tbaa !42
  %519 = getelementptr i8, ptr %gep6890, i64 24
  %520 = load double, ptr %519, align 8, !tbaa !42
  %521 = fsub contract double %518, %520
  %522 = fmul contract double %479, %521
  %523 = fsub contract double %516, %522
  store double %523, ptr %515, align 8, !tbaa !14
  %524 = getelementptr double, ptr %gep6894, i64 %318
  %525 = load double, ptr %524, align 8, !tbaa !14
  %526 = getelementptr i8, ptr %gep6888, i64 32
  %527 = load double, ptr %526, align 8, !tbaa !42
  %528 = getelementptr i8, ptr %gep6890, i64 32
  %529 = load double, ptr %528, align 8, !tbaa !42
  %530 = fsub contract double %527, %529
  %531 = fmul contract double %479, %530
  %532 = fsub contract double %525, %531
  store double %532, ptr %524, align 8, !tbaa !14
  %533 = add nsw i64 %.in, -1
  %534 = icmp ugt i64 %.in, 2
  br i1 %534, label %omp.wsloop.region208.preheader, label %omp.wsloop.region211

omp.wsloop.region211:                             ; preds = %omp.wsloop.region208.preheader, %omp.wsloop.region205
  %535 = icmp sgt i32 %469, 1
  br i1 %535, label %omp.wsloop.region213.lr.ph, label %omp.wsloop.region214

omp.wsloop.region213.lr.ph:                       ; preds = %omp.wsloop.region211
  %536 = sext i32 %357 to i64
  %537 = sext i32 %356 to i64
  %538 = sub nsw i64 %536, %.unpack5348.unpack5349.unpack
  %539 = mul nsw i64 %538, %.unpack5348.unpack.unpack5353
  %reass.sub5310 = sub i64 %539, %.unpack5348.unpack.unpack
  %540 = sub nsw i64 %537, %.unpack5348.unpack5350.unpack
  %541 = mul nsw i64 %540, %292
  %542 = add i64 %541, %reass.sub5310
  %543 = add i64 %542, 1
  %544 = add i64 %542, 2
  %545 = add i64 %542, 3
  %546 = add i64 %542, 4
  %547 = add i64 %542, 5
  %narrow7096 = add nuw i32 %469, 1
  %548 = zext i32 %narrow7096 to i64
  %549 = add nsw i64 %548, -2
  %min.iters.check7671 = icmp ult i64 %549, 4
  br i1 %min.iters.check7671, label %omp.wsloop.region213.preheader, label %vector.memcheck7552

vector.memcheck7552:                              ; preds = %omp.wsloop.region213.lr.ph
  %550 = mul nuw nsw i64 %548, 40
  %scevgep7555 = getelementptr i8, ptr %scevgep7554, i64 %550
  %551 = mul i64 %.unpack5348.unpack5349.unpack5356, %540
  %552 = sub i64 %551, %.unpack5348.unpack5349.unpack
  %553 = add i64 %552, %536
  %554 = shl i64 %553, 3
  %555 = add i64 %331, %553
  %556 = shl i64 %555, 3
  %557 = mul i64 %.unpack5348.unpack.unpack5353, %556
  %scevgep7557 = getelementptr i8, ptr %scevgep7556, i64 %557
  %558 = shl nuw nsw i64 %548, 3
  %reass.sub7766 = sub i64 %558, %333
  %559 = add i64 %reass.sub7766, -16
  %560 = mul i64 %332, %559
  %561 = add i64 %560, %554
  %562 = mul i64 %.unpack5348.unpack.unpack5353, %561
  %scevgep7559 = getelementptr i8, ptr %scevgep7558, i64 %562
  %563 = icmp ult ptr %scevgep7557, %scevgep7559
  %umin7560 = select i1 %563, ptr %scevgep7557, ptr %scevgep7559
  %564 = icmp ugt ptr %scevgep7557, %scevgep7559
  %umax7561 = select i1 %564, ptr %scevgep7557, ptr %scevgep7559
  %scevgep7562 = getelementptr i8, ptr %umax7561, i64 8
  %scevgep7564 = getelementptr i8, ptr %scevgep7563, i64 %557
  %scevgep7566 = getelementptr i8, ptr %scevgep7565, i64 %562
  %565 = icmp ult ptr %scevgep7564, %scevgep7566
  %umin7567 = select i1 %565, ptr %scevgep7564, ptr %scevgep7566
  %566 = icmp ugt ptr %scevgep7564, %scevgep7566
  %umax7568 = select i1 %566, ptr %scevgep7564, ptr %scevgep7566
  %scevgep7569 = getelementptr i8, ptr %umax7568, i64 8
  %scevgep7571 = getelementptr i8, ptr %scevgep7570, i64 %557
  %scevgep7573 = getelementptr i8, ptr %scevgep7572, i64 %562
  %567 = icmp ult ptr %scevgep7571, %scevgep7573
  %umin7574 = select i1 %567, ptr %scevgep7571, ptr %scevgep7573
  %568 = icmp ugt ptr %scevgep7571, %scevgep7573
  %umax7575 = select i1 %568, ptr %scevgep7571, ptr %scevgep7573
  %scevgep7576 = getelementptr i8, ptr %umax7575, i64 8
  %scevgep7578 = getelementptr i8, ptr %scevgep7577, i64 %557
  %scevgep7580 = getelementptr i8, ptr %scevgep7579, i64 %562
  %569 = icmp ult ptr %scevgep7578, %scevgep7580
  %umin7581 = select i1 %569, ptr %scevgep7578, ptr %scevgep7580
  %570 = icmp ugt ptr %scevgep7578, %scevgep7580
  %umax7582 = select i1 %570, ptr %scevgep7578, ptr %scevgep7580
  %scevgep7583 = getelementptr i8, ptr %umax7582, i64 8
  %scevgep7585 = getelementptr i8, ptr %scevgep7584, i64 %557
  %scevgep7587 = getelementptr i8, ptr %scevgep7586, i64 %562
  %571 = icmp ult ptr %scevgep7585, %scevgep7587
  %umin7588 = select i1 %571, ptr %scevgep7585, ptr %scevgep7587
  %572 = icmp ugt ptr %scevgep7585, %scevgep7587
  %umax7589 = select i1 %572, ptr %scevgep7585, ptr %scevgep7587
  %scevgep7590 = getelementptr i8, ptr %umax7589, i64 8
  %573 = add i64 %340, %553
  %574 = shl i64 %573, 3
  %575 = mul i64 %.unpack5348.unpack.unpack5353, %574
  %scevgep7592 = getelementptr i8, ptr %scevgep7591, i64 %575
  %reass.sub7767 = sub i64 %558, %333
  %576 = add i64 %reass.sub7767, -8
  %577 = mul i64 %341, %576
  %578 = add i64 %577, %554
  %579 = mul i64 %.unpack5348.unpack.unpack5353, %578
  %scevgep7594 = getelementptr i8, ptr %scevgep7593, i64 %579
  %580 = icmp ult ptr %scevgep7592, %scevgep7594
  %umin7595 = select i1 %580, ptr %scevgep7592, ptr %scevgep7594
  %581 = icmp ugt ptr %scevgep7592, %scevgep7594
  %umax7596 = select i1 %581, ptr %scevgep7592, ptr %scevgep7594
  %scevgep7597 = getelementptr i8, ptr %umax7596, i64 8
  %scevgep7599 = getelementptr i8, ptr %scevgep7598, i64 %575
  %scevgep7601 = getelementptr i8, ptr %scevgep7600, i64 %579
  %582 = icmp ult ptr %scevgep7599, %scevgep7601
  %umin7602 = select i1 %582, ptr %scevgep7599, ptr %scevgep7601
  %583 = icmp ugt ptr %scevgep7599, %scevgep7601
  %umax7603 = select i1 %583, ptr %scevgep7599, ptr %scevgep7601
  %scevgep7604 = getelementptr i8, ptr %umax7603, i64 8
  %scevgep7606 = getelementptr i8, ptr %scevgep7605, i64 %575
  %scevgep7608 = getelementptr i8, ptr %scevgep7607, i64 %579
  %584 = icmp ult ptr %scevgep7606, %scevgep7608
  %umin7609 = select i1 %584, ptr %scevgep7606, ptr %scevgep7608
  %585 = icmp ugt ptr %scevgep7606, %scevgep7608
  %umax7610 = select i1 %585, ptr %scevgep7606, ptr %scevgep7608
  %scevgep7611 = getelementptr i8, ptr %umax7610, i64 8
  %scevgep7613 = getelementptr i8, ptr %scevgep7612, i64 %575
  %scevgep7615 = getelementptr i8, ptr %scevgep7614, i64 %579
  %586 = icmp ult ptr %scevgep7613, %scevgep7615
  %umin7616 = select i1 %586, ptr %scevgep7613, ptr %scevgep7615
  %587 = icmp ugt ptr %scevgep7613, %scevgep7615
  %umax7617 = select i1 %587, ptr %scevgep7613, ptr %scevgep7615
  %scevgep7618 = getelementptr i8, ptr %umax7617, i64 8
  %scevgep7620 = getelementptr i8, ptr %scevgep7619, i64 %575
  %scevgep7622 = getelementptr i8, ptr %scevgep7621, i64 %579
  %588 = icmp ult ptr %scevgep7620, %scevgep7622
  %umin7623 = select i1 %588, ptr %scevgep7620, ptr %scevgep7622
  %589 = icmp ugt ptr %scevgep7620, %scevgep7622
  %umax7624 = select i1 %589, ptr %scevgep7620, ptr %scevgep7622
  %scevgep7625 = getelementptr i8, ptr %umax7624, i64 8
  %bound07626 = icmp ult ptr %scevgep7553, %scevgep7562
  %bound17627 = icmp ult ptr %umin7560, %scevgep7555
  %found.conflict7628 = and i1 %bound07626, %bound17627
  %bound07629 = icmp ult ptr %scevgep7553, %scevgep7569
  %bound17630 = icmp ult ptr %umin7567, %scevgep7555
  %found.conflict7631 = and i1 %bound07629, %bound17630
  %conflict.rdx7632 = or i1 %found.conflict7628, %found.conflict7631
  %bound07633 = icmp ult ptr %scevgep7553, %scevgep7576
  %bound17634 = icmp ult ptr %umin7574, %scevgep7555
  %found.conflict7635 = and i1 %bound07633, %bound17634
  %conflict.rdx7636 = or i1 %conflict.rdx7632, %found.conflict7635
  %bound07637 = icmp ult ptr %scevgep7553, %scevgep7583
  %bound17638 = icmp ult ptr %umin7581, %scevgep7555
  %found.conflict7639 = and i1 %bound07637, %bound17638
  %conflict.rdx7640 = or i1 %conflict.rdx7636, %found.conflict7639
  %bound07641 = icmp ult ptr %scevgep7553, %scevgep7590
  %bound17642 = icmp ult ptr %umin7588, %scevgep7555
  %found.conflict7643 = and i1 %bound07641, %bound17642
  %conflict.rdx7644 = or i1 %conflict.rdx7640, %found.conflict7643
  %bound07645 = icmp ult ptr %scevgep7553, %scevgep7597
  %bound17646 = icmp ult ptr %umin7595, %scevgep7555
  %found.conflict7647 = and i1 %bound07645, %bound17646
  %conflict.rdx7648 = or i1 %conflict.rdx7644, %found.conflict7647
  %bound07649 = icmp ult ptr %scevgep7553, %scevgep7604
  %bound17650 = icmp ult ptr %umin7602, %scevgep7555
  %found.conflict7651 = and i1 %bound07649, %bound17650
  %conflict.rdx7652 = or i1 %conflict.rdx7648, %found.conflict7651
  %bound07653 = icmp ult ptr %scevgep7553, %scevgep7611
  %bound17654 = icmp ult ptr %umin7609, %scevgep7555
  %found.conflict7655 = and i1 %bound07653, %bound17654
  %conflict.rdx7656 = or i1 %conflict.rdx7652, %found.conflict7655
  %bound07657 = icmp ult ptr %scevgep7553, %scevgep7618
  %bound17658 = icmp ult ptr %umin7616, %scevgep7555
  %found.conflict7659 = and i1 %bound07657, %bound17658
  %conflict.rdx7660 = or i1 %conflict.rdx7656, %found.conflict7659
  %bound07661 = icmp ult ptr %scevgep7553, %scevgep7625
  %bound17662 = icmp ult ptr %umin7623, %scevgep7555
  %found.conflict7663 = and i1 %bound07661, %bound17662
  %conflict.rdx7664 = or i1 %conflict.rdx7660, %found.conflict7663
  %bound17666 = icmp ugt ptr %scevgep7555, @_QMlu_dataEtz3
  %found.conflict7667 = and i1 %bound07665, %bound17666
  %conflict.rdx7668 = or i1 %conflict.rdx7664, %found.conflict7667
  br i1 %conflict.rdx7668, label %omp.wsloop.region213.preheader, label %vector.ph7672

vector.ph7672:                                    ; preds = %vector.memcheck7552
  %n.vec7674 = and i64 %549, -2
  %ind.end7675 = add nsw i64 %n.vec7674, 2
  %590 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48, !alias.scope !50
  %broadcast.splatinsert7681 = insertelement <2 x double> poison, double %590, i64 0
  %broadcast.splat7682 = shufflevector <2 x double> %broadcast.splatinsert7681, <2 x double> poison, <2 x i32> zeroinitializer
  %591 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48, !alias.scope !50
  %broadcast.splatinsert7683 = insertelement <2 x double> poison, double %591, i64 0
  %broadcast.splat7684 = shufflevector <2 x double> %broadcast.splatinsert7683, <2 x double> poison, <2 x i32> zeroinitializer
  %592 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48, !alias.scope !50
  %broadcast.splatinsert7685 = insertelement <2 x double> poison, double %592, i64 0
  %593 = fmul contract <2 x double> %broadcast.splatinsert7685, <double 0x3FF5555555555555, double poison>
  %594 = shufflevector <2 x double> %593, <2 x double> poison, <2 x i32> zeroinitializer
  %595 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48, !alias.scope !50
  %broadcast.splatinsert7687 = insertelement <2 x double> poison, double %595, i64 0
  %broadcast.splat7688 = shufflevector <2 x double> %broadcast.splatinsert7687, <2 x double> poison, <2 x i32> zeroinitializer
  %596 = fmul contract <2 x double> %broadcast.splat7688, <double 0x3FDEB851EB851EB6, double 0x3FDEB851EB851EB6>
  %597 = fmul contract <2 x double> %broadcast.splat7688, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %598 = fmul contract <2 x double> %broadcast.splat7688, <double 0x3FFF5C28F5C28F5B, double 0x3FFF5C28F5C28F5B>
  br label %vector.body7678

vector.body7678:                                  ; preds = %vector.body7678, %vector.ph7672
  %index7679 = phi i64 [ 0, %vector.ph7672 ], [ %index.next7689, %vector.body7678 ]
  %offset.idx7680 = add i64 %index7679, 2
  %599 = add i64 %index7679, 3
  %600 = sub nsw i64 %offset.idx7680, %.unpack5348.unpack5351.unpack
  %601 = sub nsw i64 %599, %.unpack5348.unpack5351.unpack
  %602 = mul nsw i64 %600, %293
  %603 = mul nsw i64 %601, %293
  %604 = getelementptr double, ptr %.unpack5341, i64 %602
  %605 = getelementptr double, ptr %.unpack5341, i64 %603
  %606 = getelementptr double, ptr %604, i64 %543
  %607 = getelementptr double, ptr %605, i64 %543
  %608 = load double, ptr %606, align 8, !tbaa !29, !alias.scope !53
  %609 = load double, ptr %607, align 8, !tbaa !29, !alias.scope !53
  %610 = insertelement <2 x double> poison, double %608, i64 0
  %611 = insertelement <2 x double> %610, double %609, i64 1
  %612 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %611
  %613 = getelementptr double, ptr %604, i64 %544
  %614 = getelementptr double, ptr %605, i64 %544
  %615 = load double, ptr %613, align 8, !tbaa !29, !alias.scope !55
  %616 = load double, ptr %614, align 8, !tbaa !29, !alias.scope !55
  %617 = insertelement <2 x double> poison, double %615, i64 0
  %618 = insertelement <2 x double> %617, double %616, i64 1
  %619 = fmul contract <2 x double> %612, %618
  %620 = getelementptr double, ptr %604, i64 %545
  %621 = getelementptr double, ptr %605, i64 %545
  %622 = load double, ptr %620, align 8, !tbaa !29, !alias.scope !57
  %623 = load double, ptr %621, align 8, !tbaa !29, !alias.scope !57
  %624 = insertelement <2 x double> poison, double %622, i64 0
  %625 = insertelement <2 x double> %624, double %623, i64 1
  %626 = fmul contract <2 x double> %612, %625
  %627 = getelementptr double, ptr %604, i64 %546
  %628 = getelementptr double, ptr %605, i64 %546
  %629 = load double, ptr %627, align 8, !tbaa !29, !alias.scope !59
  %630 = load double, ptr %628, align 8, !tbaa !29, !alias.scope !59
  %631 = insertelement <2 x double> poison, double %629, i64 0
  %632 = insertelement <2 x double> %631, double %630, i64 1
  %633 = fmul contract <2 x double> %612, %632
  %634 = getelementptr double, ptr %604, i64 %547
  %635 = getelementptr double, ptr %605, i64 %547
  %636 = load double, ptr %634, align 8, !tbaa !29, !alias.scope !61
  %637 = load double, ptr %635, align 8, !tbaa !29, !alias.scope !61
  %638 = insertelement <2 x double> poison, double %636, i64 0
  %639 = insertelement <2 x double> %638, double %637, i64 1
  %640 = fmul contract <2 x double> %612, %639
  %641 = add i64 %offset.idx7680, %319
  %642 = add i64 %599, %319
  %643 = mul nsw i64 %641, %293
  %644 = mul nsw i64 %642, %293
  %645 = getelementptr double, ptr %.unpack5341, i64 %643
  %646 = getelementptr double, ptr %.unpack5341, i64 %644
  %647 = getelementptr double, ptr %645, i64 %543
  %648 = getelementptr double, ptr %646, i64 %543
  %649 = load double, ptr %647, align 8, !tbaa !29, !alias.scope !63
  %650 = load double, ptr %648, align 8, !tbaa !29, !alias.scope !63
  %651 = insertelement <2 x double> poison, double %649, i64 0
  %652 = insertelement <2 x double> %651, double %650, i64 1
  %653 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %652
  %654 = getelementptr double, ptr %645, i64 %544
  %655 = getelementptr double, ptr %646, i64 %544
  %656 = load double, ptr %654, align 8, !tbaa !29, !alias.scope !65
  %657 = load double, ptr %655, align 8, !tbaa !29, !alias.scope !65
  %658 = insertelement <2 x double> poison, double %656, i64 0
  %659 = insertelement <2 x double> %658, double %657, i64 1
  %660 = fmul contract <2 x double> %653, %659
  %661 = getelementptr double, ptr %645, i64 %545
  %662 = getelementptr double, ptr %646, i64 %545
  %663 = load double, ptr %661, align 8, !tbaa !29, !alias.scope !67
  %664 = load double, ptr %662, align 8, !tbaa !29, !alias.scope !67
  %665 = insertelement <2 x double> poison, double %663, i64 0
  %666 = insertelement <2 x double> %665, double %664, i64 1
  %667 = fmul contract <2 x double> %653, %666
  %668 = getelementptr double, ptr %645, i64 %546
  %669 = getelementptr double, ptr %646, i64 %546
  %670 = load double, ptr %668, align 8, !tbaa !29, !alias.scope !69
  %671 = load double, ptr %669, align 8, !tbaa !29, !alias.scope !69
  %672 = insertelement <2 x double> poison, double %670, i64 0
  %673 = insertelement <2 x double> %672, double %671, i64 1
  %674 = fmul contract <2 x double> %653, %673
  %675 = getelementptr double, ptr %645, i64 %547
  %676 = getelementptr double, ptr %646, i64 %547
  %677 = load double, ptr %675, align 8, !tbaa !29, !alias.scope !71
  %678 = load double, ptr %676, align 8, !tbaa !29, !alias.scope !71
  %679 = insertelement <2 x double> poison, double %677, i64 0
  %680 = insertelement <2 x double> %679, double %678, i64 1
  %681 = fmul contract <2 x double> %653, %680
  %682 = fsub contract <2 x double> %619, %660
  %683 = fmul contract <2 x double> %682, %broadcast.splat7682
  %684 = mul nuw nsw i64 %offset.idx7680, 5
  %685 = mul nuw nsw i64 %599, 5
  %686 = getelementptr double, ptr %0, i64 %684
  %687 = getelementptr double, ptr %0, i64 %685
  %688 = getelementptr i8, ptr %686, i64 -32
  %689 = getelementptr i8, ptr %687, i64 -32
  %690 = extractelement <2 x double> %683, i64 0
  store double %690, ptr %688, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %691 = extractelement <2 x double> %683, i64 1
  store double %691, ptr %689, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %692 = fsub contract <2 x double> %626, %667
  %693 = fmul contract <2 x double> %692, %broadcast.splat7684
  %694 = getelementptr i8, ptr %686, i64 -24
  %695 = getelementptr i8, ptr %687, i64 -24
  %696 = extractelement <2 x double> %693, i64 0
  store double %696, ptr %694, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %697 = extractelement <2 x double> %693, i64 1
  store double %697, ptr %695, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %698 = fsub contract <2 x double> %633, %674
  %699 = fmul contract <2 x double> %698, %594
  %700 = getelementptr i8, ptr %686, i64 -16
  %701 = getelementptr i8, ptr %687, i64 -16
  %702 = extractelement <2 x double> %699, i64 0
  store double %702, ptr %700, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %703 = extractelement <2 x double> %699, i64 1
  store double %703, ptr %701, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %704 = fmul <2 x double> %619, %619
  %705 = fmul <2 x double> %626, %626
  %706 = fadd contract <2 x double> %704, %705
  %707 = fmul <2 x double> %633, %633
  %708 = fadd contract <2 x double> %706, %707
  %709 = fmul <2 x double> %660, %660
  %710 = fmul <2 x double> %667, %667
  %711 = fadd contract <2 x double> %709, %710
  %712 = fmul <2 x double> %674, %674
  %713 = fadd contract <2 x double> %711, %712
  %714 = fsub contract <2 x double> %708, %713
  %715 = fmul contract <2 x double> %714, %596
  %716 = fsub contract <2 x double> %707, %712
  %717 = fmul contract <2 x double> %716, %597
  %718 = fsub contract <2 x double> %717, %715
  %719 = fsub contract <2 x double> %640, %681
  %720 = fmul contract <2 x double> %719, %598
  %721 = fadd contract <2 x double> %720, %718
  %722 = getelementptr i8, ptr %686, i64 -8
  %723 = getelementptr i8, ptr %687, i64 -8
  %724 = extractelement <2 x double> %721, i64 0
  store double %724, ptr %722, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %725 = extractelement <2 x double> %721, i64 1
  store double %725, ptr %723, align 8, !tbaa !42, !alias.scope !73, !noalias !75
  %index.next7689 = add nuw i64 %index7679, 2
  %726 = icmp eq i64 %index.next7689, %n.vec7674
  br i1 %726, label %middle.block7669, label %vector.body7678, !llvm.loop !76

middle.block7669:                                 ; preds = %vector.body7678
  %cmp.n7677 = icmp eq i64 %549, %n.vec7674
  br i1 %cmp.n7677, label %omp.wsloop.region214.loopexit, label %omp.wsloop.region213.preheader

omp.wsloop.region213.preheader:                   ; preds = %vector.memcheck7552, %omp.wsloop.region213.lr.ph, %middle.block7669
  %indvars.iv6990.ph = phi i64 [ 2, %vector.memcheck7552 ], [ 2, %omp.wsloop.region213.lr.ph ], [ %ind.end7675, %middle.block7669 ]
  br label %omp.wsloop.region213

omp.wsloop.region214.loopexit:                    ; preds = %omp.wsloop.region213, %middle.block7669
  %.pre7019 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !4
  %.pre7020 = add i32 %.pre7019, -1
  br label %omp.wsloop.region214

omp.wsloop.region214:                             ; preds = %omp.wsloop.region214.loopexit, %omp.wsloop.region211
  %.pre-phi = phi i32 [ %.pre7020, %omp.wsloop.region214.loopexit ], [ %470, %omp.wsloop.region211 ]
  %727 = phi i32 [ %.pre7019, %omp.wsloop.region214.loopexit ], [ %469, %omp.wsloop.region211 ]
  %728 = sext i32 %.pre-phi to i64
  %729 = icmp sgt i32 %.pre-phi, 1
  %730 = sext i32 %357 to i64
  %731 = sext i32 %356 to i64
  %732 = sub nsw i64 %730, %.unpack5324.unpack5325.unpack
  %733 = mul nsw i64 %732, %.unpack5324.unpack.unpack5329
  br i1 %729, label %omp.wsloop.region216.lr.ph, label %omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge

omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge: ; preds = %omp.wsloop.region214
  %.pre7039 = sub nsw i64 %731, %.unpack5324.unpack5326.unpack
  %.pre7041 = mul nsw i64 %.pre7039, %294
  %.pre7043 = sub nsw i64 %730, %.unpack5348.unpack5349.unpack
  %.pre7045 = mul nsw i64 %.pre7043, %.unpack5348.unpack.unpack5353
  %.pre7047 = sub nsw i64 %731, %.unpack5348.unpack5350.unpack
  %.pre7049 = mul nsw i64 %.pre7047, %292
  br label %omp.wsloop.region218.preheader

omp.wsloop.region216.lr.ph:                       ; preds = %omp.wsloop.region214
  %reass.sub = sub i64 %733, %.unpack5324.unpack.unpack
  %734 = sub nsw i64 %731, %.unpack5324.unpack5326.unpack
  %735 = mul nsw i64 %734, %294
  %invariant.gep6897 = getelementptr double, ptr %.unpack5317, i64 %735
  %invariant.gep6899 = getelementptr double, ptr %invariant.gep6897, i64 %reass.sub
  %736 = load double, ptr @_QMlu_dataEdz1, align 8, !tbaa !77
  %737 = load double, ptr @_QMlu_dataEtz1, align 8, !tbaa !79
  %738 = fmul contract double %736, %737
  %739 = sub nsw i64 %730, %.unpack5348.unpack5349.unpack
  %740 = mul nsw i64 %739, %.unpack5348.unpack.unpack5353
  %reass.sub5085 = sub i64 %740, %.unpack5348.unpack.unpack
  %741 = sub nsw i64 %731, %.unpack5348.unpack5350.unpack
  %742 = mul nsw i64 %741, %292
  %743 = add i64 %742, %reass.sub5085
  %744 = add i64 %743, 1
  %745 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48
  %746 = fmul contract double %745, 1.000000e-01
  %747 = load double, ptr @_QMlu_dataEdz2, align 8, !tbaa !81
  %748 = fmul contract double %737, %747
  %749 = add i64 %743, 2
  %750 = load double, ptr @_QMlu_dataEdz3, align 8, !tbaa !83
  %751 = fmul contract double %737, %750
  %752 = add i64 %743, 3
  %753 = load double, ptr @_QMlu_dataEdz4, align 8, !tbaa !85
  %754 = fmul contract double %737, %753
  %755 = add i64 %743, 4
  %756 = load double, ptr @_QMlu_dataEdz5, align 8, !tbaa !87
  %757 = fmul contract double %737, %756
  %758 = add i64 %743, 5
  br label %omp.wsloop.region216

omp.wsloop.region218.preheader:                   ; preds = %omp.wsloop.region216, %omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge
  %.pre-phi7050 = phi i64 [ %.pre7049, %omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge ], [ %742, %omp.wsloop.region216 ]
  %.pre-phi7046 = phi i64 [ %.pre7045, %omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge ], [ %740, %omp.wsloop.region216 ]
  %.pre-phi7042 = phi i64 [ %.pre7041, %omp.wsloop.region214.omp.wsloop.region218.preheader_crit_edge ], [ %735, %omp.wsloop.region216 ]
  %759 = getelementptr double, ptr %298, i64 %.pre-phi7042
  %760 = getelementptr double, ptr %759, i64 %733
  %761 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %762 = getelementptr double, ptr %310, i64 %.pre-phi7042
  %763 = getelementptr double, ptr %762, i64 %733
  %764 = getelementptr double, ptr %760, i64 %314
  %765 = load double, ptr %764, align 8, !tbaa !14
  %reass.sub7098 = sub i64 %.pre-phi7046, %.unpack5348.unpack.unpack
  %766 = add i64 %reass.sub7098, 1
  %767 = add nsw i64 %766, %.pre-phi7050
  %768 = getelementptr double, ptr %301, i64 %767
  %769 = load double, ptr %768, align 8, !tbaa !29
  %770 = fmul contract double %769, 5.000000e+00
  %771 = getelementptr double, ptr %304, i64 %767
  %772 = load double, ptr %771, align 8, !tbaa !29
  %773 = fmul contract double %772, 4.000000e+00
  %774 = fsub contract double %770, %773
  %775 = getelementptr double, ptr %307, i64 %767
  %776 = load double, ptr %775, align 8, !tbaa !29
  %777 = fadd contract double %776, %774
  %778 = fmul contract double %761, %777
  %779 = fsub contract double %765, %778
  store double %779, ptr %764, align 8, !tbaa !14
  %780 = getelementptr double, ptr %763, i64 %314
  %781 = load double, ptr %780, align 8, !tbaa !14
  %782 = fmul contract double %769, 4.000000e+00
  %783 = fmul contract double %772, 6.000000e+00
  %784 = fsub contract double %783, %782
  %785 = fmul contract double %776, 4.000000e+00
  %786 = fsub contract double %784, %785
  %787 = getelementptr double, ptr %313, i64 %767
  %788 = load double, ptr %787, align 8, !tbaa !29
  %789 = fadd contract double %786, %788
  %790 = fmul contract double %761, %789
  %791 = fsub contract double %781, %790
  store double %791, ptr %780, align 8, !tbaa !14
  %792 = getelementptr double, ptr %760, i64 %321
  %793 = load double, ptr %792, align 8, !tbaa !14
  %reass.sub7099 = sub i64 %.pre-phi7046, %.unpack5348.unpack.unpack
  %794 = add i64 %reass.sub7099, 2
  %795 = add nsw i64 %794, %.pre-phi7050
  %796 = getelementptr double, ptr %301, i64 %795
  %797 = load double, ptr %796, align 8, !tbaa !29
  %798 = fmul contract double %797, 5.000000e+00
  %799 = getelementptr double, ptr %304, i64 %795
  %800 = load double, ptr %799, align 8, !tbaa !29
  %801 = fmul contract double %800, 4.000000e+00
  %802 = fsub contract double %798, %801
  %803 = getelementptr double, ptr %307, i64 %795
  %804 = load double, ptr %803, align 8, !tbaa !29
  %805 = fadd contract double %804, %802
  %806 = fmul contract double %761, %805
  %807 = fsub contract double %793, %806
  store double %807, ptr %792, align 8, !tbaa !14
  %808 = getelementptr double, ptr %763, i64 %321
  %809 = load double, ptr %808, align 8, !tbaa !14
  %810 = fmul contract double %797, 4.000000e+00
  %811 = fmul contract double %800, 6.000000e+00
  %812 = fsub contract double %811, %810
  %813 = fmul contract double %804, 4.000000e+00
  %814 = fsub contract double %812, %813
  %815 = getelementptr double, ptr %313, i64 %795
  %816 = load double, ptr %815, align 8, !tbaa !29
  %817 = fadd contract double %814, %816
  %818 = fmul contract double %761, %817
  %819 = fsub contract double %809, %818
  store double %819, ptr %808, align 8, !tbaa !14
  %820 = getelementptr double, ptr %760, i64 %322
  %821 = load double, ptr %820, align 8, !tbaa !14
  %reass.sub7100 = sub i64 %.pre-phi7046, %.unpack5348.unpack.unpack
  %822 = add i64 %reass.sub7100, 3
  %823 = add nsw i64 %822, %.pre-phi7050
  %824 = getelementptr double, ptr %301, i64 %823
  %825 = load double, ptr %824, align 8, !tbaa !29
  %826 = fmul contract double %825, 5.000000e+00
  %827 = getelementptr double, ptr %304, i64 %823
  %828 = load double, ptr %827, align 8, !tbaa !29
  %829 = fmul contract double %828, 4.000000e+00
  %830 = fsub contract double %826, %829
  %831 = getelementptr double, ptr %307, i64 %823
  %832 = load double, ptr %831, align 8, !tbaa !29
  %833 = fadd contract double %832, %830
  %834 = fmul contract double %761, %833
  %835 = fsub contract double %821, %834
  store double %835, ptr %820, align 8, !tbaa !14
  %836 = getelementptr double, ptr %763, i64 %322
  %837 = load double, ptr %836, align 8, !tbaa !14
  %838 = fmul contract double %825, 4.000000e+00
  %839 = fmul contract double %828, 6.000000e+00
  %840 = fsub contract double %839, %838
  %841 = fmul contract double %832, 4.000000e+00
  %842 = fsub contract double %840, %841
  %843 = getelementptr double, ptr %313, i64 %823
  %844 = load double, ptr %843, align 8, !tbaa !29
  %845 = fadd contract double %842, %844
  %846 = fmul contract double %761, %845
  %847 = fsub contract double %837, %846
  store double %847, ptr %836, align 8, !tbaa !14
  %848 = getelementptr double, ptr %760, i64 %323
  %849 = load double, ptr %848, align 8, !tbaa !14
  %reass.sub7101 = sub i64 %.pre-phi7046, %.unpack5348.unpack.unpack
  %850 = add i64 %reass.sub7101, 4
  %851 = add nsw i64 %850, %.pre-phi7050
  %852 = getelementptr double, ptr %301, i64 %851
  %853 = load double, ptr %852, align 8, !tbaa !29
  %854 = fmul contract double %853, 5.000000e+00
  %855 = getelementptr double, ptr %304, i64 %851
  %856 = load double, ptr %855, align 8, !tbaa !29
  %857 = fmul contract double %856, 4.000000e+00
  %858 = fsub contract double %854, %857
  %859 = getelementptr double, ptr %307, i64 %851
  %860 = load double, ptr %859, align 8, !tbaa !29
  %861 = fadd contract double %860, %858
  %862 = fmul contract double %761, %861
  %863 = fsub contract double %849, %862
  store double %863, ptr %848, align 8, !tbaa !14
  %864 = getelementptr double, ptr %763, i64 %323
  %865 = load double, ptr %864, align 8, !tbaa !14
  %866 = fmul contract double %853, 4.000000e+00
  %867 = fmul contract double %856, 6.000000e+00
  %868 = fsub contract double %867, %866
  %869 = fmul contract double %860, 4.000000e+00
  %870 = fsub contract double %868, %869
  %871 = getelementptr double, ptr %313, i64 %851
  %872 = load double, ptr %871, align 8, !tbaa !29
  %873 = fadd contract double %870, %872
  %874 = fmul contract double %761, %873
  %875 = fsub contract double %865, %874
  store double %875, ptr %864, align 8, !tbaa !14
  %876 = getelementptr double, ptr %760, i64 %324
  %877 = load double, ptr %876, align 8, !tbaa !14
  %reass.sub7102 = sub i64 %.pre-phi7046, %.unpack5348.unpack.unpack
  %878 = add i64 %reass.sub7102, 5
  %879 = add nsw i64 %878, %.pre-phi7050
  %880 = getelementptr double, ptr %301, i64 %879
  %881 = load double, ptr %880, align 8, !tbaa !29
  %882 = fmul contract double %881, 5.000000e+00
  %883 = getelementptr double, ptr %304, i64 %879
  %884 = load double, ptr %883, align 8, !tbaa !29
  %885 = fmul contract double %884, 4.000000e+00
  %886 = fsub contract double %882, %885
  %887 = getelementptr double, ptr %307, i64 %879
  %888 = load double, ptr %887, align 8, !tbaa !29
  %889 = fadd contract double %888, %886
  %890 = fmul contract double %761, %889
  %891 = fsub contract double %877, %890
  store double %891, ptr %876, align 8, !tbaa !14
  %892 = getelementptr double, ptr %763, i64 %324
  %893 = load double, ptr %892, align 8, !tbaa !14
  %894 = fmul contract double %881, 4.000000e+00
  %895 = fmul contract double %884, 6.000000e+00
  %896 = fsub contract double %895, %894
  %897 = fmul contract double %888, 4.000000e+00
  %898 = fsub contract double %896, %897
  %899 = getelementptr double, ptr %313, i64 %879
  %900 = load double, ptr %899, align 8, !tbaa !29
  %901 = fadd contract double %898, %900
  %902 = fmul contract double %761, %901
  %903 = fsub contract double %893, %902
  store double %903, ptr %892, align 8, !tbaa !14
  %904 = add i32 %727, -3
  %905 = sext i32 %904 to i64
  %906 = icmp sgt i32 %904, 3
  br i1 %906, label %omp.wsloop.region223.preheader.lr.ph, label %omp.wsloop.region227.preheader

omp.wsloop.region223.preheader.lr.ph:             ; preds = %omp.wsloop.region218.preheader
  %invariant.gep6901 = getelementptr double, ptr %.unpack5317, i64 %.pre-phi7042
  %invariant.gep6903 = getelementptr double, ptr %invariant.gep6901, i64 %733
  %907 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  br label %omp.wsloop.region223.preheader

omp.wsloop.region227.preheader:                   ; preds = %omp.wsloop.region223.preheader, %omp.wsloop.region218.preheader
  %908 = add i32 %727, -2
  %909 = sext i32 %908 to i64
  %910 = sub nsw i64 %909, %.unpack5324.unpack5327.unpack
  %911 = mul nsw i64 %910, %295
  %912 = getelementptr double, ptr %.unpack5317, i64 %911
  %913 = getelementptr double, ptr %912, i64 %.pre-phi7042
  %914 = getelementptr double, ptr %913, i64 %733
  %915 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %916 = add i32 %727, -4
  %917 = sext i32 %916 to i64
  %918 = sub nsw i64 %917, %.unpack4828.unpack4831.unpack
  %919 = mul nsw i64 %918, %326
  %920 = getelementptr double, ptr %.unpack5341, i64 %919
  %921 = sub nsw i64 %905, %.unpack4828.unpack4831.unpack
  %922 = mul nsw i64 %921, %326
  %923 = getelementptr double, ptr %.unpack5341, i64 %922
  %924 = sub nsw i64 %909, %.unpack4828.unpack4831.unpack
  %925 = mul nsw i64 %924, %326
  %926 = getelementptr double, ptr %.unpack5341, i64 %925
  %927 = sub nsw i64 %728, %.unpack4828.unpack4831.unpack
  %928 = mul nsw i64 %927, %326
  %929 = getelementptr double, ptr %.unpack5341, i64 %928
  %930 = sub nsw i64 %728, %.unpack5324.unpack5327.unpack
  %931 = mul nsw i64 %930, %295
  %932 = getelementptr double, ptr %.unpack5317, i64 %931
  %933 = getelementptr double, ptr %932, i64 %.pre-phi7042
  %934 = getelementptr double, ptr %933, i64 %733
  %935 = getelementptr double, ptr %914, i64 %314
  %936 = load double, ptr %935, align 8, !tbaa !14
  %937 = getelementptr double, ptr %920, i64 %767
  %938 = load double, ptr %937, align 8, !tbaa !29
  %939 = getelementptr double, ptr %923, i64 %767
  %940 = load double, ptr %939, align 8, !tbaa !29
  %941 = fmul contract double %940, 4.000000e+00
  %942 = fsub contract double %938, %941
  %943 = getelementptr double, ptr %926, i64 %767
  %944 = load double, ptr %943, align 8, !tbaa !29
  %945 = fmul contract double %944, 6.000000e+00
  %946 = fadd contract double %942, %945
  %947 = getelementptr double, ptr %929, i64 %767
  %948 = load double, ptr %947, align 8, !tbaa !29
  %949 = fmul contract double %948, 4.000000e+00
  %950 = fsub contract double %946, %949
  %951 = fmul contract double %915, %950
  %952 = fsub contract double %936, %951
  store double %952, ptr %935, align 8, !tbaa !14
  %953 = getelementptr double, ptr %934, i64 %314
  %954 = load double, ptr %953, align 8, !tbaa !14
  %955 = fmul contract double %944, 4.000000e+00
  %956 = fsub contract double %940, %955
  %957 = fmul contract double %948, 5.000000e+00
  %958 = fadd contract double %956, %957
  %959 = fmul contract double %915, %958
  %960 = fsub contract double %954, %959
  store double %960, ptr %953, align 8, !tbaa !14
  %961 = getelementptr double, ptr %914, i64 %321
  %962 = load double, ptr %961, align 8, !tbaa !14
  %963 = getelementptr double, ptr %920, i64 %795
  %964 = load double, ptr %963, align 8, !tbaa !29
  %965 = getelementptr double, ptr %923, i64 %795
  %966 = load double, ptr %965, align 8, !tbaa !29
  %967 = fmul contract double %966, 4.000000e+00
  %968 = fsub contract double %964, %967
  %969 = getelementptr double, ptr %926, i64 %795
  %970 = load double, ptr %969, align 8, !tbaa !29
  %971 = fmul contract double %970, 6.000000e+00
  %972 = fadd contract double %968, %971
  %973 = getelementptr double, ptr %929, i64 %795
  %974 = load double, ptr %973, align 8, !tbaa !29
  %975 = fmul contract double %974, 4.000000e+00
  %976 = fsub contract double %972, %975
  %977 = fmul contract double %915, %976
  %978 = fsub contract double %962, %977
  store double %978, ptr %961, align 8, !tbaa !14
  %979 = getelementptr double, ptr %934, i64 %321
  %980 = load double, ptr %979, align 8, !tbaa !14
  %981 = fmul contract double %970, 4.000000e+00
  %982 = fsub contract double %966, %981
  %983 = fmul contract double %974, 5.000000e+00
  %984 = fadd contract double %982, %983
  %985 = fmul contract double %915, %984
  %986 = fsub contract double %980, %985
  store double %986, ptr %979, align 8, !tbaa !14
  %987 = getelementptr double, ptr %914, i64 %322
  %988 = load double, ptr %987, align 8, !tbaa !14
  %989 = getelementptr double, ptr %920, i64 %823
  %990 = load double, ptr %989, align 8, !tbaa !29
  %991 = getelementptr double, ptr %923, i64 %823
  %992 = load double, ptr %991, align 8, !tbaa !29
  %993 = fmul contract double %992, 4.000000e+00
  %994 = fsub contract double %990, %993
  %995 = getelementptr double, ptr %926, i64 %823
  %996 = load double, ptr %995, align 8, !tbaa !29
  %997 = fmul contract double %996, 6.000000e+00
  %998 = fadd contract double %994, %997
  %999 = getelementptr double, ptr %929, i64 %823
  %1000 = load double, ptr %999, align 8, !tbaa !29
  %1001 = fmul contract double %1000, 4.000000e+00
  %1002 = fsub contract double %998, %1001
  %1003 = fmul contract double %915, %1002
  %1004 = fsub contract double %988, %1003
  store double %1004, ptr %987, align 8, !tbaa !14
  %1005 = getelementptr double, ptr %934, i64 %322
  %1006 = load double, ptr %1005, align 8, !tbaa !14
  %1007 = fmul contract double %996, 4.000000e+00
  %1008 = fsub contract double %992, %1007
  %1009 = fmul contract double %1000, 5.000000e+00
  %1010 = fadd contract double %1008, %1009
  %1011 = fmul contract double %915, %1010
  %1012 = fsub contract double %1006, %1011
  store double %1012, ptr %1005, align 8, !tbaa !14
  %1013 = getelementptr double, ptr %914, i64 %323
  %1014 = load double, ptr %1013, align 8, !tbaa !14
  %1015 = getelementptr double, ptr %920, i64 %851
  %1016 = load double, ptr %1015, align 8, !tbaa !29
  %1017 = getelementptr double, ptr %923, i64 %851
  %1018 = load double, ptr %1017, align 8, !tbaa !29
  %1019 = fmul contract double %1018, 4.000000e+00
  %1020 = fsub contract double %1016, %1019
  %1021 = getelementptr double, ptr %926, i64 %851
  %1022 = load double, ptr %1021, align 8, !tbaa !29
  %1023 = fmul contract double %1022, 6.000000e+00
  %1024 = fadd contract double %1020, %1023
  %1025 = getelementptr double, ptr %929, i64 %851
  %1026 = load double, ptr %1025, align 8, !tbaa !29
  %1027 = fmul contract double %1026, 4.000000e+00
  %1028 = fsub contract double %1024, %1027
  %1029 = fmul contract double %915, %1028
  %1030 = fsub contract double %1014, %1029
  store double %1030, ptr %1013, align 8, !tbaa !14
  %1031 = getelementptr double, ptr %934, i64 %323
  %1032 = load double, ptr %1031, align 8, !tbaa !14
  %1033 = fmul contract double %1022, 4.000000e+00
  %1034 = fsub contract double %1018, %1033
  %1035 = fmul contract double %1026, 5.000000e+00
  %1036 = fadd contract double %1034, %1035
  %1037 = fmul contract double %915, %1036
  %1038 = fsub contract double %1032, %1037
  store double %1038, ptr %1031, align 8, !tbaa !14
  %1039 = getelementptr double, ptr %914, i64 %324
  %1040 = load double, ptr %1039, align 8, !tbaa !14
  %1041 = getelementptr double, ptr %920, i64 %879
  %1042 = load double, ptr %1041, align 8, !tbaa !29
  %1043 = getelementptr double, ptr %923, i64 %879
  %1044 = load double, ptr %1043, align 8, !tbaa !29
  %1045 = fmul contract double %1044, 4.000000e+00
  %1046 = fsub contract double %1042, %1045
  %1047 = getelementptr double, ptr %926, i64 %879
  %1048 = load double, ptr %1047, align 8, !tbaa !29
  %1049 = fmul contract double %1048, 6.000000e+00
  %1050 = fadd contract double %1046, %1049
  %1051 = getelementptr double, ptr %929, i64 %879
  %1052 = load double, ptr %1051, align 8, !tbaa !29
  %1053 = fmul contract double %1052, 4.000000e+00
  %1054 = fsub contract double %1050, %1053
  %1055 = fmul contract double %915, %1054
  %1056 = fsub contract double %1040, %1055
  store double %1056, ptr %1039, align 8, !tbaa !14
  %1057 = getelementptr double, ptr %934, i64 %324
  %1058 = load double, ptr %1057, align 8, !tbaa !14
  %1059 = fmul contract double %1048, 4.000000e+00
  %1060 = fsub contract double %1044, %1059
  %1061 = fmul contract double %1052, 5.000000e+00
  %1062 = fadd contract double %1060, %1061
  %1063 = fmul contract double %915, %1062
  %1064 = fsub contract double %1058, %1063
  store double %1064, ptr %1057, align 8, !tbaa !14
  %omp_collapsed.next239 = add nuw i32 %omp_collapsed.iv2376906, 1
  %exitcond7014.not = icmp eq i32 %omp_collapsed.iv2376906, %reass.sub6918
  br i1 %exitcond7014.not, label %omp_collapsed.exit235, label %omp_collapsed.body233

omp.wsloop.region223.preheader:                   ; preds = %omp.wsloop.region223.preheader.lr.ph, %omp.wsloop.region223.preheader
  %indvars.iv7006 = phi i64 [ 4, %omp.wsloop.region223.preheader.lr.ph ], [ %indvars.iv.next7007, %omp.wsloop.region223.preheader ]
  %1065 = sub nsw i64 %indvars.iv7006, %.unpack5324.unpack5327.unpack
  %1066 = mul nsw i64 %295, %1065
  %gep6904 = getelementptr double, ptr %invariant.gep6903, i64 %1066
  %1067 = add nsw i64 %indvars.iv7006, -2
  %1068 = sub nsw i64 %1067, %.unpack5348.unpack5351.unpack
  %1069 = mul nsw i64 %1068, %293
  %1070 = getelementptr double, ptr %.unpack5341, i64 %1069
  %1071 = add i64 %indvars.iv7006, %325
  %1072 = mul nsw i64 %1071, %293
  %1073 = getelementptr double, ptr %.unpack5341, i64 %1072
  %1074 = sub nsw i64 %indvars.iv7006, %.unpack5348.unpack5351.unpack
  %1075 = mul nsw i64 %1074, %293
  %1076 = getelementptr double, ptr %.unpack5341, i64 %1075
  %indvars.iv.next7007 = add nuw nsw i64 %indvars.iv7006, 1
  %sext7103 = shl i64 %indvars.iv.next7007, 32
  %1077 = ashr exact i64 %sext7103, 32
  %1078 = sub nsw i64 %1077, %.unpack5348.unpack5351.unpack
  %1079 = mul nsw i64 %1078, %293
  %1080 = getelementptr double, ptr %.unpack5341, i64 %1079
  %1081 = shl i64 %indvars.iv7006, 32
  %sext7104 = add i64 %1081, 8589934592
  %1082 = ashr exact i64 %sext7104, 32
  %1083 = sub nsw i64 %1082, %.unpack5348.unpack5351.unpack
  %1084 = mul nsw i64 %1083, %293
  %1085 = getelementptr double, ptr %.unpack5341, i64 %1084
  %1086 = getelementptr double, ptr %gep6904, i64 %314
  %1087 = load double, ptr %1086, align 8, !tbaa !14
  %1088 = getelementptr double, ptr %1070, i64 %767
  %1089 = load double, ptr %1088, align 8, !tbaa !29
  %1090 = getelementptr double, ptr %1073, i64 %767
  %1091 = load double, ptr %1090, align 8, !tbaa !29
  %1092 = fmul contract double %1091, 4.000000e+00
  %1093 = fsub contract double %1089, %1092
  %1094 = getelementptr double, ptr %1076, i64 %767
  %1095 = load double, ptr %1094, align 8, !tbaa !29
  %1096 = fmul contract double %1095, 6.000000e+00
  %1097 = fadd contract double %1093, %1096
  %1098 = getelementptr double, ptr %1080, i64 %767
  %1099 = load double, ptr %1098, align 8, !tbaa !29
  %1100 = fmul contract double %1099, 4.000000e+00
  %1101 = fsub contract double %1097, %1100
  %1102 = getelementptr double, ptr %1085, i64 %767
  %1103 = load double, ptr %1102, align 8, !tbaa !29
  %1104 = fadd contract double %1103, %1101
  %1105 = fmul contract double %907, %1104
  %1106 = fsub contract double %1087, %1105
  store double %1106, ptr %1086, align 8, !tbaa !14
  %1107 = getelementptr double, ptr %gep6904, i64 %321
  %1108 = load double, ptr %1107, align 8, !tbaa !14
  %1109 = getelementptr double, ptr %1070, i64 %795
  %1110 = load double, ptr %1109, align 8, !tbaa !29
  %1111 = getelementptr double, ptr %1073, i64 %795
  %1112 = load double, ptr %1111, align 8, !tbaa !29
  %1113 = fmul contract double %1112, 4.000000e+00
  %1114 = fsub contract double %1110, %1113
  %1115 = getelementptr double, ptr %1076, i64 %795
  %1116 = load double, ptr %1115, align 8, !tbaa !29
  %1117 = fmul contract double %1116, 6.000000e+00
  %1118 = fadd contract double %1114, %1117
  %1119 = getelementptr double, ptr %1080, i64 %795
  %1120 = load double, ptr %1119, align 8, !tbaa !29
  %1121 = fmul contract double %1120, 4.000000e+00
  %1122 = fsub contract double %1118, %1121
  %1123 = getelementptr double, ptr %1085, i64 %795
  %1124 = load double, ptr %1123, align 8, !tbaa !29
  %1125 = fadd contract double %1124, %1122
  %1126 = fmul contract double %907, %1125
  %1127 = fsub contract double %1108, %1126
  store double %1127, ptr %1107, align 8, !tbaa !14
  %1128 = getelementptr double, ptr %gep6904, i64 %322
  %1129 = load double, ptr %1128, align 8, !tbaa !14
  %1130 = getelementptr double, ptr %1070, i64 %823
  %1131 = load double, ptr %1130, align 8, !tbaa !29
  %1132 = getelementptr double, ptr %1073, i64 %823
  %1133 = load double, ptr %1132, align 8, !tbaa !29
  %1134 = fmul contract double %1133, 4.000000e+00
  %1135 = fsub contract double %1131, %1134
  %1136 = getelementptr double, ptr %1076, i64 %823
  %1137 = load double, ptr %1136, align 8, !tbaa !29
  %1138 = fmul contract double %1137, 6.000000e+00
  %1139 = fadd contract double %1135, %1138
  %1140 = getelementptr double, ptr %1080, i64 %823
  %1141 = load double, ptr %1140, align 8, !tbaa !29
  %1142 = fmul contract double %1141, 4.000000e+00
  %1143 = fsub contract double %1139, %1142
  %1144 = getelementptr double, ptr %1085, i64 %823
  %1145 = load double, ptr %1144, align 8, !tbaa !29
  %1146 = fadd contract double %1145, %1143
  %1147 = fmul contract double %907, %1146
  %1148 = fsub contract double %1129, %1147
  store double %1148, ptr %1128, align 8, !tbaa !14
  %1149 = getelementptr double, ptr %gep6904, i64 %323
  %1150 = load double, ptr %1149, align 8, !tbaa !14
  %1151 = getelementptr double, ptr %1070, i64 %851
  %1152 = load double, ptr %1151, align 8, !tbaa !29
  %1153 = getelementptr double, ptr %1073, i64 %851
  %1154 = load double, ptr %1153, align 8, !tbaa !29
  %1155 = fmul contract double %1154, 4.000000e+00
  %1156 = fsub contract double %1152, %1155
  %1157 = getelementptr double, ptr %1076, i64 %851
  %1158 = load double, ptr %1157, align 8, !tbaa !29
  %1159 = fmul contract double %1158, 6.000000e+00
  %1160 = fadd contract double %1156, %1159
  %1161 = getelementptr double, ptr %1080, i64 %851
  %1162 = load double, ptr %1161, align 8, !tbaa !29
  %1163 = fmul contract double %1162, 4.000000e+00
  %1164 = fsub contract double %1160, %1163
  %1165 = getelementptr double, ptr %1085, i64 %851
  %1166 = load double, ptr %1165, align 8, !tbaa !29
  %1167 = fadd contract double %1166, %1164
  %1168 = fmul contract double %907, %1167
  %1169 = fsub contract double %1150, %1168
  store double %1169, ptr %1149, align 8, !tbaa !14
  %1170 = getelementptr double, ptr %gep6904, i64 %324
  %1171 = load double, ptr %1170, align 8, !tbaa !14
  %1172 = getelementptr double, ptr %1070, i64 %879
  %1173 = load double, ptr %1172, align 8, !tbaa !29
  %1174 = getelementptr double, ptr %1073, i64 %879
  %1175 = load double, ptr %1174, align 8, !tbaa !29
  %1176 = fmul contract double %1175, 4.000000e+00
  %1177 = fsub contract double %1173, %1176
  %1178 = getelementptr double, ptr %1076, i64 %879
  %1179 = load double, ptr %1178, align 8, !tbaa !29
  %1180 = fmul contract double %1179, 6.000000e+00
  %1181 = fadd contract double %1177, %1180
  %1182 = getelementptr double, ptr %1080, i64 %879
  %1183 = load double, ptr %1182, align 8, !tbaa !29
  %1184 = fmul contract double %1183, 4.000000e+00
  %1185 = fsub contract double %1181, %1184
  %1186 = getelementptr double, ptr %1085, i64 %879
  %1187 = load double, ptr %1186, align 8, !tbaa !29
  %1188 = fadd contract double %1187, %1185
  %1189 = fmul contract double %907, %1188
  %1190 = fsub contract double %1171, %1189
  store double %1190, ptr %1170, align 8, !tbaa !14
  %exitcond7009.not = icmp eq i64 %indvars.iv7006, %905
  br i1 %exitcond7009.not, label %omp.wsloop.region227.preheader, label %omp.wsloop.region223.preheader

omp.wsloop.region216:                             ; preds = %omp.wsloop.region216.lr.ph, %omp.wsloop.region216
  %indvars.iv6994 = phi i64 [ 2, %omp.wsloop.region216.lr.ph ], [ %indvars.iv.next6995, %omp.wsloop.region216 ]
  %1191 = sub nsw i64 %indvars.iv6994, %.unpack5324.unpack5327.unpack
  %1192 = mul nsw i64 %295, %1191
  %gep6900 = getelementptr double, ptr %invariant.gep6899, i64 %1192
  %1193 = getelementptr i8, ptr %gep6900, i64 8
  %1194 = load double, ptr %1193, align 8, !tbaa !14
  %indvars.iv.next6995 = add nuw nsw i64 %indvars.iv6994, 1
  %sext7097 = shl i64 %indvars.iv.next6995, 32
  %1195 = ashr exact i64 %sext7097, 32
  %1196 = sub nsw i64 %1195, %.unpack5348.unpack5351.unpack
  %1197 = mul nsw i64 %1196, %293
  %1198 = getelementptr double, ptr %.unpack5341, i64 %1197
  %1199 = getelementptr double, ptr %1198, i64 %744
  %1200 = load double, ptr %1199, align 8, !tbaa !29
  %1201 = sub nsw i64 %indvars.iv6994, %.unpack5348.unpack5351.unpack
  %1202 = mul nsw i64 %1201, %293
  %1203 = getelementptr double, ptr %.unpack5341, i64 %1202
  %1204 = getelementptr double, ptr %1203, i64 %744
  %1205 = load double, ptr %1204, align 8, !tbaa !29
  %1206 = fmul contract double %1205, 2.000000e+00
  %1207 = fsub contract double %1200, %1206
  %1208 = add i64 %indvars.iv6994, %320
  %1209 = mul nsw i64 %1208, %293
  %1210 = getelementptr double, ptr %.unpack5341, i64 %1209
  %1211 = getelementptr double, ptr %1210, i64 %744
  %1212 = load double, ptr %1211, align 8, !tbaa !29
  %1213 = fadd contract double %1212, %1207
  %1214 = fmul contract double %738, %1213
  %1215 = fadd contract double %1194, %1214
  store double %1215, ptr %1193, align 8, !tbaa !14
  %1216 = getelementptr i8, ptr %gep6900, i64 16
  %1217 = load double, ptr %1216, align 8, !tbaa !14
  %1218 = mul nsw i64 %1195, 5
  %1219 = getelementptr double, ptr %0, i64 %1218
  %1220 = getelementptr i8, ptr %1219, i64 -32
  %1221 = load double, ptr %1220, align 8, !tbaa !42
  %1222 = mul nuw nsw i64 %indvars.iv6994, 5
  %1223 = getelementptr double, ptr %0, i64 %1222
  %1224 = getelementptr i8, ptr %1223, i64 -32
  %1225 = load double, ptr %1224, align 8, !tbaa !42
  %1226 = fsub contract double %1221, %1225
  %1227 = fmul contract double %746, %1226
  %1228 = fadd contract double %1217, %1227
  %1229 = getelementptr double, ptr %1198, i64 %749
  %1230 = load double, ptr %1229, align 8, !tbaa !29
  %1231 = getelementptr double, ptr %1203, i64 %749
  %1232 = load double, ptr %1231, align 8, !tbaa !29
  %1233 = fmul contract double %1232, 2.000000e+00
  %1234 = fsub contract double %1230, %1233
  %1235 = getelementptr double, ptr %1210, i64 %749
  %1236 = load double, ptr %1235, align 8, !tbaa !29
  %1237 = fadd contract double %1236, %1234
  %1238 = fmul contract double %748, %1237
  %1239 = fadd contract double %1228, %1238
  store double %1239, ptr %1216, align 8, !tbaa !14
  %1240 = getelementptr i8, ptr %gep6900, i64 24
  %1241 = load double, ptr %1240, align 8, !tbaa !14
  %1242 = getelementptr i8, ptr %1219, i64 -24
  %1243 = load double, ptr %1242, align 8, !tbaa !42
  %1244 = getelementptr i8, ptr %1223, i64 -24
  %1245 = load double, ptr %1244, align 8, !tbaa !42
  %1246 = fsub contract double %1243, %1245
  %1247 = fmul contract double %746, %1246
  %1248 = fadd contract double %1241, %1247
  %1249 = getelementptr double, ptr %1198, i64 %752
  %1250 = load double, ptr %1249, align 8, !tbaa !29
  %1251 = getelementptr double, ptr %1203, i64 %752
  %1252 = load double, ptr %1251, align 8, !tbaa !29
  %1253 = fmul contract double %1252, 2.000000e+00
  %1254 = fsub contract double %1250, %1253
  %1255 = getelementptr double, ptr %1210, i64 %752
  %1256 = load double, ptr %1255, align 8, !tbaa !29
  %1257 = fadd contract double %1256, %1254
  %1258 = fmul contract double %751, %1257
  %1259 = fadd contract double %1248, %1258
  store double %1259, ptr %1240, align 8, !tbaa !14
  %1260 = getelementptr i8, ptr %gep6900, i64 32
  %1261 = load double, ptr %1260, align 8, !tbaa !14
  %1262 = getelementptr i8, ptr %1219, i64 -16
  %1263 = load double, ptr %1262, align 8, !tbaa !42
  %1264 = getelementptr i8, ptr %1223, i64 -16
  %1265 = load double, ptr %1264, align 8, !tbaa !42
  %1266 = fsub contract double %1263, %1265
  %1267 = fmul contract double %746, %1266
  %1268 = fadd contract double %1261, %1267
  %1269 = getelementptr double, ptr %1198, i64 %755
  %1270 = load double, ptr %1269, align 8, !tbaa !29
  %1271 = getelementptr double, ptr %1203, i64 %755
  %1272 = load double, ptr %1271, align 8, !tbaa !29
  %1273 = fmul contract double %1272, 2.000000e+00
  %1274 = fsub contract double %1270, %1273
  %1275 = getelementptr double, ptr %1210, i64 %755
  %1276 = load double, ptr %1275, align 8, !tbaa !29
  %1277 = fadd contract double %1276, %1274
  %1278 = fmul contract double %754, %1277
  %1279 = fadd contract double %1268, %1278
  store double %1279, ptr %1260, align 8, !tbaa !14
  %1280 = getelementptr i8, ptr %gep6900, i64 40
  %1281 = load double, ptr %1280, align 8, !tbaa !14
  %1282 = getelementptr i8, ptr %1219, i64 -8
  %1283 = load double, ptr %1282, align 8, !tbaa !42
  %1284 = getelementptr i8, ptr %1223, i64 -8
  %1285 = load double, ptr %1284, align 8, !tbaa !42
  %1286 = fsub contract double %1283, %1285
  %1287 = fmul contract double %746, %1286
  %1288 = fadd contract double %1281, %1287
  %1289 = getelementptr double, ptr %1198, i64 %758
  %1290 = load double, ptr %1289, align 8, !tbaa !29
  %1291 = getelementptr double, ptr %1203, i64 %758
  %1292 = load double, ptr %1291, align 8, !tbaa !29
  %1293 = fmul contract double %1292, 2.000000e+00
  %1294 = fsub contract double %1290, %1293
  %1295 = getelementptr double, ptr %1210, i64 %758
  %1296 = load double, ptr %1295, align 8, !tbaa !29
  %1297 = fadd contract double %1296, %1294
  %1298 = fmul contract double %757, %1297
  %1299 = fadd contract double %1288, %1298
  store double %1299, ptr %1280, align 8, !tbaa !14
  %exitcond6997.not = icmp eq i64 %indvars.iv6994, %728
  br i1 %exitcond6997.not, label %omp.wsloop.region218.preheader, label %omp.wsloop.region216

omp.wsloop.region213:                             ; preds = %omp.wsloop.region213.preheader, %omp.wsloop.region213
  %indvars.iv6990 = phi i64 [ %indvars.iv.next6991, %omp.wsloop.region213 ], [ %indvars.iv6990.ph, %omp.wsloop.region213.preheader ]
  %1300 = sub nsw i64 %indvars.iv6990, %.unpack5348.unpack5351.unpack
  %1301 = mul nsw i64 %1300, %293
  %1302 = getelementptr double, ptr %.unpack5341, i64 %1301
  %1303 = getelementptr double, ptr %1302, i64 %543
  %1304 = load double, ptr %1303, align 8, !tbaa !29
  %1305 = fdiv contract double 1.000000e+00, %1304
  %1306 = getelementptr double, ptr %1302, i64 %544
  %1307 = load double, ptr %1306, align 8, !tbaa !29
  %1308 = fmul contract double %1305, %1307
  %1309 = getelementptr double, ptr %1302, i64 %545
  %1310 = load double, ptr %1309, align 8, !tbaa !29
  %1311 = fmul contract double %1305, %1310
  %1312 = getelementptr double, ptr %1302, i64 %546
  %1313 = load double, ptr %1312, align 8, !tbaa !29
  %1314 = fmul contract double %1305, %1313
  %1315 = getelementptr double, ptr %1302, i64 %547
  %1316 = load double, ptr %1315, align 8, !tbaa !29
  %1317 = fmul contract double %1305, %1316
  %1318 = add i64 %indvars.iv6990, %319
  %1319 = mul nsw i64 %1318, %293
  %1320 = getelementptr double, ptr %.unpack5341, i64 %1319
  %1321 = getelementptr double, ptr %1320, i64 %543
  %1322 = load double, ptr %1321, align 8, !tbaa !29
  %1323 = fdiv contract double 1.000000e+00, %1322
  %1324 = getelementptr double, ptr %1320, i64 %544
  %1325 = load double, ptr %1324, align 8, !tbaa !29
  %1326 = fmul contract double %1323, %1325
  %1327 = getelementptr double, ptr %1320, i64 %545
  %1328 = load double, ptr %1327, align 8, !tbaa !29
  %1329 = fmul contract double %1323, %1328
  %1330 = getelementptr double, ptr %1320, i64 %546
  %1331 = load double, ptr %1330, align 8, !tbaa !29
  %1332 = fmul contract double %1323, %1331
  %1333 = getelementptr double, ptr %1320, i64 %547
  %1334 = load double, ptr %1333, align 8, !tbaa !29
  %1335 = fmul contract double %1323, %1334
  %1336 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48
  %1337 = fsub contract double %1308, %1326
  %1338 = fmul contract double %1337, %1336
  %1339 = mul nuw nsw i64 %indvars.iv6990, 5
  %1340 = getelementptr double, ptr %0, i64 %1339
  %1341 = getelementptr i8, ptr %1340, i64 -32
  store double %1338, ptr %1341, align 8, !tbaa !42
  %1342 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48
  %1343 = fsub contract double %1311, %1329
  %1344 = fmul contract double %1343, %1342
  %1345 = getelementptr i8, ptr %1340, i64 -24
  store double %1344, ptr %1345, align 8, !tbaa !42
  %1346 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48
  %1347 = fmul contract double %1346, 0x3FF5555555555555
  %1348 = fsub contract double %1314, %1332
  %1349 = fmul contract double %1348, %1347
  %1350 = getelementptr i8, ptr %1340, i64 -16
  store double %1349, ptr %1350, align 8, !tbaa !42
  %1351 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !48
  %1352 = fmul contract double %1351, 0x3FDEB851EB851EB6
  %1353 = fmul double %1308, %1308
  %1354 = fmul double %1311, %1311
  %1355 = fadd contract double %1353, %1354
  %1356 = fmul double %1314, %1314
  %1357 = fadd contract double %1355, %1356
  %1358 = fmul double %1326, %1326
  %1359 = fmul double %1329, %1329
  %1360 = fadd contract double %1358, %1359
  %1361 = fmul double %1332, %1332
  %1362 = fadd contract double %1360, %1361
  %1363 = fsub contract double %1357, %1362
  %1364 = fmul contract double %1363, %1352
  %1365 = fmul contract double %1351, 0x3FC5555555555555
  %1366 = fsub contract double %1356, %1361
  %1367 = fmul contract double %1366, %1365
  %1368 = fsub contract double %1367, %1364
  %1369 = fmul contract double %1351, 0x3FFF5C28F5C28F5B
  %1370 = fsub contract double %1317, %1335
  %1371 = fmul contract double %1370, %1369
  %1372 = fadd contract double %1371, %1368
  %1373 = getelementptr i8, ptr %1340, i64 -8
  store double %1372, ptr %1373, align 8, !tbaa !42
  %indvars.iv.next6991 = add nuw nsw i64 %indvars.iv6990, 1
  %exitcond6993.not = icmp eq i64 %indvars.iv.next6991, %548
  br i1 %exitcond6993.not, label %omp.wsloop.region214.loopexit, label %omp.wsloop.region213, !llvm.loop !91

omp.wsloop.region204:                             ; preds = %omp.wsloop.region204.preheader, %omp.wsloop.region204
  %indvars.iv6982 = phi i64 [ %indvars.iv.next6983, %omp.wsloop.region204 ], [ %indvars.iv6982.ph, %omp.wsloop.region204.preheader ]
  %1374 = sub nsw i64 %indvars.iv6982, %.unpack5348.unpack5351.unpack
  %1375 = mul nsw i64 %293, %1374
  %gep6886 = getelementptr double, ptr %invariant.gep6885, i64 %1375
  %1376 = getelementptr i8, ptr %gep6886, i64 32
  %1377 = load double, ptr %1376, align 8, !tbaa !29
  %1378 = mul nuw nsw i64 %indvars.iv6982, 5
  %1379 = getelementptr double, ptr %0, i64 %1378
  %1380 = getelementptr i8, ptr %1379, i64 -40
  store double %1377, ptr %1380, align 8, !tbaa !42
  %1381 = getelementptr i8, ptr %gep6886, i64 8
  %1382 = load double, ptr %1381, align 8, !tbaa !29
  %1383 = fdiv contract double %1377, %1382
  %1384 = getelementptr i8, ptr %gep6886, i64 16
  %1385 = load double, ptr %1384, align 8, !tbaa !29
  %1386 = fmul contract double %1385, %1385
  %1387 = getelementptr i8, ptr %gep6886, i64 24
  %1388 = load double, ptr %1387, align 8, !tbaa !29
  %1389 = fmul contract double %1388, %1388
  %1390 = fadd contract double %1386, %1389
  %1391 = fmul contract double %1377, %1377
  %1392 = fadd contract double %1391, %1390
  %1393 = fmul contract double %1392, 5.000000e-01
  %1394 = fdiv contract double %1393, %1382
  %1395 = fmul contract double %1385, %1383
  %1396 = getelementptr i8, ptr %1379, i64 -32
  store double %1395, ptr %1396, align 8, !tbaa !42
  %1397 = load double, ptr %1387, align 8, !tbaa !29
  %1398 = fmul contract double %1383, %1397
  %1399 = getelementptr i8, ptr %1379, i64 -24
  store double %1398, ptr %1399, align 8, !tbaa !42
  %1400 = load double, ptr %1376, align 8, !tbaa !29
  %1401 = fmul contract double %1383, %1400
  %1402 = getelementptr i8, ptr %gep6886, i64 40
  %1403 = load double, ptr %1402, align 8, !tbaa !29
  %1404 = fsub contract double %1403, %1394
  %1405 = fmul contract double %1404, 4.000000e-01
  %1406 = fadd contract double %1401, %1405
  %1407 = getelementptr i8, ptr %1379, i64 -16
  store double %1406, ptr %1407, align 8, !tbaa !42
  %1408 = load double, ptr %1402, align 8, !tbaa !29
  %1409 = fmul contract double %1408, 1.400000e+00
  %1410 = fmul contract double %1394, 4.000000e-01
  %1411 = fsub contract double %1409, %1410
  %1412 = fmul contract double %1383, %1411
  %1413 = getelementptr i8, ptr %1379, i64 -8
  store double %1412, ptr %1413, align 8, !tbaa !42
  %indvars.iv.next6983 = add nuw nsw i64 %indvars.iv6982, 1
  %exitcond6985.not = icmp eq i64 %indvars.iv.next6983, %366
  br i1 %exitcond6985.not, label %omp.wsloop.region205.loopexit, label %omp.wsloop.region204, !llvm.loop !92

omp_collapsed.body173:                            ; preds = %omp_collapsed.body173.lr.ph, %omp.wsloop.region167.preheader
  %omp_collapsed.iv1776882 = phi i32 [ 0, %omp_collapsed.body173.lr.ph ], [ %omp_collapsed.next179, %omp.wsloop.region167.preheader ]
  %1414 = add i32 %omp_collapsed.iv1776882, %223
  %1415 = urem i32 %1414, %220
  %1416 = udiv i32 %1414, %220
  %1417 = add i32 %1416, 2
  %1418 = add i32 %1415, %214
  %1419 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !10
  %1420 = icmp sgt i32 %1419, 0
  br i1 %1420, label %omp.wsloop.region144.lr.ph, label %omp.wsloop.region145

omp.wsloop.region144.lr.ph:                       ; preds = %omp_collapsed.body173
  %1421 = sext i32 %1418 to i64
  %1422 = sext i32 %1417 to i64
  %1423 = sub nsw i64 %1421, %.unpack6020.unpack6021.unpack
  %1424 = mul nsw i64 %1423, %.unpack6020.unpack.unpack6025
  %reass.sub6037 = sub i64 %1424, %.unpack6020.unpack.unpack
  %1425 = sub nsw i64 %1422, %.unpack6020.unpack6023.unpack
  %1426 = mul nsw i64 %226, %1425
  %1427 = getelementptr double, ptr %.unpack6013, i64 %1426
  %invariant.gep6869 = getelementptr double, ptr %1427, i64 %reass.sub6037
  %narrow7092 = add nuw i32 %1419, 1
  %1428 = zext i32 %narrow7092 to i64
  %1429 = add nsw i64 %1428, -1
  %min.iters.check7540 = icmp ult i32 %1419, 4
  br i1 %min.iters.check7540, label %omp.wsloop.region144.preheader, label %vector.memcheck7481

vector.memcheck7481:                              ; preds = %omp.wsloop.region144.lr.ph
  %1430 = mul nuw nsw i64 %1428, 40
  %scevgep7483 = getelementptr i8, ptr %scevgep7482, i64 %1430
  %1431 = mul i64 %271, %1425
  %reass.sub7763 = sub i64 %1431, %270
  %1432 = add i64 %reass.sub7763, -8
  %1433 = shl nuw nsw i64 %1428, 3
  %1434 = add i64 %1432, %1433
  %1435 = mul i64 %.unpack6020.unpack6021.unpack6028, %1434
  %1436 = add i64 %269, %1435
  %1437 = shl nsw i64 %1421, 3
  %1438 = add i64 %1436, %1437
  %1439 = mul i64 %.unpack6020.unpack.unpack6025, %1438
  %scevgep7485 = getelementptr i8, ptr %scevgep7484, i64 %1439
  %reass.sub7764 = sub i64 %1431, %270
  %1440 = add i64 %reass.sub7764, 8
  %1441 = mul i64 %.unpack6020.unpack6021.unpack6028, %1440
  %1442 = add i64 %269, %1441
  %1443 = add i64 %1442, %1437
  %1444 = mul i64 %.unpack6020.unpack.unpack6025, %1443
  %scevgep7487 = getelementptr i8, ptr %scevgep7486, i64 %1444
  %1445 = icmp ult ptr %scevgep7485, %scevgep7487
  %umin7488 = select i1 %1445, ptr %scevgep7485, ptr %scevgep7487
  %1446 = icmp ugt ptr %scevgep7485, %scevgep7487
  %umax7489 = select i1 %1446, ptr %scevgep7485, ptr %scevgep7487
  %scevgep7490 = getelementptr i8, ptr %umax7489, i64 8
  %scevgep7492 = getelementptr i8, ptr %scevgep7491, i64 %1439
  %scevgep7494 = getelementptr i8, ptr %scevgep7493, i64 %1444
  %1447 = icmp ult ptr %scevgep7492, %scevgep7494
  %umin7495 = select i1 %1447, ptr %scevgep7492, ptr %scevgep7494
  %1448 = icmp ugt ptr %scevgep7492, %scevgep7494
  %umax7496 = select i1 %1448, ptr %scevgep7492, ptr %scevgep7494
  %scevgep7497 = getelementptr i8, ptr %umax7496, i64 8
  %scevgep7499 = getelementptr i8, ptr %scevgep7498, i64 %1439
  %scevgep7501 = getelementptr i8, ptr %scevgep7500, i64 %1444
  %1449 = icmp ult ptr %scevgep7499, %scevgep7501
  %umin7502 = select i1 %1449, ptr %scevgep7499, ptr %scevgep7501
  %1450 = icmp ugt ptr %scevgep7499, %scevgep7501
  %umax7503 = select i1 %1450, ptr %scevgep7499, ptr %scevgep7501
  %scevgep7504 = getelementptr i8, ptr %umax7503, i64 8
  %scevgep7506 = getelementptr i8, ptr %scevgep7505, i64 %1439
  %scevgep7508 = getelementptr i8, ptr %scevgep7507, i64 %1444
  %1451 = icmp ult ptr %scevgep7506, %scevgep7508
  %umin7509 = select i1 %1451, ptr %scevgep7506, ptr %scevgep7508
  %1452 = icmp ugt ptr %scevgep7506, %scevgep7508
  %umax7510 = select i1 %1452, ptr %scevgep7506, ptr %scevgep7508
  %scevgep7511 = getelementptr i8, ptr %umax7510, i64 8
  %scevgep7513 = getelementptr i8, ptr %scevgep7512, i64 %1439
  %scevgep7515 = getelementptr i8, ptr %scevgep7514, i64 %1444
  %1453 = icmp ult ptr %scevgep7513, %scevgep7515
  %umin7516 = select i1 %1453, ptr %scevgep7513, ptr %scevgep7515
  %1454 = icmp ugt ptr %scevgep7513, %scevgep7515
  %umax7517 = select i1 %1454, ptr %scevgep7513, ptr %scevgep7515
  %scevgep7518 = getelementptr i8, ptr %umax7517, i64 8
  %bound07519 = icmp ult ptr %0, %scevgep7490
  %bound17520 = icmp ult ptr %umin7488, %scevgep7483
  %found.conflict7521 = and i1 %bound07519, %bound17520
  %bound07522 = icmp ult ptr %0, %scevgep7497
  %bound17523 = icmp ult ptr %umin7495, %scevgep7483
  %found.conflict7524 = and i1 %bound07522, %bound17523
  %conflict.rdx7525 = or i1 %found.conflict7521, %found.conflict7524
  %bound07526 = icmp ult ptr %0, %scevgep7504
  %bound17527 = icmp ult ptr %umin7502, %scevgep7483
  %found.conflict7528 = and i1 %bound07526, %bound17527
  %conflict.rdx7529 = or i1 %conflict.rdx7525, %found.conflict7528
  %bound07530 = icmp ult ptr %0, %scevgep7511
  %bound17531 = icmp ult ptr %umin7509, %scevgep7483
  %found.conflict7532 = and i1 %bound07530, %bound17531
  %conflict.rdx7533 = or i1 %conflict.rdx7529, %found.conflict7532
  %bound07534 = icmp ult ptr %0, %scevgep7518
  %bound17535 = icmp ult ptr %umin7516, %scevgep7483
  %found.conflict7536 = and i1 %bound07534, %bound17535
  %conflict.rdx7537 = or i1 %conflict.rdx7533, %found.conflict7536
  br i1 %conflict.rdx7537, label %omp.wsloop.region144.preheader, label %vector.ph7541

vector.ph7541:                                    ; preds = %vector.memcheck7481
  %n.vec7543 = and i64 %1429, -2
  %ind.end7544 = or i64 %1429, 1
  br label %vector.body7547

vector.body7547:                                  ; preds = %vector.body7547, %vector.ph7541
  %index7548 = phi i64 [ 0, %vector.ph7541 ], [ %index.next7551, %vector.body7547 ]
  %offset.idx7549 = or disjoint i64 %index7548, 1
  %1455 = add i64 %index7548, 2
  %1456 = sub nsw i64 %offset.idx7549, %.unpack6020.unpack6022.unpack
  %1457 = sub nsw i64 %1455, %.unpack6020.unpack6022.unpack
  %1458 = mul nsw i64 %1456, %225
  %1459 = mul nsw i64 %1457, %225
  %1460 = getelementptr double, ptr %invariant.gep6869, i64 %1458
  %1461 = getelementptr double, ptr %invariant.gep6869, i64 %1459
  %1462 = getelementptr i8, ptr %1460, i64 24
  %1463 = getelementptr i8, ptr %1461, i64 24
  %1464 = load double, ptr %1462, align 8, !tbaa !29, !alias.scope !93
  %1465 = load double, ptr %1463, align 8, !tbaa !29, !alias.scope !93
  %1466 = insertelement <2 x double> poison, double %1464, i64 0
  %1467 = insertelement <2 x double> %1466, double %1465, i64 1
  %1468 = mul nuw nsw i64 %offset.idx7549, 5
  %1469 = getelementptr i8, ptr %1460, i64 8
  %1470 = getelementptr i8, ptr %1461, i64 8
  %1471 = load double, ptr %1469, align 8, !tbaa !29, !alias.scope !96
  %1472 = load double, ptr %1470, align 8, !tbaa !29, !alias.scope !96
  %1473 = insertelement <2 x double> poison, double %1471, i64 0
  %1474 = insertelement <2 x double> %1473, double %1472, i64 1
  %1475 = fdiv contract <2 x double> %1467, %1474
  %1476 = getelementptr i8, ptr %1460, i64 16
  %1477 = getelementptr i8, ptr %1461, i64 16
  %1478 = load double, ptr %1476, align 8, !tbaa !29, !alias.scope !98
  %1479 = load double, ptr %1477, align 8, !tbaa !29, !alias.scope !98
  %1480 = insertelement <2 x double> poison, double %1478, i64 0
  %1481 = insertelement <2 x double> %1480, double %1479, i64 1
  %1482 = fmul contract <2 x double> %1481, %1481
  %1483 = fmul contract <2 x double> %1467, %1467
  %1484 = fadd contract <2 x double> %1483, %1482
  %1485 = getelementptr i8, ptr %1460, i64 32
  %1486 = getelementptr i8, ptr %1461, i64 32
  %1487 = load double, ptr %1485, align 8, !tbaa !29, !alias.scope !100
  %1488 = load double, ptr %1486, align 8, !tbaa !29, !alias.scope !100
  %1489 = insertelement <2 x double> poison, double %1487, i64 0
  %1490 = insertelement <2 x double> %1489, double %1488, i64 1
  %1491 = fmul contract <2 x double> %1490, %1490
  %1492 = fadd contract <2 x double> %1484, %1491
  %1493 = fmul contract <2 x double> %1492, <double 5.000000e-01, double 5.000000e-01>
  %1494 = fdiv contract <2 x double> %1493, %1474
  %1495 = fmul contract <2 x double> %1481, %1475
  %1496 = load double, ptr %1462, align 8, !tbaa !29, !alias.scope !93
  %1497 = load double, ptr %1463, align 8, !tbaa !29, !alias.scope !93
  %1498 = insertelement <2 x double> poison, double %1496, i64 0
  %1499 = insertelement <2 x double> %1498, double %1497, i64 1
  %1500 = fmul contract <2 x double> %1475, %1499
  %1501 = getelementptr i8, ptr %1460, i64 40
  %1502 = getelementptr i8, ptr %1461, i64 40
  %1503 = load double, ptr %1501, align 8, !tbaa !29, !alias.scope !102
  %1504 = load double, ptr %1502, align 8, !tbaa !29, !alias.scope !102
  %1505 = insertelement <2 x double> poison, double %1503, i64 0
  %1506 = insertelement <2 x double> %1505, double %1504, i64 1
  %1507 = fsub contract <2 x double> %1506, %1494
  %1508 = fmul contract <2 x double> %1507, <double 4.000000e-01, double 4.000000e-01>
  %1509 = fadd contract <2 x double> %1500, %1508
  %1510 = load double, ptr %1485, align 8, !tbaa !29, !alias.scope !100
  %1511 = load double, ptr %1486, align 8, !tbaa !29, !alias.scope !100
  %1512 = insertelement <2 x double> poison, double %1510, i64 0
  %1513 = insertelement <2 x double> %1512, double %1511, i64 1
  %1514 = fmul contract <2 x double> %1475, %1513
  %1515 = load double, ptr %1501, align 8, !tbaa !29, !alias.scope !102
  %1516 = load double, ptr %1502, align 8, !tbaa !29, !alias.scope !102
  %1517 = insertelement <2 x double> poison, double %1515, i64 0
  %1518 = insertelement <2 x double> %1517, double %1516, i64 1
  %1519 = fmul contract <2 x double> %1518, <double 1.400000e+00, double 1.400000e+00>
  %1520 = fmul contract <2 x double> %1494, <double 4.000000e-01, double 4.000000e-01>
  %1521 = fsub contract <2 x double> %1519, %1520
  %1522 = fmul contract <2 x double> %1475, %1521
  %gep7774 = getelementptr double, ptr %invariant.gep7773, i64 %1468
  %1523 = shufflevector <2 x double> %1467, <2 x double> %1495, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1524 = shufflevector <2 x double> %1509, <2 x double> %1514, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1525 = shufflevector <4 x double> %1523, <4 x double> %1524, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1526 = shufflevector <2 x double> %1522, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec7550 = shufflevector <8 x double> %1525, <8 x double> %1526, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec7550, ptr %gep7774, align 8, !tbaa !42
  %index.next7551 = add nuw i64 %index7548, 2
  %1527 = icmp eq i64 %index.next7551, %n.vec7543
  br i1 %1527, label %middle.block7538, label %vector.body7547, !llvm.loop !104

middle.block7538:                                 ; preds = %vector.body7547
  %cmp.n7546 = icmp eq i64 %1429, %n.vec7543
  br i1 %cmp.n7546, label %omp.wsloop.region145, label %omp.wsloop.region144.preheader

omp.wsloop.region144.preheader:                   ; preds = %vector.memcheck7481, %omp.wsloop.region144.lr.ph, %middle.block7538
  %indvars.iv6957.ph = phi i64 [ 1, %vector.memcheck7481 ], [ 1, %omp.wsloop.region144.lr.ph ], [ %ind.end7544, %middle.block7538 ]
  br label %omp.wsloop.region144

omp.wsloop.region145:                             ; preds = %omp.wsloop.region144, %middle.block7538, %omp_collapsed.body173
  %1528 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !19
  %1529 = sext i32 %1528 to i64
  %1530 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !21
  %1531 = sext i32 %1530 to i64
  %reass.sub6914 = sub nsw i64 %1531, %1529
  %1532 = icmp sgt i64 %reass.sub6914, -1
  br i1 %1532, label %omp.wsloop.region148.preheader.lr.ph, label %omp.wsloop.region151

omp.wsloop.region148.preheader.lr.ph:             ; preds = %omp.wsloop.region145
  %1533 = add nuw nsw i64 %reass.sub6914, 1
  %1534 = sext i32 %1418 to i64
  %1535 = sext i32 %1417 to i64
  %1536 = sub nsw i64 %1534, %.unpack5996.unpack5997.unpack
  %1537 = mul nsw i64 %1536, %.unpack5996.unpack.unpack6001
  %1538 = sub nsw i64 %1535, %.unpack5996.unpack5999.unpack
  %1539 = mul nsw i64 %228, %1538
  %1540 = getelementptr double, ptr %.unpack5989, i64 %1539
  %invariant.gep6875 = getelementptr double, ptr %1540, i64 %1537
  %1541 = load double, ptr @_QMlu_dataEty2, align 8, !tbaa !105
  br label %omp.wsloop.region148.preheader

omp.wsloop.region148.preheader:                   ; preds = %omp.wsloop.region148.preheader.lr.ph, %omp.wsloop.region148.preheader
  %1542 = phi i64 [ %1533, %omp.wsloop.region148.preheader.lr.ph ], [ %1596, %omp.wsloop.region148.preheader ]
  %1543 = phi i32 [ %1528, %omp.wsloop.region148.preheader.lr.ph ], [ %1547, %omp.wsloop.region148.preheader ]
  %1544 = sext i32 %1543 to i64
  %1545 = sub nsw i64 %1544, %.unpack5996.unpack5998.unpack
  %1546 = mul nsw i64 %1545, %227
  %gep6876 = getelementptr double, ptr %invariant.gep6875, i64 %1546
  %1547 = add i32 %1543, 1
  %1548 = sext i32 %1547 to i64
  %1549 = mul nsw i64 %1548, 5
  %gep6872 = getelementptr double, ptr %invariant.gep6871, i64 %1549
  %1550 = add i32 %1543, -1
  %1551 = sext i32 %1550 to i64
  %1552 = mul nsw i64 %1551, 5
  %gep6874 = getelementptr double, ptr %invariant.gep6871, i64 %1552
  %1553 = getelementptr double, ptr %gep6876, i64 %241
  %1554 = load double, ptr %1553, align 8, !tbaa !14
  %1555 = load double, ptr %gep6872, align 8, !tbaa !42
  %1556 = load double, ptr %gep6874, align 8, !tbaa !42
  %1557 = fsub contract double %1555, %1556
  %1558 = fmul contract double %1541, %1557
  %1559 = fsub contract double %1554, %1558
  store double %1559, ptr %1553, align 8, !tbaa !14
  %1560 = getelementptr double, ptr %gep6876, i64 %242
  %1561 = load double, ptr %1560, align 8, !tbaa !14
  %1562 = getelementptr i8, ptr %gep6872, i64 8
  %1563 = load double, ptr %1562, align 8, !tbaa !42
  %1564 = getelementptr i8, ptr %gep6874, i64 8
  %1565 = load double, ptr %1564, align 8, !tbaa !42
  %1566 = fsub contract double %1563, %1565
  %1567 = fmul contract double %1541, %1566
  %1568 = fsub contract double %1561, %1567
  store double %1568, ptr %1560, align 8, !tbaa !14
  %1569 = getelementptr double, ptr %gep6876, i64 %243
  %1570 = load double, ptr %1569, align 8, !tbaa !14
  %1571 = getelementptr i8, ptr %gep6872, i64 16
  %1572 = load double, ptr %1571, align 8, !tbaa !42
  %1573 = getelementptr i8, ptr %gep6874, i64 16
  %1574 = load double, ptr %1573, align 8, !tbaa !42
  %1575 = fsub contract double %1572, %1574
  %1576 = fmul contract double %1541, %1575
  %1577 = fsub contract double %1570, %1576
  store double %1577, ptr %1569, align 8, !tbaa !14
  %1578 = getelementptr double, ptr %gep6876, i64 %244
  %1579 = load double, ptr %1578, align 8, !tbaa !14
  %1580 = getelementptr i8, ptr %gep6872, i64 24
  %1581 = load double, ptr %1580, align 8, !tbaa !42
  %1582 = getelementptr i8, ptr %gep6874, i64 24
  %1583 = load double, ptr %1582, align 8, !tbaa !42
  %1584 = fsub contract double %1581, %1583
  %1585 = fmul contract double %1541, %1584
  %1586 = fsub contract double %1579, %1585
  store double %1586, ptr %1578, align 8, !tbaa !14
  %1587 = getelementptr double, ptr %gep6876, i64 %245
  %1588 = load double, ptr %1587, align 8, !tbaa !14
  %1589 = getelementptr i8, ptr %gep6872, i64 32
  %1590 = load double, ptr %1589, align 8, !tbaa !42
  %1591 = getelementptr i8, ptr %gep6874, i64 32
  %1592 = load double, ptr %1591, align 8, !tbaa !42
  %1593 = fsub contract double %1590, %1592
  %1594 = fmul contract double %1541, %1593
  %1595 = fsub contract double %1588, %1594
  store double %1595, ptr %1587, align 8, !tbaa !14
  %1596 = add nsw i64 %1542, -1
  %1597 = icmp ugt i64 %1542, 1
  br i1 %1597, label %omp.wsloop.region148.preheader, label %omp.wsloop.region151

omp.wsloop.region151:                             ; preds = %omp.wsloop.region148.preheader, %omp.wsloop.region145
  %1598 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !10
  %1599 = sext i32 %1598 to i64
  %reass.sub6915 = sub nsw i64 %1599, %1529
  %1600 = icmp sgt i64 %reass.sub6915, -1
  br i1 %1600, label %omp.wsloop.region153.lr.ph, label %omp.wsloop.region154

omp.wsloop.region153.lr.ph:                       ; preds = %omp.wsloop.region151
  %1601 = add nuw nsw i64 %reass.sub6915, 1
  %1602 = sext i32 %1418 to i64
  %1603 = sext i32 %1417 to i64
  %1604 = sub nsw i64 %1602, %.unpack6020.unpack6021.unpack
  %1605 = mul nsw i64 %1604, %.unpack6020.unpack.unpack6025
  %reass.sub5984 = sub i64 %1605, %.unpack6020.unpack.unpack
  %1606 = add i64 %reass.sub5984, 1
  %1607 = sub i64 %1603, %.unpack6020.unpack6023.unpack
  %1608 = mul nsw i64 %226, %1607
  %1609 = getelementptr double, ptr %.unpack6013, i64 %1608
  %1610 = add i64 %reass.sub5984, 2
  %1611 = add i64 %reass.sub5984, 3
  %1612 = add i64 %reass.sub5984, 4
  %1613 = add i64 %reass.sub5984, 5
  %1614 = add nsw i64 %1599, 1
  %1615 = sub nsw i64 %1614, %1529
  %min.iters.check7458 = icmp ult i64 %1615, 8
  br i1 %min.iters.check7458, label %omp.wsloop.region153.preheader, label %vector.scevcheck7314

vector.scevcheck7314:                             ; preds = %omp.wsloop.region153.lr.ph
  %1616 = sub nsw i64 %1599, %1529
  %1617 = trunc i64 %1616 to i32
  %1618 = add i32 %1528, %1617
  %1619 = icmp slt i32 %1618, %1528
  %1620 = add i32 %1528, -1
  %1621 = trunc i64 %1616 to i32
  %1622 = add i32 %1620, %1621
  %1623 = icmp slt i32 %1622, %1620
  %1624 = icmp ugt i64 %1616, 4294967295
  %1625 = or i1 %1623, %1624
  %1626 = mul nsw i64 %1529, 40
  %scevgep7317 = getelementptr i8, ptr %scevgep7316, i64 %1626
  %mul7318 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1616, i64 40)
  %mul.result7319 = extractvalue { i64, i1 } %mul7318, 0
  %mul.overflow7320 = extractvalue { i64, i1 } %mul7318, 1
  %1627 = getelementptr i8, ptr %scevgep7317, i64 %mul.result7319
  %1628 = icmp ult ptr %1627, %scevgep7317
  %1629 = or i1 %1628, %mul.overflow7320
  %scevgep7322 = getelementptr i8, ptr %scevgep7321, i64 %1626
  %mul7323 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1616, i64 40)
  %mul.result7324 = extractvalue { i64, i1 } %mul7323, 0
  %mul.overflow7325 = extractvalue { i64, i1 } %mul7323, 1
  %1630 = getelementptr i8, ptr %scevgep7322, i64 %mul.result7324
  %1631 = icmp ult ptr %1630, %scevgep7322
  %1632 = or i1 %1631, %mul.overflow7325
  %scevgep7327 = getelementptr i8, ptr %scevgep7326, i64 %1626
  %mul7328 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1616, i64 40)
  %mul.result7329 = extractvalue { i64, i1 } %mul7328, 0
  %mul.overflow7330 = extractvalue { i64, i1 } %mul7328, 1
  %1633 = getelementptr i8, ptr %scevgep7327, i64 %mul.result7329
  %1634 = icmp ult ptr %1633, %scevgep7327
  %1635 = or i1 %1634, %mul.overflow7330
  %scevgep7332 = getelementptr i8, ptr %scevgep7331, i64 %1626
  %mul7333 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %1616, i64 40)
  %mul.result7334 = extractvalue { i64, i1 } %mul7333, 0
  %mul.overflow7335 = extractvalue { i64, i1 } %mul7333, 1
  %1636 = getelementptr i8, ptr %scevgep7332, i64 %mul.result7334
  %1637 = icmp ult ptr %1636, %scevgep7332
  %1638 = or i1 %1637, %mul.overflow7335
  %1639 = or i1 %1619, %1625
  %1640 = or i1 %1639, %1629
  %1641 = or i1 %1640, %1632
  %1642 = or i1 %1641, %1635
  %1643 = or i1 %1642, %1638
  br i1 %1643, label %omp.wsloop.region153.preheader, label %vector.memcheck7336

vector.memcheck7336:                              ; preds = %vector.scevcheck7314
  %1644 = mul nsw i64 %1529, 40
  %scevgep7338 = getelementptr i8, ptr %scevgep7337, i64 %1644
  %1645 = mul nsw i64 %1599, 40
  %scevgep7341 = getelementptr i8, ptr %0, i64 %1645
  %1646 = mul i64 %262, %1607
  %1647 = add i64 %261, %1646
  %1648 = add i32 %1528, -1
  %1649 = sext i32 %1648 to i64
  %1650 = shl nsw i64 %1649, 3
  %1651 = add i64 %1647, %1650
  %1652 = mul i64 %.unpack6020.unpack6021.unpack6028, %1651
  %1653 = add i64 %260, %1652
  %1654 = shl nsw i64 %1602, 3
  %1655 = add i64 %1653, %1654
  %1656 = mul i64 %.unpack6020.unpack.unpack6025, %1655
  %scevgep7343 = getelementptr i8, ptr %scevgep7342, i64 %1656
  %1657 = mul i64 %.unpack6020.unpack6022.unpack6031, %1607
  %1658 = add i64 %1657, %1599
  %1659 = add i64 %1658, %1649
  %1660 = shl i64 %1659, 3
  %1661 = add i64 %1660, 8
  %1662 = add i64 %276, %1529
  %1663 = shl i64 %1662, 3
  %1664 = sub i64 %1661, %1663
  %1665 = mul i64 %.unpack6020.unpack6021.unpack6028, %1664
  %1666 = add i64 %260, %1665
  %1667 = add i64 %1666, %1654
  %1668 = mul i64 %.unpack6020.unpack.unpack6025, %1667
  %scevgep7345 = getelementptr i8, ptr %scevgep7344, i64 %1668
  %1669 = icmp ult ptr %scevgep7343, %scevgep7345
  %umin7346 = select i1 %1669, ptr %scevgep7343, ptr %scevgep7345
  %1670 = icmp ugt ptr %scevgep7343, %scevgep7345
  %umax7347 = select i1 %1670, ptr %scevgep7343, ptr %scevgep7345
  %scevgep7348 = getelementptr i8, ptr %umax7347, i64 8
  %scevgep7350 = getelementptr i8, ptr %scevgep7349, i64 %1656
  %scevgep7352 = getelementptr i8, ptr %scevgep7351, i64 %1668
  %1671 = icmp ult ptr %scevgep7350, %scevgep7352
  %umin7353 = select i1 %1671, ptr %scevgep7350, ptr %scevgep7352
  %1672 = icmp ugt ptr %scevgep7350, %scevgep7352
  %umax7354 = select i1 %1672, ptr %scevgep7350, ptr %scevgep7352
  %scevgep7355 = getelementptr i8, ptr %umax7354, i64 8
  %scevgep7357 = getelementptr i8, ptr %scevgep7356, i64 %1656
  %scevgep7359 = getelementptr i8, ptr %scevgep7358, i64 %1668
  %1673 = icmp ult ptr %scevgep7357, %scevgep7359
  %umin7360 = select i1 %1673, ptr %scevgep7357, ptr %scevgep7359
  %1674 = icmp ugt ptr %scevgep7357, %scevgep7359
  %umax7361 = select i1 %1674, ptr %scevgep7357, ptr %scevgep7359
  %scevgep7362 = getelementptr i8, ptr %umax7361, i64 8
  %scevgep7364 = getelementptr i8, ptr %scevgep7363, i64 %1656
  %scevgep7366 = getelementptr i8, ptr %scevgep7365, i64 %1668
  %1675 = icmp ult ptr %scevgep7364, %scevgep7366
  %umin7367 = select i1 %1675, ptr %scevgep7364, ptr %scevgep7366
  %1676 = icmp ugt ptr %scevgep7364, %scevgep7366
  %umax7368 = select i1 %1676, ptr %scevgep7364, ptr %scevgep7366
  %scevgep7369 = getelementptr i8, ptr %umax7368, i64 8
  %scevgep7371 = getelementptr i8, ptr %scevgep7370, i64 %1656
  %scevgep7373 = getelementptr i8, ptr %scevgep7372, i64 %1668
  %1677 = icmp ult ptr %scevgep7371, %scevgep7373
  %umin7374 = select i1 %1677, ptr %scevgep7371, ptr %scevgep7373
  %1678 = icmp ugt ptr %scevgep7371, %scevgep7373
  %umax7375 = select i1 %1678, ptr %scevgep7371, ptr %scevgep7373
  %scevgep7376 = getelementptr i8, ptr %umax7375, i64 8
  %1679 = add i64 %1646, 8
  %1680 = shl nsw i64 %1599, 3
  %1681 = add i64 %1679, %1680
  %1682 = sub i64 %1681, %278
  %1683 = mul i64 %.unpack6020.unpack6021.unpack6028, %1682
  %1684 = add i64 %260, %1683
  %1685 = add i64 %1684, %1654
  %1686 = mul i64 %.unpack6020.unpack.unpack6025, %1685
  %scevgep7378 = getelementptr i8, ptr %scevgep7377, i64 %1686
  %1687 = add i64 %261, %1646
  %1688 = shl nsw i64 %1529, 3
  %1689 = add i64 %1687, %1688
  %1690 = mul i64 %.unpack6020.unpack6021.unpack6028, %1689
  %1691 = add i64 %260, %1690
  %1692 = add i64 %1691, %1654
  %1693 = mul i64 %.unpack6020.unpack.unpack6025, %1692
  %scevgep7380 = getelementptr i8, ptr %scevgep7379, i64 %1693
  %1694 = icmp ult ptr %scevgep7378, %scevgep7380
  %umin7381 = select i1 %1694, ptr %scevgep7378, ptr %scevgep7380
  %1695 = icmp ugt ptr %scevgep7378, %scevgep7380
  %umax7382 = select i1 %1695, ptr %scevgep7378, ptr %scevgep7380
  %scevgep7383 = getelementptr i8, ptr %umax7382, i64 8
  %scevgep7385 = getelementptr i8, ptr %scevgep7384, i64 %1686
  %scevgep7387 = getelementptr i8, ptr %scevgep7386, i64 %1693
  %1696 = icmp ult ptr %scevgep7385, %scevgep7387
  %umin7388 = select i1 %1696, ptr %scevgep7385, ptr %scevgep7387
  %1697 = icmp ugt ptr %scevgep7385, %scevgep7387
  %umax7389 = select i1 %1697, ptr %scevgep7385, ptr %scevgep7387
  %scevgep7390 = getelementptr i8, ptr %umax7389, i64 8
  %scevgep7392 = getelementptr i8, ptr %scevgep7391, i64 %1686
  %scevgep7394 = getelementptr i8, ptr %scevgep7393, i64 %1693
  %1698 = icmp ult ptr %scevgep7392, %scevgep7394
  %umin7395 = select i1 %1698, ptr %scevgep7392, ptr %scevgep7394
  %1699 = icmp ugt ptr %scevgep7392, %scevgep7394
  %umax7396 = select i1 %1699, ptr %scevgep7392, ptr %scevgep7394
  %scevgep7397 = getelementptr i8, ptr %umax7396, i64 8
  %scevgep7399 = getelementptr i8, ptr %scevgep7398, i64 %1686
  %scevgep7401 = getelementptr i8, ptr %scevgep7400, i64 %1693
  %1700 = icmp ult ptr %scevgep7399, %scevgep7401
  %umin7402 = select i1 %1700, ptr %scevgep7399, ptr %scevgep7401
  %1701 = icmp ugt ptr %scevgep7399, %scevgep7401
  %umax7403 = select i1 %1701, ptr %scevgep7399, ptr %scevgep7401
  %scevgep7404 = getelementptr i8, ptr %umax7403, i64 8
  %scevgep7406 = getelementptr i8, ptr %scevgep7405, i64 %1686
  %scevgep7408 = getelementptr i8, ptr %scevgep7407, i64 %1693
  %1702 = icmp ult ptr %scevgep7406, %scevgep7408
  %umin7409 = select i1 %1702, ptr %scevgep7406, ptr %scevgep7408
  %1703 = icmp ugt ptr %scevgep7406, %scevgep7408
  %umax7410 = select i1 %1703, ptr %scevgep7406, ptr %scevgep7408
  %scevgep7411 = getelementptr i8, ptr %umax7410, i64 8
  %bound07412 = icmp ugt ptr %scevgep7341, @_QMlu_dataEty3
  %bound17413 = icmp ult ptr %scevgep7338, getelementptr inbounds (double, ptr @_QMlu_dataEty3, i64 1)
  %found.conflict7414 = and i1 %bound07412, %bound17413
  %bound07415 = icmp ult ptr %scevgep7338, %scevgep7348
  %bound17416 = icmp ult ptr %umin7346, %scevgep7341
  %found.conflict7417 = and i1 %bound07415, %bound17416
  %conflict.rdx7418 = or i1 %found.conflict7414, %found.conflict7417
  %bound07419 = icmp ult ptr %scevgep7338, %scevgep7355
  %bound17420 = icmp ult ptr %umin7353, %scevgep7341
  %found.conflict7421 = and i1 %bound07419, %bound17420
  %conflict.rdx7422 = or i1 %conflict.rdx7418, %found.conflict7421
  %bound07423 = icmp ult ptr %scevgep7338, %scevgep7362
  %bound17424 = icmp ult ptr %umin7360, %scevgep7341
  %found.conflict7425 = and i1 %bound07423, %bound17424
  %conflict.rdx7426 = or i1 %conflict.rdx7422, %found.conflict7425
  %bound07427 = icmp ult ptr %scevgep7338, %scevgep7369
  %bound17428 = icmp ult ptr %umin7367, %scevgep7341
  %found.conflict7429 = and i1 %bound07427, %bound17428
  %conflict.rdx7430 = or i1 %conflict.rdx7426, %found.conflict7429
  %bound07431 = icmp ult ptr %scevgep7338, %scevgep7376
  %bound17432 = icmp ult ptr %umin7374, %scevgep7341
  %found.conflict7433 = and i1 %bound07431, %bound17432
  %conflict.rdx7434 = or i1 %conflict.rdx7430, %found.conflict7433
  %bound07435 = icmp ult ptr %scevgep7338, %scevgep7383
  %bound17436 = icmp ult ptr %umin7381, %scevgep7341
  %found.conflict7437 = and i1 %bound07435, %bound17436
  %conflict.rdx7438 = or i1 %conflict.rdx7434, %found.conflict7437
  %bound07439 = icmp ult ptr %scevgep7338, %scevgep7390
  %bound17440 = icmp ult ptr %umin7388, %scevgep7341
  %found.conflict7441 = and i1 %bound07439, %bound17440
  %conflict.rdx7442 = or i1 %conflict.rdx7438, %found.conflict7441
  %bound07443 = icmp ult ptr %scevgep7338, %scevgep7397
  %bound17444 = icmp ult ptr %umin7395, %scevgep7341
  %found.conflict7445 = and i1 %bound07443, %bound17444
  %conflict.rdx7446 = or i1 %conflict.rdx7442, %found.conflict7445
  %bound07447 = icmp ult ptr %scevgep7338, %scevgep7404
  %bound17448 = icmp ult ptr %umin7402, %scevgep7341
  %found.conflict7449 = and i1 %bound07447, %bound17448
  %conflict.rdx7450 = or i1 %conflict.rdx7446, %found.conflict7449
  %bound07451 = icmp ult ptr %scevgep7338, %scevgep7411
  %bound17452 = icmp ult ptr %umin7409, %scevgep7341
  %found.conflict7453 = and i1 %bound07451, %bound17452
  %conflict.rdx7454 = or i1 %conflict.rdx7450, %found.conflict7453
  br i1 %conflict.rdx7454, label %omp.wsloop.region153.preheader, label %vector.ph7459

vector.ph7459:                                    ; preds = %vector.memcheck7336
  %n.vec7461 = and i64 %1615, -2
  %ind.end7462 = sub nsw i64 %1601, %n.vec7461
  %.cast7464 = trunc i64 %n.vec7461 to i32
  %ind.end7465 = add i32 %1528, %.cast7464
  %1704 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107, !alias.scope !109, !noalias !112
  %broadcast.splatinsert7472 = insertelement <2 x double> poison, double %1704, i64 0
  %broadcast.splat7473 = shufflevector <2 x double> %broadcast.splatinsert7472, <2 x double> poison, <2 x i32> zeroinitializer
  %1705 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107, !alias.scope !109, !noalias !112
  %broadcast.splatinsert7474 = insertelement <2 x double> poison, double %1705, i64 0
  %1706 = fmul contract <2 x double> %broadcast.splatinsert7474, <double 0x3FF5555555555555, double poison>
  %1707 = shufflevector <2 x double> %1706, <2 x double> poison, <2 x i32> zeroinitializer
  %1708 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107, !alias.scope !109, !noalias !112
  %broadcast.splatinsert7476 = insertelement <2 x double> poison, double %1708, i64 0
  %broadcast.splat7477 = shufflevector <2 x double> %broadcast.splatinsert7476, <2 x double> poison, <2 x i32> zeroinitializer
  %1709 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107, !alias.scope !109, !noalias !112
  %broadcast.splatinsert7478 = insertelement <2 x double> poison, double %1709, i64 0
  %broadcast.splat7479 = shufflevector <2 x double> %broadcast.splatinsert7478, <2 x double> poison, <2 x i32> zeroinitializer
  %1710 = fmul contract <2 x double> %broadcast.splat7479, <double 0x3FDEB851EB851EB6, double 0x3FDEB851EB851EB6>
  %1711 = fmul contract <2 x double> %broadcast.splat7479, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %1712 = fmul contract <2 x double> %broadcast.splat7479, <double 0x3FFF5C28F5C28F5B, double 0x3FFF5C28F5C28F5B>
  br label %vector.body7468

vector.body7468:                                  ; preds = %vector.body7468, %vector.ph7459
  %index7469 = phi i64 [ 0, %vector.ph7459 ], [ %index.next7480, %vector.body7468 ]
  %.cast7470 = trunc i64 %index7469 to i32
  %offset.idx7471 = add i32 %1528, %.cast7470
  %1713 = add i32 %offset.idx7471, 1
  %1714 = sext i32 %offset.idx7471 to i64
  %1715 = sext i32 %1713 to i64
  %1716 = sub nsw i64 %1714, %.unpack6020.unpack6022.unpack
  %1717 = sub nsw i64 %1715, %.unpack6020.unpack6022.unpack
  %1718 = mul nsw i64 %1716, %225
  %1719 = mul nsw i64 %1717, %225
  %1720 = getelementptr double, ptr %1609, i64 %1718
  %1721 = getelementptr double, ptr %1609, i64 %1719
  %1722 = getelementptr double, ptr %1720, i64 %1606
  %1723 = getelementptr double, ptr %1721, i64 %1606
  %1724 = load double, ptr %1722, align 8, !tbaa !29, !alias.scope !114
  %1725 = load double, ptr %1723, align 8, !tbaa !29, !alias.scope !114
  %1726 = insertelement <2 x double> poison, double %1724, i64 0
  %1727 = insertelement <2 x double> %1726, double %1725, i64 1
  %1728 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %1727
  %1729 = getelementptr double, ptr %1720, i64 %1610
  %1730 = getelementptr double, ptr %1721, i64 %1610
  %1731 = load double, ptr %1729, align 8, !tbaa !29, !alias.scope !116
  %1732 = load double, ptr %1730, align 8, !tbaa !29, !alias.scope !116
  %1733 = insertelement <2 x double> poison, double %1731, i64 0
  %1734 = insertelement <2 x double> %1733, double %1732, i64 1
  %1735 = fmul contract <2 x double> %1728, %1734
  %1736 = getelementptr double, ptr %1720, i64 %1611
  %1737 = getelementptr double, ptr %1721, i64 %1611
  %1738 = load double, ptr %1736, align 8, !tbaa !29, !alias.scope !118
  %1739 = load double, ptr %1737, align 8, !tbaa !29, !alias.scope !118
  %1740 = insertelement <2 x double> poison, double %1738, i64 0
  %1741 = insertelement <2 x double> %1740, double %1739, i64 1
  %1742 = fmul contract <2 x double> %1728, %1741
  %1743 = getelementptr double, ptr %1720, i64 %1612
  %1744 = getelementptr double, ptr %1721, i64 %1612
  %1745 = load double, ptr %1743, align 8, !tbaa !29, !alias.scope !120
  %1746 = load double, ptr %1744, align 8, !tbaa !29, !alias.scope !120
  %1747 = insertelement <2 x double> poison, double %1745, i64 0
  %1748 = insertelement <2 x double> %1747, double %1746, i64 1
  %1749 = fmul contract <2 x double> %1728, %1748
  %1750 = getelementptr double, ptr %1720, i64 %1613
  %1751 = getelementptr double, ptr %1721, i64 %1613
  %1752 = load double, ptr %1750, align 8, !tbaa !29, !alias.scope !122
  %1753 = load double, ptr %1751, align 8, !tbaa !29, !alias.scope !122
  %1754 = insertelement <2 x double> poison, double %1752, i64 0
  %1755 = insertelement <2 x double> %1754, double %1753, i64 1
  %1756 = fmul contract <2 x double> %1728, %1755
  %1757 = add i32 %offset.idx7471, -1
  %1758 = sext i32 %1757 to i64
  %1759 = sext i32 %offset.idx7471 to i64
  %1760 = sub nsw i64 %1758, %.unpack6020.unpack6022.unpack
  %1761 = sub nsw i64 %1759, %.unpack6020.unpack6022.unpack
  %1762 = mul nsw i64 %1760, %225
  %1763 = mul nsw i64 %1761, %225
  %1764 = getelementptr double, ptr %1609, i64 %1762
  %1765 = getelementptr double, ptr %1609, i64 %1763
  %1766 = getelementptr double, ptr %1764, i64 %1606
  %1767 = getelementptr double, ptr %1765, i64 %1606
  %1768 = load double, ptr %1766, align 8, !tbaa !29, !alias.scope !124
  %1769 = load double, ptr %1767, align 8, !tbaa !29, !alias.scope !124
  %1770 = insertelement <2 x double> poison, double %1768, i64 0
  %1771 = insertelement <2 x double> %1770, double %1769, i64 1
  %1772 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %1771
  %1773 = getelementptr double, ptr %1764, i64 %1610
  %1774 = getelementptr double, ptr %1765, i64 %1610
  %1775 = load double, ptr %1773, align 8, !tbaa !29, !alias.scope !126
  %1776 = load double, ptr %1774, align 8, !tbaa !29, !alias.scope !126
  %1777 = insertelement <2 x double> poison, double %1775, i64 0
  %1778 = insertelement <2 x double> %1777, double %1776, i64 1
  %1779 = fmul contract <2 x double> %1772, %1778
  %1780 = getelementptr double, ptr %1764, i64 %1611
  %1781 = getelementptr double, ptr %1765, i64 %1611
  %1782 = load double, ptr %1780, align 8, !tbaa !29, !alias.scope !128
  %1783 = load double, ptr %1781, align 8, !tbaa !29, !alias.scope !128
  %1784 = insertelement <2 x double> poison, double %1782, i64 0
  %1785 = insertelement <2 x double> %1784, double %1783, i64 1
  %1786 = fmul contract <2 x double> %1772, %1785
  %1787 = getelementptr double, ptr %1764, i64 %1612
  %1788 = getelementptr double, ptr %1765, i64 %1612
  %1789 = load double, ptr %1787, align 8, !tbaa !29, !alias.scope !130
  %1790 = load double, ptr %1788, align 8, !tbaa !29, !alias.scope !130
  %1791 = insertelement <2 x double> poison, double %1789, i64 0
  %1792 = insertelement <2 x double> %1791, double %1790, i64 1
  %1793 = fmul contract <2 x double> %1772, %1792
  %1794 = getelementptr double, ptr %1764, i64 %1613
  %1795 = getelementptr double, ptr %1765, i64 %1613
  %1796 = load double, ptr %1794, align 8, !tbaa !29, !alias.scope !132
  %1797 = load double, ptr %1795, align 8, !tbaa !29, !alias.scope !132
  %1798 = insertelement <2 x double> poison, double %1796, i64 0
  %1799 = insertelement <2 x double> %1798, double %1797, i64 1
  %1800 = fmul contract <2 x double> %1772, %1799
  %1801 = fsub contract <2 x double> %1735, %1779
  %1802 = fmul contract <2 x double> %1801, %broadcast.splat7473
  %1803 = mul nsw i64 %1714, 5
  %1804 = mul nsw i64 %1715, 5
  %1805 = getelementptr double, ptr %0, i64 %1803
  %1806 = getelementptr double, ptr %0, i64 %1804
  %1807 = getelementptr i8, ptr %1805, i64 -32
  %1808 = getelementptr i8, ptr %1806, i64 -32
  %1809 = extractelement <2 x double> %1802, i64 0
  store double %1809, ptr %1807, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1810 = extractelement <2 x double> %1802, i64 1
  store double %1810, ptr %1808, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1811 = fsub contract <2 x double> %1742, %1786
  %1812 = fmul contract <2 x double> %1811, %1707
  %1813 = getelementptr i8, ptr %1805, i64 -24
  %1814 = getelementptr i8, ptr %1806, i64 -24
  %1815 = extractelement <2 x double> %1812, i64 0
  store double %1815, ptr %1813, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1816 = extractelement <2 x double> %1812, i64 1
  store double %1816, ptr %1814, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1817 = fsub contract <2 x double> %1749, %1793
  %1818 = fmul contract <2 x double> %1817, %broadcast.splat7477
  %1819 = getelementptr i8, ptr %1805, i64 -16
  %1820 = getelementptr i8, ptr %1806, i64 -16
  %1821 = extractelement <2 x double> %1818, i64 0
  store double %1821, ptr %1819, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1822 = extractelement <2 x double> %1818, i64 1
  store double %1822, ptr %1820, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1823 = fmul <2 x double> %1735, %1735
  %1824 = fmul <2 x double> %1742, %1742
  %1825 = fadd contract <2 x double> %1823, %1824
  %1826 = fmul <2 x double> %1749, %1749
  %1827 = fadd contract <2 x double> %1825, %1826
  %1828 = fmul <2 x double> %1779, %1779
  %1829 = fmul <2 x double> %1786, %1786
  %1830 = fadd contract <2 x double> %1828, %1829
  %1831 = fmul <2 x double> %1793, %1793
  %1832 = fadd contract <2 x double> %1830, %1831
  %1833 = fsub contract <2 x double> %1827, %1832
  %1834 = fmul contract <2 x double> %1833, %1710
  %1835 = fsub contract <2 x double> %1824, %1829
  %1836 = fmul contract <2 x double> %1835, %1711
  %1837 = fsub contract <2 x double> %1836, %1834
  %1838 = fsub contract <2 x double> %1756, %1800
  %1839 = fmul contract <2 x double> %1838, %1712
  %1840 = fadd contract <2 x double> %1839, %1837
  %1841 = getelementptr i8, ptr %1805, i64 -8
  %1842 = getelementptr i8, ptr %1806, i64 -8
  %1843 = extractelement <2 x double> %1840, i64 0
  store double %1843, ptr %1841, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %1844 = extractelement <2 x double> %1840, i64 1
  store double %1844, ptr %1842, align 8, !tbaa !42, !alias.scope !112, !noalias !134
  %index.next7480 = add nuw i64 %index7469, 2
  %1845 = icmp eq i64 %index.next7480, %n.vec7461
  br i1 %1845, label %middle.block7456, label %vector.body7468, !llvm.loop !135

middle.block7456:                                 ; preds = %vector.body7468
  %cmp.n7467 = icmp eq i64 %1615, %n.vec7461
  br i1 %cmp.n7467, label %omp.wsloop.region154.loopexit, label %omp.wsloop.region153.preheader

omp.wsloop.region153.preheader:                   ; preds = %vector.memcheck7336, %vector.scevcheck7314, %omp.wsloop.region153.lr.ph, %middle.block7456
  %.ph = phi i64 [ %1601, %vector.memcheck7336 ], [ %1601, %vector.scevcheck7314 ], [ %1601, %omp.wsloop.region153.lr.ph ], [ %ind.end7462, %middle.block7456 ]
  %.ph7768 = phi i32 [ %1528, %vector.memcheck7336 ], [ %1528, %vector.scevcheck7314 ], [ %1528, %omp.wsloop.region153.lr.ph ], [ %ind.end7465, %middle.block7456 ]
  br label %omp.wsloop.region153

omp.wsloop.region154.loopexit:                    ; preds = %omp.wsloop.region153, %middle.block7456
  %.pre7016 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !19
  %.pre7017 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !21
  %.pre7021 = sext i32 %.pre7016 to i64
  %.pre7023 = sext i32 %.pre7017 to i64
  %.pre7025 = sub nsw i64 %.pre7023, %.pre7021
  br label %omp.wsloop.region154

omp.wsloop.region154:                             ; preds = %omp.wsloop.region154.loopexit, %omp.wsloop.region151
  %reass.sub6916.pre-phi = phi i64 [ %.pre7025, %omp.wsloop.region154.loopexit ], [ %reass.sub6914, %omp.wsloop.region151 ]
  %1846 = phi i32 [ %.pre7016, %omp.wsloop.region154.loopexit ], [ %1528, %omp.wsloop.region151 ]
  %1847 = icmp sgt i64 %reass.sub6916.pre-phi, -1
  br i1 %1847, label %omp.wsloop.region156.lr.ph, label %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge

omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge: ; preds = %omp.wsloop.region154
  %.pre7051 = sext i32 %1418 to i64
  %.pre7053 = sext i32 %1417 to i64
  %.pre7055 = sub nsw i64 %.pre7051, %.unpack5996.unpack5997.unpack
  %.pre7057 = mul nsw i64 %.pre7055, %.unpack5996.unpack.unpack6001
  %.pre7059 = sub nsw i64 %.pre7053, %.unpack5996.unpack5999.unpack
  %.pre7061 = mul nsw i64 %228, %.pre7059
  %.pre7063 = sub nsw i64 %.pre7051, %.unpack6020.unpack6021.unpack
  %.pre7065 = mul nsw i64 %.pre7063, %.unpack6020.unpack.unpack6025
  %.pre7067 = sub nsw i64 %.pre7053, %.unpack6020.unpack6023.unpack
  %.pre7069 = mul nsw i64 %226, %.pre7067
  br label %omp.wsloop.region158.preheader

omp.wsloop.region156.lr.ph:                       ; preds = %omp.wsloop.region154
  %1848 = add nuw nsw i64 %reass.sub6916.pre-phi, 1
  %1849 = sext i32 %1418 to i64
  %1850 = sext i32 %1417 to i64
  %1851 = sub nsw i64 %1849, %.unpack5996.unpack5997.unpack
  %1852 = mul nsw i64 %1851, %.unpack5996.unpack.unpack6001
  %reass.sub5734 = sub i64 %1852, %.unpack5996.unpack.unpack
  %1853 = sub nsw i64 %1850, %.unpack5996.unpack5999.unpack
  %1854 = mul nsw i64 %228, %1853
  %1855 = getelementptr double, ptr %.unpack5989, i64 %1854
  %invariant.gep6877 = getelementptr double, ptr %1855, i64 %reass.sub5734
  %1856 = load double, ptr @_QMlu_dataEdy1, align 8, !tbaa !136
  %1857 = load double, ptr @_QMlu_dataEty1, align 8, !tbaa !138
  %1858 = fmul contract double %1856, %1857
  %1859 = sub nsw i64 %1849, %.unpack6020.unpack6021.unpack
  %1860 = mul nsw i64 %1859, %.unpack6020.unpack.unpack6025
  %reass.sub5759 = sub i64 %1860, %.unpack6020.unpack.unpack
  %1861 = add i64 %reass.sub5759, 1
  %1862 = sub nsw i64 %1850, %.unpack6020.unpack6023.unpack
  %1863 = mul nsw i64 %226, %1862
  %1864 = getelementptr double, ptr %.unpack6013, i64 %1863
  %1865 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107
  %1866 = fmul contract double %1865, 1.000000e-01
  %1867 = load double, ptr @_QMlu_dataEdy2, align 8, !tbaa !140
  %1868 = fmul contract double %1857, %1867
  %1869 = add i64 %reass.sub5759, 2
  %1870 = load double, ptr @_QMlu_dataEdy3, align 8, !tbaa !142
  %1871 = fmul contract double %1857, %1870
  %1872 = add i64 %reass.sub5759, 3
  %1873 = load double, ptr @_QMlu_dataEdy4, align 8, !tbaa !144
  %1874 = fmul contract double %1857, %1873
  %1875 = add i64 %reass.sub5759, 4
  %1876 = load double, ptr @_QMlu_dataEdy5, align 8, !tbaa !146
  %1877 = fmul contract double %1857, %1876
  %1878 = add i64 %reass.sub5759, 5
  br label %omp.wsloop.region156

omp.wsloop.region158.preheader:                   ; preds = %omp.wsloop.region156, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge
  %.pre-phi7070 = phi i64 [ %.pre7069, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1863, %omp.wsloop.region156 ]
  %.pre-phi7066 = phi i64 [ %.pre7065, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1860, %omp.wsloop.region156 ]
  %.pre-phi7062 = phi i64 [ %.pre7061, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1854, %omp.wsloop.region156 ]
  %.pre-phi7058 = phi i64 [ %.pre7057, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1852, %omp.wsloop.region156 ]
  %.pre-phi7054 = phi i64 [ %.pre7053, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1850, %omp.wsloop.region156 ]
  %.pre-phi7052 = phi i64 [ %.pre7051, %omp.wsloop.region154.omp.wsloop.region158.preheader_crit_edge ], [ %1849, %omp.wsloop.region156 ]
  %1879 = getelementptr double, ptr %.unpack5989, i64 %.pre-phi7062
  %1880 = getelementptr double, ptr %1879, i64 %230
  %1881 = getelementptr double, ptr %1880, i64 %.pre-phi7058
  %1882 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %1883 = getelementptr double, ptr %.unpack6013, i64 %.pre-phi7070
  %1884 = getelementptr double, ptr %1883, i64 %232
  %1885 = getelementptr double, ptr %1883, i64 %234
  %1886 = getelementptr double, ptr %1883, i64 %236
  %1887 = getelementptr double, ptr %1879, i64 %238
  %1888 = getelementptr double, ptr %1887, i64 %.pre-phi7058
  %1889 = getelementptr double, ptr %1883, i64 %240
  %1890 = getelementptr double, ptr %1881, i64 %241
  %1891 = load double, ptr %1890, align 8, !tbaa !14
  %1892 = add nsw i64 %.pre-phi7066, %246
  %1893 = getelementptr double, ptr %1884, i64 %1892
  %1894 = load double, ptr %1893, align 8, !tbaa !29
  %1895 = fmul contract double %1894, 5.000000e+00
  %1896 = getelementptr double, ptr %1885, i64 %1892
  %1897 = load double, ptr %1896, align 8, !tbaa !29
  %1898 = fmul contract double %1897, 4.000000e+00
  %1899 = fsub contract double %1895, %1898
  %1900 = getelementptr double, ptr %1886, i64 %1892
  %1901 = load double, ptr %1900, align 8, !tbaa !29
  %1902 = fadd contract double %1901, %1899
  %1903 = fmul contract double %1882, %1902
  %1904 = fsub contract double %1891, %1903
  store double %1904, ptr %1890, align 8, !tbaa !14
  %1905 = getelementptr double, ptr %1888, i64 %241
  %1906 = load double, ptr %1905, align 8, !tbaa !14
  %1907 = fmul contract double %1894, 4.000000e+00
  %1908 = fmul contract double %1897, 6.000000e+00
  %1909 = fsub contract double %1908, %1907
  %1910 = fmul contract double %1901, 4.000000e+00
  %1911 = fsub contract double %1909, %1910
  %1912 = getelementptr double, ptr %1889, i64 %1892
  %1913 = load double, ptr %1912, align 8, !tbaa !29
  %1914 = fadd contract double %1911, %1913
  %1915 = fmul contract double %1882, %1914
  %1916 = fsub contract double %1906, %1915
  store double %1916, ptr %1905, align 8, !tbaa !14
  %1917 = getelementptr double, ptr %1881, i64 %247
  %1918 = load double, ptr %1917, align 8, !tbaa !14
  %1919 = add nsw i64 %.pre-phi7066, %248
  %1920 = getelementptr double, ptr %1884, i64 %1919
  %1921 = load double, ptr %1920, align 8, !tbaa !29
  %1922 = fmul contract double %1921, 5.000000e+00
  %1923 = getelementptr double, ptr %1885, i64 %1919
  %1924 = load double, ptr %1923, align 8, !tbaa !29
  %1925 = fmul contract double %1924, 4.000000e+00
  %1926 = fsub contract double %1922, %1925
  %1927 = getelementptr double, ptr %1886, i64 %1919
  %1928 = load double, ptr %1927, align 8, !tbaa !29
  %1929 = fadd contract double %1928, %1926
  %1930 = fmul contract double %1882, %1929
  %1931 = fsub contract double %1918, %1930
  store double %1931, ptr %1917, align 8, !tbaa !14
  %1932 = getelementptr double, ptr %1888, i64 %247
  %1933 = load double, ptr %1932, align 8, !tbaa !14
  %1934 = fmul contract double %1921, 4.000000e+00
  %1935 = fmul contract double %1924, 6.000000e+00
  %1936 = fsub contract double %1935, %1934
  %1937 = fmul contract double %1928, 4.000000e+00
  %1938 = fsub contract double %1936, %1937
  %1939 = getelementptr double, ptr %1889, i64 %1919
  %1940 = load double, ptr %1939, align 8, !tbaa !29
  %1941 = fadd contract double %1938, %1940
  %1942 = fmul contract double %1882, %1941
  %1943 = fsub contract double %1933, %1942
  store double %1943, ptr %1932, align 8, !tbaa !14
  %1944 = getelementptr double, ptr %1881, i64 %249
  %1945 = load double, ptr %1944, align 8, !tbaa !14
  %1946 = add nsw i64 %.pre-phi7066, %250
  %1947 = getelementptr double, ptr %1884, i64 %1946
  %1948 = load double, ptr %1947, align 8, !tbaa !29
  %1949 = fmul contract double %1948, 5.000000e+00
  %1950 = getelementptr double, ptr %1885, i64 %1946
  %1951 = load double, ptr %1950, align 8, !tbaa !29
  %1952 = fmul contract double %1951, 4.000000e+00
  %1953 = fsub contract double %1949, %1952
  %1954 = getelementptr double, ptr %1886, i64 %1946
  %1955 = load double, ptr %1954, align 8, !tbaa !29
  %1956 = fadd contract double %1955, %1953
  %1957 = fmul contract double %1882, %1956
  %1958 = fsub contract double %1945, %1957
  store double %1958, ptr %1944, align 8, !tbaa !14
  %1959 = getelementptr double, ptr %1888, i64 %249
  %1960 = load double, ptr %1959, align 8, !tbaa !14
  %1961 = fmul contract double %1948, 4.000000e+00
  %1962 = fmul contract double %1951, 6.000000e+00
  %1963 = fsub contract double %1962, %1961
  %1964 = fmul contract double %1955, 4.000000e+00
  %1965 = fsub contract double %1963, %1964
  %1966 = getelementptr double, ptr %1889, i64 %1946
  %1967 = load double, ptr %1966, align 8, !tbaa !29
  %1968 = fadd contract double %1965, %1967
  %1969 = fmul contract double %1882, %1968
  %1970 = fsub contract double %1960, %1969
  store double %1970, ptr %1959, align 8, !tbaa !14
  %1971 = getelementptr double, ptr %1881, i64 %251
  %1972 = load double, ptr %1971, align 8, !tbaa !14
  %1973 = add nsw i64 %.pre-phi7066, %252
  %1974 = getelementptr double, ptr %1884, i64 %1973
  %1975 = load double, ptr %1974, align 8, !tbaa !29
  %1976 = fmul contract double %1975, 5.000000e+00
  %1977 = getelementptr double, ptr %1885, i64 %1973
  %1978 = load double, ptr %1977, align 8, !tbaa !29
  %1979 = fmul contract double %1978, 4.000000e+00
  %1980 = fsub contract double %1976, %1979
  %1981 = getelementptr double, ptr %1886, i64 %1973
  %1982 = load double, ptr %1981, align 8, !tbaa !29
  %1983 = fadd contract double %1982, %1980
  %1984 = fmul contract double %1882, %1983
  %1985 = fsub contract double %1972, %1984
  store double %1985, ptr %1971, align 8, !tbaa !14
  %1986 = getelementptr double, ptr %1888, i64 %251
  %1987 = load double, ptr %1986, align 8, !tbaa !14
  %1988 = fmul contract double %1975, 4.000000e+00
  %1989 = fmul contract double %1978, 6.000000e+00
  %1990 = fsub contract double %1989, %1988
  %1991 = fmul contract double %1982, 4.000000e+00
  %1992 = fsub contract double %1990, %1991
  %1993 = getelementptr double, ptr %1889, i64 %1973
  %1994 = load double, ptr %1993, align 8, !tbaa !29
  %1995 = fadd contract double %1992, %1994
  %1996 = fmul contract double %1882, %1995
  %1997 = fsub contract double %1987, %1996
  store double %1997, ptr %1986, align 8, !tbaa !14
  %1998 = getelementptr double, ptr %1881, i64 %253
  %1999 = load double, ptr %1998, align 8, !tbaa !14
  %2000 = add nsw i64 %.pre-phi7066, %254
  %2001 = getelementptr double, ptr %1884, i64 %2000
  %2002 = load double, ptr %2001, align 8, !tbaa !29
  %2003 = fmul contract double %2002, 5.000000e+00
  %2004 = getelementptr double, ptr %1885, i64 %2000
  %2005 = load double, ptr %2004, align 8, !tbaa !29
  %2006 = fmul contract double %2005, 4.000000e+00
  %2007 = fsub contract double %2003, %2006
  %2008 = getelementptr double, ptr %1886, i64 %2000
  %2009 = load double, ptr %2008, align 8, !tbaa !29
  %2010 = fadd contract double %2009, %2007
  %2011 = fmul contract double %1882, %2010
  %2012 = fsub contract double %1999, %2011
  store double %2012, ptr %1998, align 8, !tbaa !14
  %2013 = getelementptr double, ptr %1888, i64 %253
  %2014 = load double, ptr %2013, align 8, !tbaa !14
  %2015 = fmul contract double %2002, 4.000000e+00
  %2016 = fmul contract double %2005, 6.000000e+00
  %2017 = fsub contract double %2016, %2015
  %2018 = fmul contract double %2009, 4.000000e+00
  %2019 = fsub contract double %2017, %2018
  %2020 = getelementptr double, ptr %1889, i64 %2000
  %2021 = load double, ptr %2020, align 8, !tbaa !29
  %2022 = fadd contract double %2019, %2021
  %2023 = fmul contract double %1882, %2022
  %2024 = fsub contract double %2014, %2023
  store double %2024, ptr %2013, align 8, !tbaa !14
  %2025 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !10
  %2026 = add i32 %2025, -3
  %2027 = sext i32 %2026 to i64
  %2028 = icmp sgt i32 %2026, 3
  br i1 %2028, label %omp.wsloop.region163.preheader.lr.ph, label %omp.wsloop.region167.preheader

omp.wsloop.region163.preheader.lr.ph:             ; preds = %omp.wsloop.region158.preheader
  %invariant.gep6879 = getelementptr double, ptr %1879, i64 %.pre-phi7058
  %2029 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  br label %omp.wsloop.region163.preheader

omp.wsloop.region167.preheader:                   ; preds = %omp.wsloop.region163.preheader, %omp.wsloop.region158.preheader
  %2030 = add i32 %2025, -2
  %2031 = sext i32 %2030 to i64
  %2032 = sub nsw i64 %2031, %.unpack5996.unpack5998.unpack
  %2033 = mul nsw i64 %2032, %227
  %2034 = getelementptr double, ptr %1879, i64 %2033
  %2035 = getelementptr double, ptr %2034, i64 %.pre-phi7058
  %2036 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %2037 = add i32 %2025, -4
  %2038 = sext i32 %2037 to i64
  %2039 = sub nsw i64 %.pre-phi7052, %.unpack5501.unpack5502.unpack
  %2040 = mul nsw i64 %2039, %.unpack5501.unpack.unpack5506
  %2041 = sub nsw i64 %2038, %.unpack5501.unpack5503.unpack
  %2042 = mul nsw i64 %2041, %256
  %2043 = sub nsw i64 %.pre-phi7054, %.unpack5501.unpack5504.unpack
  %2044 = mul nsw i64 %257, %2043
  %2045 = getelementptr double, ptr %.unpack6013, i64 %2044
  %2046 = getelementptr double, ptr %2045, i64 %2042
  %2047 = sub nsw i64 %2027, %.unpack5501.unpack5503.unpack
  %2048 = mul nsw i64 %2047, %256
  %2049 = getelementptr double, ptr %2045, i64 %2048
  %2050 = sub nsw i64 %2031, %.unpack5501.unpack5503.unpack
  %2051 = mul nsw i64 %2050, %256
  %2052 = getelementptr double, ptr %2045, i64 %2051
  %2053 = add i32 %2025, -1
  %2054 = sext i32 %2053 to i64
  %2055 = sub nsw i64 %2054, %.unpack5501.unpack5503.unpack
  %2056 = mul nsw i64 %2055, %256
  %2057 = getelementptr double, ptr %2045, i64 %2056
  %2058 = sub nsw i64 %2054, %.unpack5996.unpack5998.unpack
  %2059 = mul nsw i64 %2058, %227
  %2060 = getelementptr double, ptr %1879, i64 %2059
  %2061 = getelementptr double, ptr %2060, i64 %.pre-phi7058
  %2062 = getelementptr double, ptr %2035, i64 %241
  %2063 = load double, ptr %2062, align 8, !tbaa !14
  %2064 = add nsw i64 %2040, %246
  %2065 = getelementptr double, ptr %2046, i64 %2064
  %2066 = load double, ptr %2065, align 8, !tbaa !29
  %2067 = getelementptr double, ptr %2049, i64 %2064
  %2068 = load double, ptr %2067, align 8, !tbaa !29
  %2069 = fmul contract double %2068, 4.000000e+00
  %2070 = fsub contract double %2066, %2069
  %2071 = getelementptr double, ptr %2052, i64 %2064
  %2072 = load double, ptr %2071, align 8, !tbaa !29
  %2073 = fmul contract double %2072, 6.000000e+00
  %2074 = fadd contract double %2070, %2073
  %2075 = getelementptr double, ptr %2057, i64 %2064
  %2076 = load double, ptr %2075, align 8, !tbaa !29
  %2077 = fmul contract double %2076, 4.000000e+00
  %2078 = fsub contract double %2074, %2077
  %2079 = fmul contract double %2036, %2078
  %2080 = fsub contract double %2063, %2079
  store double %2080, ptr %2062, align 8, !tbaa !14
  %2081 = getelementptr double, ptr %2061, i64 %241
  %2082 = load double, ptr %2081, align 8, !tbaa !14
  %2083 = fmul contract double %2072, 4.000000e+00
  %2084 = fsub contract double %2068, %2083
  %2085 = fmul contract double %2076, 5.000000e+00
  %2086 = fadd contract double %2084, %2085
  %2087 = fmul contract double %2036, %2086
  %2088 = fsub contract double %2082, %2087
  store double %2088, ptr %2081, align 8, !tbaa !14
  %2089 = getelementptr double, ptr %2035, i64 %247
  %2090 = load double, ptr %2089, align 8, !tbaa !14
  %2091 = add nsw i64 %2040, %248
  %2092 = getelementptr double, ptr %2046, i64 %2091
  %2093 = load double, ptr %2092, align 8, !tbaa !29
  %2094 = getelementptr double, ptr %2049, i64 %2091
  %2095 = load double, ptr %2094, align 8, !tbaa !29
  %2096 = fmul contract double %2095, 4.000000e+00
  %2097 = fsub contract double %2093, %2096
  %2098 = getelementptr double, ptr %2052, i64 %2091
  %2099 = load double, ptr %2098, align 8, !tbaa !29
  %2100 = fmul contract double %2099, 6.000000e+00
  %2101 = fadd contract double %2097, %2100
  %2102 = getelementptr double, ptr %2057, i64 %2091
  %2103 = load double, ptr %2102, align 8, !tbaa !29
  %2104 = fmul contract double %2103, 4.000000e+00
  %2105 = fsub contract double %2101, %2104
  %2106 = fmul contract double %2036, %2105
  %2107 = fsub contract double %2090, %2106
  store double %2107, ptr %2089, align 8, !tbaa !14
  %2108 = getelementptr double, ptr %2061, i64 %247
  %2109 = load double, ptr %2108, align 8, !tbaa !14
  %2110 = fmul contract double %2099, 4.000000e+00
  %2111 = fsub contract double %2095, %2110
  %2112 = fmul contract double %2103, 5.000000e+00
  %2113 = fadd contract double %2111, %2112
  %2114 = fmul contract double %2036, %2113
  %2115 = fsub contract double %2109, %2114
  store double %2115, ptr %2108, align 8, !tbaa !14
  %2116 = getelementptr double, ptr %2035, i64 %249
  %2117 = load double, ptr %2116, align 8, !tbaa !14
  %2118 = add nsw i64 %2040, %250
  %2119 = getelementptr double, ptr %2046, i64 %2118
  %2120 = load double, ptr %2119, align 8, !tbaa !29
  %2121 = getelementptr double, ptr %2049, i64 %2118
  %2122 = load double, ptr %2121, align 8, !tbaa !29
  %2123 = fmul contract double %2122, 4.000000e+00
  %2124 = fsub contract double %2120, %2123
  %2125 = getelementptr double, ptr %2052, i64 %2118
  %2126 = load double, ptr %2125, align 8, !tbaa !29
  %2127 = fmul contract double %2126, 6.000000e+00
  %2128 = fadd contract double %2124, %2127
  %2129 = getelementptr double, ptr %2057, i64 %2118
  %2130 = load double, ptr %2129, align 8, !tbaa !29
  %2131 = fmul contract double %2130, 4.000000e+00
  %2132 = fsub contract double %2128, %2131
  %2133 = fmul contract double %2036, %2132
  %2134 = fsub contract double %2117, %2133
  store double %2134, ptr %2116, align 8, !tbaa !14
  %2135 = getelementptr double, ptr %2061, i64 %249
  %2136 = load double, ptr %2135, align 8, !tbaa !14
  %2137 = fmul contract double %2126, 4.000000e+00
  %2138 = fsub contract double %2122, %2137
  %2139 = fmul contract double %2130, 5.000000e+00
  %2140 = fadd contract double %2138, %2139
  %2141 = fmul contract double %2036, %2140
  %2142 = fsub contract double %2136, %2141
  store double %2142, ptr %2135, align 8, !tbaa !14
  %2143 = getelementptr double, ptr %2035, i64 %251
  %2144 = load double, ptr %2143, align 8, !tbaa !14
  %2145 = add nsw i64 %2040, %252
  %2146 = getelementptr double, ptr %2046, i64 %2145
  %2147 = load double, ptr %2146, align 8, !tbaa !29
  %2148 = getelementptr double, ptr %2049, i64 %2145
  %2149 = load double, ptr %2148, align 8, !tbaa !29
  %2150 = fmul contract double %2149, 4.000000e+00
  %2151 = fsub contract double %2147, %2150
  %2152 = getelementptr double, ptr %2052, i64 %2145
  %2153 = load double, ptr %2152, align 8, !tbaa !29
  %2154 = fmul contract double %2153, 6.000000e+00
  %2155 = fadd contract double %2151, %2154
  %2156 = getelementptr double, ptr %2057, i64 %2145
  %2157 = load double, ptr %2156, align 8, !tbaa !29
  %2158 = fmul contract double %2157, 4.000000e+00
  %2159 = fsub contract double %2155, %2158
  %2160 = fmul contract double %2036, %2159
  %2161 = fsub contract double %2144, %2160
  store double %2161, ptr %2143, align 8, !tbaa !14
  %2162 = getelementptr double, ptr %2061, i64 %251
  %2163 = load double, ptr %2162, align 8, !tbaa !14
  %2164 = fmul contract double %2153, 4.000000e+00
  %2165 = fsub contract double %2149, %2164
  %2166 = fmul contract double %2157, 5.000000e+00
  %2167 = fadd contract double %2165, %2166
  %2168 = fmul contract double %2036, %2167
  %2169 = fsub contract double %2163, %2168
  store double %2169, ptr %2162, align 8, !tbaa !14
  %2170 = getelementptr double, ptr %2035, i64 %253
  %2171 = load double, ptr %2170, align 8, !tbaa !14
  %2172 = add nsw i64 %2040, %254
  %2173 = getelementptr double, ptr %2046, i64 %2172
  %2174 = load double, ptr %2173, align 8, !tbaa !29
  %2175 = getelementptr double, ptr %2049, i64 %2172
  %2176 = load double, ptr %2175, align 8, !tbaa !29
  %2177 = fmul contract double %2176, 4.000000e+00
  %2178 = fsub contract double %2174, %2177
  %2179 = getelementptr double, ptr %2052, i64 %2172
  %2180 = load double, ptr %2179, align 8, !tbaa !29
  %2181 = fmul contract double %2180, 6.000000e+00
  %2182 = fadd contract double %2178, %2181
  %2183 = getelementptr double, ptr %2057, i64 %2172
  %2184 = load double, ptr %2183, align 8, !tbaa !29
  %2185 = fmul contract double %2184, 4.000000e+00
  %2186 = fsub contract double %2182, %2185
  %2187 = fmul contract double %2036, %2186
  %2188 = fsub contract double %2171, %2187
  store double %2188, ptr %2170, align 8, !tbaa !14
  %2189 = getelementptr double, ptr %2061, i64 %253
  %2190 = load double, ptr %2189, align 8, !tbaa !14
  %2191 = fmul contract double %2180, 4.000000e+00
  %2192 = fsub contract double %2176, %2191
  %2193 = fmul contract double %2184, 5.000000e+00
  %2194 = fadd contract double %2192, %2193
  %2195 = fmul contract double %2036, %2194
  %2196 = fsub contract double %2190, %2195
  store double %2196, ptr %2189, align 8, !tbaa !14
  %omp_collapsed.next179 = add i32 %omp_collapsed.iv1776882, 1
  %exitcond6981.not = icmp eq i32 %omp_collapsed.iv1776882, %reass.sub6913
  br i1 %exitcond6981.not, label %omp_collapsed.exit175, label %omp_collapsed.body173

omp.wsloop.region163.preheader:                   ; preds = %omp.wsloop.region163.preheader.lr.ph, %omp.wsloop.region163.preheader
  %indvars.iv6973 = phi i64 [ 4, %omp.wsloop.region163.preheader.lr.ph ], [ %indvars.iv.next6974, %omp.wsloop.region163.preheader ]
  %2197 = sub nsw i64 %indvars.iv6973, %.unpack5996.unpack5998.unpack
  %2198 = mul nsw i64 %2197, %227
  %gep6880 = getelementptr double, ptr %invariant.gep6879, i64 %2198
  %2199 = add nsw i64 %indvars.iv6973, -2
  %2200 = sub nsw i64 %2199, %.unpack6020.unpack6022.unpack
  %2201 = mul nsw i64 %2200, %225
  %2202 = getelementptr double, ptr %1883, i64 %2201
  %2203 = add i64 %indvars.iv6973, %255
  %2204 = mul nsw i64 %2203, %225
  %2205 = getelementptr double, ptr %1883, i64 %2204
  %2206 = sub nsw i64 %indvars.iv6973, %.unpack6020.unpack6022.unpack
  %2207 = mul nsw i64 %2206, %225
  %2208 = getelementptr double, ptr %1883, i64 %2207
  %indvars.iv.next6974 = add nuw nsw i64 %indvars.iv6973, 1
  %sext7093 = shl i64 %indvars.iv.next6974, 32
  %2209 = ashr exact i64 %sext7093, 32
  %2210 = sub nsw i64 %2209, %.unpack6020.unpack6022.unpack
  %2211 = mul nsw i64 %2210, %225
  %2212 = getelementptr double, ptr %1883, i64 %2211
  %2213 = shl i64 %indvars.iv6973, 32
  %sext7094 = add i64 %2213, 8589934592
  %2214 = ashr exact i64 %sext7094, 32
  %2215 = sub nsw i64 %2214, %.unpack6020.unpack6022.unpack
  %2216 = mul nsw i64 %2215, %225
  %2217 = getelementptr double, ptr %1883, i64 %2216
  %2218 = getelementptr double, ptr %gep6880, i64 %241
  %2219 = load double, ptr %2218, align 8, !tbaa !14
  %2220 = getelementptr double, ptr %2202, i64 %1892
  %2221 = load double, ptr %2220, align 8, !tbaa !29
  %2222 = getelementptr double, ptr %2205, i64 %1892
  %2223 = load double, ptr %2222, align 8, !tbaa !29
  %2224 = fmul contract double %2223, 4.000000e+00
  %2225 = fsub contract double %2221, %2224
  %2226 = getelementptr double, ptr %2208, i64 %1892
  %2227 = load double, ptr %2226, align 8, !tbaa !29
  %2228 = fmul contract double %2227, 6.000000e+00
  %2229 = fadd contract double %2225, %2228
  %2230 = getelementptr double, ptr %2212, i64 %1892
  %2231 = load double, ptr %2230, align 8, !tbaa !29
  %2232 = fmul contract double %2231, 4.000000e+00
  %2233 = fsub contract double %2229, %2232
  %2234 = getelementptr double, ptr %2217, i64 %1892
  %2235 = load double, ptr %2234, align 8, !tbaa !29
  %2236 = fadd contract double %2235, %2233
  %2237 = fmul contract double %2029, %2236
  %2238 = fsub contract double %2219, %2237
  store double %2238, ptr %2218, align 8, !tbaa !14
  %2239 = getelementptr double, ptr %gep6880, i64 %247
  %2240 = load double, ptr %2239, align 8, !tbaa !14
  %2241 = getelementptr double, ptr %2202, i64 %1919
  %2242 = load double, ptr %2241, align 8, !tbaa !29
  %2243 = getelementptr double, ptr %2205, i64 %1919
  %2244 = load double, ptr %2243, align 8, !tbaa !29
  %2245 = fmul contract double %2244, 4.000000e+00
  %2246 = fsub contract double %2242, %2245
  %2247 = getelementptr double, ptr %2208, i64 %1919
  %2248 = load double, ptr %2247, align 8, !tbaa !29
  %2249 = fmul contract double %2248, 6.000000e+00
  %2250 = fadd contract double %2246, %2249
  %2251 = getelementptr double, ptr %2212, i64 %1919
  %2252 = load double, ptr %2251, align 8, !tbaa !29
  %2253 = fmul contract double %2252, 4.000000e+00
  %2254 = fsub contract double %2250, %2253
  %2255 = getelementptr double, ptr %2217, i64 %1919
  %2256 = load double, ptr %2255, align 8, !tbaa !29
  %2257 = fadd contract double %2256, %2254
  %2258 = fmul contract double %2029, %2257
  %2259 = fsub contract double %2240, %2258
  store double %2259, ptr %2239, align 8, !tbaa !14
  %2260 = getelementptr double, ptr %gep6880, i64 %249
  %2261 = load double, ptr %2260, align 8, !tbaa !14
  %2262 = getelementptr double, ptr %2202, i64 %1946
  %2263 = load double, ptr %2262, align 8, !tbaa !29
  %2264 = getelementptr double, ptr %2205, i64 %1946
  %2265 = load double, ptr %2264, align 8, !tbaa !29
  %2266 = fmul contract double %2265, 4.000000e+00
  %2267 = fsub contract double %2263, %2266
  %2268 = getelementptr double, ptr %2208, i64 %1946
  %2269 = load double, ptr %2268, align 8, !tbaa !29
  %2270 = fmul contract double %2269, 6.000000e+00
  %2271 = fadd contract double %2267, %2270
  %2272 = getelementptr double, ptr %2212, i64 %1946
  %2273 = load double, ptr %2272, align 8, !tbaa !29
  %2274 = fmul contract double %2273, 4.000000e+00
  %2275 = fsub contract double %2271, %2274
  %2276 = getelementptr double, ptr %2217, i64 %1946
  %2277 = load double, ptr %2276, align 8, !tbaa !29
  %2278 = fadd contract double %2277, %2275
  %2279 = fmul contract double %2029, %2278
  %2280 = fsub contract double %2261, %2279
  store double %2280, ptr %2260, align 8, !tbaa !14
  %2281 = getelementptr double, ptr %gep6880, i64 %251
  %2282 = load double, ptr %2281, align 8, !tbaa !14
  %2283 = getelementptr double, ptr %2202, i64 %1973
  %2284 = load double, ptr %2283, align 8, !tbaa !29
  %2285 = getelementptr double, ptr %2205, i64 %1973
  %2286 = load double, ptr %2285, align 8, !tbaa !29
  %2287 = fmul contract double %2286, 4.000000e+00
  %2288 = fsub contract double %2284, %2287
  %2289 = getelementptr double, ptr %2208, i64 %1973
  %2290 = load double, ptr %2289, align 8, !tbaa !29
  %2291 = fmul contract double %2290, 6.000000e+00
  %2292 = fadd contract double %2288, %2291
  %2293 = getelementptr double, ptr %2212, i64 %1973
  %2294 = load double, ptr %2293, align 8, !tbaa !29
  %2295 = fmul contract double %2294, 4.000000e+00
  %2296 = fsub contract double %2292, %2295
  %2297 = getelementptr double, ptr %2217, i64 %1973
  %2298 = load double, ptr %2297, align 8, !tbaa !29
  %2299 = fadd contract double %2298, %2296
  %2300 = fmul contract double %2029, %2299
  %2301 = fsub contract double %2282, %2300
  store double %2301, ptr %2281, align 8, !tbaa !14
  %2302 = getelementptr double, ptr %gep6880, i64 %253
  %2303 = load double, ptr %2302, align 8, !tbaa !14
  %2304 = getelementptr double, ptr %2202, i64 %2000
  %2305 = load double, ptr %2304, align 8, !tbaa !29
  %2306 = getelementptr double, ptr %2205, i64 %2000
  %2307 = load double, ptr %2306, align 8, !tbaa !29
  %2308 = fmul contract double %2307, 4.000000e+00
  %2309 = fsub contract double %2305, %2308
  %2310 = getelementptr double, ptr %2208, i64 %2000
  %2311 = load double, ptr %2310, align 8, !tbaa !29
  %2312 = fmul contract double %2311, 6.000000e+00
  %2313 = fadd contract double %2309, %2312
  %2314 = getelementptr double, ptr %2212, i64 %2000
  %2315 = load double, ptr %2314, align 8, !tbaa !29
  %2316 = fmul contract double %2315, 4.000000e+00
  %2317 = fsub contract double %2313, %2316
  %2318 = getelementptr double, ptr %2217, i64 %2000
  %2319 = load double, ptr %2318, align 8, !tbaa !29
  %2320 = fadd contract double %2319, %2317
  %2321 = fmul contract double %2029, %2320
  %2322 = fsub contract double %2303, %2321
  store double %2322, ptr %2302, align 8, !tbaa !14
  %exitcond6976.not = icmp eq i64 %indvars.iv6973, %2027
  br i1 %exitcond6976.not, label %omp.wsloop.region167.preheader, label %omp.wsloop.region163.preheader

omp.wsloop.region156:                             ; preds = %omp.wsloop.region156.lr.ph, %omp.wsloop.region156
  %2323 = phi i64 [ %1848, %omp.wsloop.region156.lr.ph ], [ %2438, %omp.wsloop.region156 ]
  %2324 = phi i32 [ %1846, %omp.wsloop.region156.lr.ph ], [ %2344, %omp.wsloop.region156 ]
  %2325 = sext i32 %2324 to i64
  %2326 = sub nsw i64 %2325, %.unpack5996.unpack5998.unpack
  %2327 = mul nsw i64 %2326, %227
  %gep6878 = getelementptr double, ptr %invariant.gep6877, i64 %2327
  %2328 = getelementptr i8, ptr %gep6878, i64 8
  %2329 = load double, ptr %2328, align 8, !tbaa !14
  %2330 = add i32 %2324, -1
  %2331 = sext i32 %2330 to i64
  %2332 = sub nsw i64 %2331, %.unpack6020.unpack6022.unpack
  %2333 = mul nsw i64 %2332, %225
  %2334 = getelementptr double, ptr %1864, i64 %2333
  %2335 = getelementptr double, ptr %2334, i64 %1861
  %2336 = load double, ptr %2335, align 8, !tbaa !29
  %2337 = sub nsw i64 %2325, %.unpack6020.unpack6022.unpack
  %2338 = mul nsw i64 %2337, %225
  %2339 = getelementptr double, ptr %1864, i64 %2338
  %2340 = getelementptr double, ptr %2339, i64 %1861
  %2341 = load double, ptr %2340, align 8, !tbaa !29
  %2342 = fmul contract double %2341, 2.000000e+00
  %2343 = fsub contract double %2336, %2342
  %2344 = add i32 %2324, 1
  %2345 = sext i32 %2344 to i64
  %2346 = sub nsw i64 %2345, %.unpack6020.unpack6022.unpack
  %2347 = mul nsw i64 %2346, %225
  %2348 = getelementptr double, ptr %1864, i64 %2347
  %2349 = getelementptr double, ptr %2348, i64 %1861
  %2350 = load double, ptr %2349, align 8, !tbaa !29
  %2351 = fadd contract double %2350, %2343
  %2352 = fmul contract double %1858, %2351
  %2353 = fadd contract double %2329, %2352
  store double %2353, ptr %2328, align 8, !tbaa !14
  %2354 = getelementptr i8, ptr %gep6878, i64 16
  %2355 = load double, ptr %2354, align 8, !tbaa !14
  %2356 = mul nsw i64 %2345, 5
  %2357 = getelementptr double, ptr %0, i64 %2356
  %2358 = getelementptr i8, ptr %2357, i64 -32
  %2359 = load double, ptr %2358, align 8, !tbaa !42
  %2360 = mul nsw i64 %2325, 5
  %2361 = getelementptr double, ptr %0, i64 %2360
  %2362 = getelementptr i8, ptr %2361, i64 -32
  %2363 = load double, ptr %2362, align 8, !tbaa !42
  %2364 = fsub contract double %2359, %2363
  %2365 = fmul contract double %1866, %2364
  %2366 = fadd contract double %2355, %2365
  %2367 = getelementptr double, ptr %2334, i64 %1869
  %2368 = load double, ptr %2367, align 8, !tbaa !29
  %2369 = getelementptr double, ptr %2339, i64 %1869
  %2370 = load double, ptr %2369, align 8, !tbaa !29
  %2371 = fmul contract double %2370, 2.000000e+00
  %2372 = fsub contract double %2368, %2371
  %2373 = getelementptr double, ptr %2348, i64 %1869
  %2374 = load double, ptr %2373, align 8, !tbaa !29
  %2375 = fadd contract double %2374, %2372
  %2376 = fmul contract double %1868, %2375
  %2377 = fadd contract double %2366, %2376
  store double %2377, ptr %2354, align 8, !tbaa !14
  %2378 = getelementptr i8, ptr %gep6878, i64 24
  %2379 = load double, ptr %2378, align 8, !tbaa !14
  %2380 = getelementptr i8, ptr %2357, i64 -24
  %2381 = load double, ptr %2380, align 8, !tbaa !42
  %2382 = getelementptr i8, ptr %2361, i64 -24
  %2383 = load double, ptr %2382, align 8, !tbaa !42
  %2384 = fsub contract double %2381, %2383
  %2385 = fmul contract double %1866, %2384
  %2386 = fadd contract double %2379, %2385
  %2387 = getelementptr double, ptr %2334, i64 %1872
  %2388 = load double, ptr %2387, align 8, !tbaa !29
  %2389 = getelementptr double, ptr %2339, i64 %1872
  %2390 = load double, ptr %2389, align 8, !tbaa !29
  %2391 = fmul contract double %2390, 2.000000e+00
  %2392 = fsub contract double %2388, %2391
  %2393 = getelementptr double, ptr %2348, i64 %1872
  %2394 = load double, ptr %2393, align 8, !tbaa !29
  %2395 = fadd contract double %2394, %2392
  %2396 = fmul contract double %1871, %2395
  %2397 = fadd contract double %2386, %2396
  store double %2397, ptr %2378, align 8, !tbaa !14
  %2398 = getelementptr i8, ptr %gep6878, i64 32
  %2399 = load double, ptr %2398, align 8, !tbaa !14
  %2400 = getelementptr i8, ptr %2357, i64 -16
  %2401 = load double, ptr %2400, align 8, !tbaa !42
  %2402 = getelementptr i8, ptr %2361, i64 -16
  %2403 = load double, ptr %2402, align 8, !tbaa !42
  %2404 = fsub contract double %2401, %2403
  %2405 = fmul contract double %1866, %2404
  %2406 = fadd contract double %2399, %2405
  %2407 = getelementptr double, ptr %2334, i64 %1875
  %2408 = load double, ptr %2407, align 8, !tbaa !29
  %2409 = getelementptr double, ptr %2339, i64 %1875
  %2410 = load double, ptr %2409, align 8, !tbaa !29
  %2411 = fmul contract double %2410, 2.000000e+00
  %2412 = fsub contract double %2408, %2411
  %2413 = getelementptr double, ptr %2348, i64 %1875
  %2414 = load double, ptr %2413, align 8, !tbaa !29
  %2415 = fadd contract double %2414, %2412
  %2416 = fmul contract double %1874, %2415
  %2417 = fadd contract double %2406, %2416
  store double %2417, ptr %2398, align 8, !tbaa !14
  %2418 = getelementptr i8, ptr %gep6878, i64 40
  %2419 = load double, ptr %2418, align 8, !tbaa !14
  %2420 = getelementptr i8, ptr %2357, i64 -8
  %2421 = load double, ptr %2420, align 8, !tbaa !42
  %2422 = getelementptr i8, ptr %2361, i64 -8
  %2423 = load double, ptr %2422, align 8, !tbaa !42
  %2424 = fsub contract double %2421, %2423
  %2425 = fmul contract double %1866, %2424
  %2426 = fadd contract double %2419, %2425
  %2427 = getelementptr double, ptr %2334, i64 %1878
  %2428 = load double, ptr %2427, align 8, !tbaa !29
  %2429 = getelementptr double, ptr %2339, i64 %1878
  %2430 = load double, ptr %2429, align 8, !tbaa !29
  %2431 = fmul contract double %2430, 2.000000e+00
  %2432 = fsub contract double %2428, %2431
  %2433 = getelementptr double, ptr %2348, i64 %1878
  %2434 = load double, ptr %2433, align 8, !tbaa !29
  %2435 = fadd contract double %2434, %2432
  %2436 = fmul contract double %1877, %2435
  %2437 = fadd contract double %2426, %2436
  store double %2437, ptr %2418, align 8, !tbaa !14
  %2438 = add nsw i64 %2323, -1
  %2439 = icmp ugt i64 %2323, 1
  br i1 %2439, label %omp.wsloop.region156, label %omp.wsloop.region158.preheader

omp.wsloop.region153:                             ; preds = %omp.wsloop.region153.preheader, %omp.wsloop.region153
  %2440 = phi i64 [ %2520, %omp.wsloop.region153 ], [ %.ph, %omp.wsloop.region153.preheader ]
  %2441 = phi i32 [ %2519, %omp.wsloop.region153 ], [ %.ph7768, %omp.wsloop.region153.preheader ]
  %2442 = sext i32 %2441 to i64
  %2443 = sub nsw i64 %2442, %.unpack6020.unpack6022.unpack
  %2444 = mul nsw i64 %2443, %225
  %2445 = getelementptr double, ptr %1609, i64 %2444
  %2446 = getelementptr double, ptr %2445, i64 %1606
  %2447 = load double, ptr %2446, align 8, !tbaa !29
  %2448 = fdiv contract double 1.000000e+00, %2447
  %2449 = getelementptr double, ptr %2445, i64 %1610
  %2450 = load double, ptr %2449, align 8, !tbaa !29
  %2451 = fmul contract double %2448, %2450
  %2452 = getelementptr double, ptr %2445, i64 %1611
  %2453 = load double, ptr %2452, align 8, !tbaa !29
  %2454 = fmul contract double %2448, %2453
  %2455 = getelementptr double, ptr %2445, i64 %1612
  %2456 = load double, ptr %2455, align 8, !tbaa !29
  %2457 = fmul contract double %2448, %2456
  %2458 = getelementptr double, ptr %2445, i64 %1613
  %2459 = load double, ptr %2458, align 8, !tbaa !29
  %2460 = fmul contract double %2448, %2459
  %2461 = add i32 %2441, -1
  %2462 = sext i32 %2461 to i64
  %2463 = sub nsw i64 %2462, %.unpack6020.unpack6022.unpack
  %2464 = mul nsw i64 %2463, %225
  %2465 = getelementptr double, ptr %1609, i64 %2464
  %2466 = getelementptr double, ptr %2465, i64 %1606
  %2467 = load double, ptr %2466, align 8, !tbaa !29
  %2468 = fdiv contract double 1.000000e+00, %2467
  %2469 = getelementptr double, ptr %2465, i64 %1610
  %2470 = load double, ptr %2469, align 8, !tbaa !29
  %2471 = fmul contract double %2468, %2470
  %2472 = getelementptr double, ptr %2465, i64 %1611
  %2473 = load double, ptr %2472, align 8, !tbaa !29
  %2474 = fmul contract double %2468, %2473
  %2475 = getelementptr double, ptr %2465, i64 %1612
  %2476 = load double, ptr %2475, align 8, !tbaa !29
  %2477 = fmul contract double %2468, %2476
  %2478 = getelementptr double, ptr %2465, i64 %1613
  %2479 = load double, ptr %2478, align 8, !tbaa !29
  %2480 = fmul contract double %2468, %2479
  %2481 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107
  %2482 = fsub contract double %2451, %2471
  %2483 = fmul contract double %2482, %2481
  %2484 = mul nsw i64 %2442, 5
  %2485 = getelementptr double, ptr %0, i64 %2484
  %2486 = getelementptr i8, ptr %2485, i64 -32
  store double %2483, ptr %2486, align 8, !tbaa !42
  %2487 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107
  %2488 = fmul contract double %2487, 0x3FF5555555555555
  %2489 = fsub contract double %2454, %2474
  %2490 = fmul contract double %2489, %2488
  %2491 = getelementptr i8, ptr %2485, i64 -24
  store double %2490, ptr %2491, align 8, !tbaa !42
  %2492 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107
  %2493 = fsub contract double %2457, %2477
  %2494 = fmul contract double %2493, %2492
  %2495 = getelementptr i8, ptr %2485, i64 -16
  store double %2494, ptr %2495, align 8, !tbaa !42
  %2496 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !107
  %2497 = fmul contract double %2496, 0x3FDEB851EB851EB6
  %2498 = fmul double %2451, %2451
  %2499 = fmul double %2454, %2454
  %2500 = fadd contract double %2498, %2499
  %2501 = fmul double %2457, %2457
  %2502 = fadd contract double %2500, %2501
  %2503 = fmul double %2471, %2471
  %2504 = fmul double %2474, %2474
  %2505 = fadd contract double %2503, %2504
  %2506 = fmul double %2477, %2477
  %2507 = fadd contract double %2505, %2506
  %2508 = fsub contract double %2502, %2507
  %2509 = fmul contract double %2508, %2497
  %2510 = fmul contract double %2496, 0x3FC5555555555555
  %2511 = fsub contract double %2499, %2504
  %2512 = fmul contract double %2511, %2510
  %2513 = fsub contract double %2512, %2509
  %2514 = fmul contract double %2496, 0x3FFF5C28F5C28F5B
  %2515 = fsub contract double %2460, %2480
  %2516 = fmul contract double %2515, %2514
  %2517 = fadd contract double %2516, %2513
  %2518 = getelementptr i8, ptr %2485, i64 -8
  store double %2517, ptr %2518, align 8, !tbaa !42
  %2519 = add i32 %2441, 1
  %2520 = add nsw i64 %2440, -1
  %2521 = icmp ugt i64 %2440, 1
  br i1 %2521, label %omp.wsloop.region153, label %omp.wsloop.region154.loopexit, !llvm.loop !148

omp.wsloop.region144:                             ; preds = %omp.wsloop.region144.preheader, %omp.wsloop.region144
  %indvars.iv6957 = phi i64 [ %indvars.iv.next6958, %omp.wsloop.region144 ], [ %indvars.iv6957.ph, %omp.wsloop.region144.preheader ]
  %2522 = sub nsw i64 %indvars.iv6957, %.unpack6020.unpack6022.unpack
  %2523 = mul nsw i64 %2522, %225
  %gep6870 = getelementptr double, ptr %invariant.gep6869, i64 %2523
  %2524 = getelementptr i8, ptr %gep6870, i64 24
  %2525 = load double, ptr %2524, align 8, !tbaa !29
  %2526 = mul nuw nsw i64 %indvars.iv6957, 5
  %2527 = getelementptr double, ptr %0, i64 %2526
  %2528 = getelementptr i8, ptr %2527, i64 -40
  store double %2525, ptr %2528, align 8, !tbaa !42
  %2529 = getelementptr i8, ptr %gep6870, i64 8
  %2530 = load double, ptr %2529, align 8, !tbaa !29
  %2531 = fdiv contract double %2525, %2530
  %2532 = getelementptr i8, ptr %gep6870, i64 16
  %2533 = load double, ptr %2532, align 8, !tbaa !29
  %2534 = fmul contract double %2533, %2533
  %2535 = fmul contract double %2525, %2525
  %2536 = fadd contract double %2535, %2534
  %2537 = getelementptr i8, ptr %gep6870, i64 32
  %2538 = load double, ptr %2537, align 8, !tbaa !29
  %2539 = fmul contract double %2538, %2538
  %2540 = fadd contract double %2536, %2539
  %2541 = fmul contract double %2540, 5.000000e-01
  %2542 = fdiv contract double %2541, %2530
  %2543 = fmul contract double %2533, %2531
  %2544 = getelementptr i8, ptr %2527, i64 -32
  store double %2543, ptr %2544, align 8, !tbaa !42
  %2545 = load double, ptr %2524, align 8, !tbaa !29
  %2546 = fmul contract double %2531, %2545
  %2547 = getelementptr i8, ptr %gep6870, i64 40
  %2548 = load double, ptr %2547, align 8, !tbaa !29
  %2549 = fsub contract double %2548, %2542
  %2550 = fmul contract double %2549, 4.000000e-01
  %2551 = fadd contract double %2546, %2550
  %2552 = getelementptr i8, ptr %2527, i64 -24
  store double %2551, ptr %2552, align 8, !tbaa !42
  %2553 = load double, ptr %2537, align 8, !tbaa !29
  %2554 = fmul contract double %2531, %2553
  %2555 = getelementptr i8, ptr %2527, i64 -16
  store double %2554, ptr %2555, align 8, !tbaa !42
  %2556 = load double, ptr %2547, align 8, !tbaa !29
  %2557 = fmul contract double %2556, 1.400000e+00
  %2558 = fmul contract double %2542, 4.000000e-01
  %2559 = fsub contract double %2557, %2558
  %2560 = fmul contract double %2531, %2559
  %2561 = getelementptr i8, ptr %2527, i64 -8
  store double %2560, ptr %2561, align 8, !tbaa !42
  %indvars.iv.next6958 = add nuw nsw i64 %indvars.iv6957, 1
  %exitcond6960.not = icmp eq i64 %indvars.iv.next6958, %1428
  br i1 %exitcond6960.not, label %omp.wsloop.region145, label %omp.wsloop.region144, !llvm.loop !149

omp_collapsed.body113:                            ; preds = %omp_collapsed.body113.lr.ph, %omp.wsloop.region107.preheader
  %omp_collapsed.iv1176868 = phi i32 [ 0, %omp_collapsed.body113.lr.ph ], [ %omp_collapsed.next119, %omp.wsloop.region107.preheader ]
  %2562 = add i32 %omp_collapsed.iv1176868, %156
  %2563 = urem i32 %2562, %153
  %2564 = udiv i32 %2562, %153
  %2565 = add i32 %2564, 2
  %2566 = add i32 %2563, %147
  %2567 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !12
  %2568 = icmp sgt i32 %2567, 0
  br i1 %2568, label %omp.wsloop.region84.lr.ph, label %omp.wsloop.region85

omp.wsloop.region84.lr.ph:                        ; preds = %omp_collapsed.body113
  %2569 = sext i32 %2566 to i64
  %2570 = sext i32 %2565 to i64
  %2571 = sub nsw i64 %2569, %.unpack6682.unpack6684.unpack
  %2572 = mul nsw i64 %2571, %158
  %2573 = sub nsw i64 %2570, %.unpack6682.unpack6685.unpack
  %2574 = mul nsw i64 %159, %2573
  %2575 = getelementptr double, ptr %.unpack6675, i64 %2574
  %2576 = getelementptr double, ptr %2575, i64 %2572
  %narrow = add nuw i32 %2567, 1
  %2577 = zext i32 %narrow to i64
  %2578 = add nsw i64 %2577, -1
  %min.iters.check7303 = icmp ult i32 %2567, 4
  br i1 %min.iters.check7303, label %omp.wsloop.region84.preheader, label %vector.memcheck7244

vector.memcheck7244:                              ; preds = %omp.wsloop.region84.lr.ph
  %2579 = mul nuw nsw i64 %2577, 40
  %scevgep7246 = getelementptr i8, ptr %scevgep7245, i64 %2579
  %2580 = mul i64 %202, %2573
  %2581 = sub i64 %2580, %207
  %2582 = shl nsw i64 %2569, 3
  %2583 = add i64 %2581, %2582
  %2584 = mul i64 %.unpack6682.unpack6683.unpack6690, %2583
  %reass.sub7761 = sub i64 %2584, %201
  %2585 = add i64 %reass.sub7761, -8
  %2586 = shl nuw nsw i64 %2577, 3
  %2587 = add i64 %2585, %2586
  %2588 = mul i64 %.unpack6682.unpack.unpack6687, %2587
  %scevgep7248 = getelementptr i8, ptr %scevgep7247, i64 %2588
  %reass.sub7762 = sub i64 %2584, %201
  %2589 = add i64 %reass.sub7762, 8
  %2590 = mul i64 %.unpack6682.unpack.unpack6687, %2589
  %scevgep7250 = getelementptr i8, ptr %scevgep7249, i64 %2590
  %2591 = icmp ult ptr %scevgep7248, %scevgep7250
  %umin7251 = select i1 %2591, ptr %scevgep7248, ptr %scevgep7250
  %2592 = icmp ugt ptr %scevgep7248, %scevgep7250
  %umax7252 = select i1 %2592, ptr %scevgep7248, ptr %scevgep7250
  %scevgep7253 = getelementptr i8, ptr %umax7252, i64 8
  %scevgep7255 = getelementptr i8, ptr %scevgep7254, i64 %2588
  %scevgep7257 = getelementptr i8, ptr %scevgep7256, i64 %2590
  %2593 = icmp ult ptr %scevgep7255, %scevgep7257
  %umin7258 = select i1 %2593, ptr %scevgep7255, ptr %scevgep7257
  %2594 = icmp ugt ptr %scevgep7255, %scevgep7257
  %umax7259 = select i1 %2594, ptr %scevgep7255, ptr %scevgep7257
  %scevgep7260 = getelementptr i8, ptr %umax7259, i64 8
  %scevgep7262 = getelementptr i8, ptr %scevgep7261, i64 %2588
  %scevgep7264 = getelementptr i8, ptr %scevgep7263, i64 %2590
  %2595 = icmp ult ptr %scevgep7262, %scevgep7264
  %umin7265 = select i1 %2595, ptr %scevgep7262, ptr %scevgep7264
  %2596 = icmp ugt ptr %scevgep7262, %scevgep7264
  %umax7266 = select i1 %2596, ptr %scevgep7262, ptr %scevgep7264
  %scevgep7267 = getelementptr i8, ptr %umax7266, i64 8
  %scevgep7269 = getelementptr i8, ptr %scevgep7268, i64 %2588
  %scevgep7271 = getelementptr i8, ptr %scevgep7270, i64 %2590
  %2597 = icmp ult ptr %scevgep7269, %scevgep7271
  %umin7272 = select i1 %2597, ptr %scevgep7269, ptr %scevgep7271
  %2598 = icmp ugt ptr %scevgep7269, %scevgep7271
  %umax7273 = select i1 %2598, ptr %scevgep7269, ptr %scevgep7271
  %scevgep7274 = getelementptr i8, ptr %umax7273, i64 8
  %scevgep7276 = getelementptr i8, ptr %scevgep7275, i64 %2588
  %scevgep7278 = getelementptr i8, ptr %scevgep7277, i64 %2590
  %2599 = icmp ult ptr %scevgep7276, %scevgep7278
  %umin7279 = select i1 %2599, ptr %scevgep7276, ptr %scevgep7278
  %2600 = icmp ugt ptr %scevgep7276, %scevgep7278
  %umax7280 = select i1 %2600, ptr %scevgep7276, ptr %scevgep7278
  %scevgep7281 = getelementptr i8, ptr %umax7280, i64 8
  %bound07282 = icmp ult ptr %0, %scevgep7253
  %bound17283 = icmp ult ptr %umin7251, %scevgep7246
  %found.conflict7284 = and i1 %bound07282, %bound17283
  %bound07285 = icmp ult ptr %0, %scevgep7260
  %bound17286 = icmp ult ptr %umin7258, %scevgep7246
  %found.conflict7287 = and i1 %bound07285, %bound17286
  %conflict.rdx7288 = or i1 %found.conflict7284, %found.conflict7287
  %bound07289 = icmp ult ptr %0, %scevgep7267
  %bound17290 = icmp ult ptr %umin7265, %scevgep7246
  %found.conflict7291 = and i1 %bound07289, %bound17290
  %conflict.rdx7292 = or i1 %conflict.rdx7288, %found.conflict7291
  %bound07293 = icmp ult ptr %0, %scevgep7274
  %bound17294 = icmp ult ptr %umin7272, %scevgep7246
  %found.conflict7295 = and i1 %bound07293, %bound17294
  %conflict.rdx7296 = or i1 %conflict.rdx7292, %found.conflict7295
  %bound07297 = icmp ult ptr %0, %scevgep7281
  %bound17298 = icmp ult ptr %umin7279, %scevgep7246
  %found.conflict7299 = and i1 %bound07297, %bound17298
  %conflict.rdx7300 = or i1 %conflict.rdx7296, %found.conflict7299
  br i1 %conflict.rdx7300, label %omp.wsloop.region84.preheader, label %vector.ph7304

vector.ph7304:                                    ; preds = %vector.memcheck7244
  %n.vec7306 = and i64 %2578, -2
  %ind.end7307 = or i64 %2578, 1
  br label %vector.body7310

vector.body7310:                                  ; preds = %vector.body7310, %vector.ph7304
  %index7311 = phi i64 [ 0, %vector.ph7304 ], [ %index.next7313, %vector.body7310 ]
  %offset.idx7312 = or disjoint i64 %index7311, 1
  %2601 = add i64 %index7311, 2
  %2602 = sub nsw i64 %offset.idx7312, %.unpack6682.unpack6683.unpack
  %2603 = sub nsw i64 %2601, %.unpack6682.unpack6683.unpack
  %2604 = mul nsw i64 %2602, %.unpack6682.unpack.unpack6687
  %2605 = mul nsw i64 %2603, %.unpack6682.unpack.unpack6687
  %2606 = sub i64 %2604, %.unpack6682.unpack.unpack
  %2607 = sub i64 %2605, %.unpack6682.unpack.unpack
  %2608 = getelementptr double, ptr %2576, i64 %2606
  %2609 = getelementptr double, ptr %2576, i64 %2607
  %2610 = getelementptr i8, ptr %2608, i64 16
  %2611 = getelementptr i8, ptr %2609, i64 16
  %2612 = load double, ptr %2610, align 8, !tbaa !29, !alias.scope !150
  %2613 = load double, ptr %2611, align 8, !tbaa !29, !alias.scope !150
  %2614 = insertelement <2 x double> poison, double %2612, i64 0
  %2615 = insertelement <2 x double> %2614, double %2613, i64 1
  %2616 = mul nuw nsw i64 %offset.idx7312, 5
  %2617 = getelementptr i8, ptr %2608, i64 8
  %2618 = getelementptr i8, ptr %2609, i64 8
  %2619 = load double, ptr %2617, align 8, !tbaa !29, !alias.scope !153
  %2620 = load double, ptr %2618, align 8, !tbaa !29, !alias.scope !153
  %2621 = insertelement <2 x double> poison, double %2619, i64 0
  %2622 = insertelement <2 x double> %2621, double %2620, i64 1
  %2623 = fdiv contract <2 x double> %2615, %2622
  %2624 = fmul contract <2 x double> %2615, %2615
  %2625 = getelementptr i8, ptr %2608, i64 24
  %2626 = getelementptr i8, ptr %2609, i64 24
  %2627 = load double, ptr %2625, align 8, !tbaa !29, !alias.scope !155
  %2628 = load double, ptr %2626, align 8, !tbaa !29, !alias.scope !155
  %2629 = insertelement <2 x double> poison, double %2627, i64 0
  %2630 = insertelement <2 x double> %2629, double %2628, i64 1
  %2631 = fmul contract <2 x double> %2630, %2630
  %2632 = fadd contract <2 x double> %2624, %2631
  %2633 = getelementptr i8, ptr %2608, i64 32
  %2634 = getelementptr i8, ptr %2609, i64 32
  %2635 = load double, ptr %2633, align 8, !tbaa !29, !alias.scope !157
  %2636 = load double, ptr %2634, align 8, !tbaa !29, !alias.scope !157
  %2637 = insertelement <2 x double> poison, double %2635, i64 0
  %2638 = insertelement <2 x double> %2637, double %2636, i64 1
  %2639 = fmul contract <2 x double> %2638, %2638
  %2640 = fadd contract <2 x double> %2632, %2639
  %2641 = fmul contract <2 x double> %2640, <double 5.000000e-01, double 5.000000e-01>
  %2642 = fdiv contract <2 x double> %2641, %2622
  %2643 = fmul contract <2 x double> %2615, %2623
  %2644 = getelementptr i8, ptr %2608, i64 40
  %2645 = getelementptr i8, ptr %2609, i64 40
  %2646 = load double, ptr %2644, align 8, !tbaa !29, !alias.scope !159
  %2647 = load double, ptr %2645, align 8, !tbaa !29, !alias.scope !159
  %2648 = insertelement <2 x double> poison, double %2646, i64 0
  %2649 = insertelement <2 x double> %2648, double %2647, i64 1
  %2650 = fsub contract <2 x double> %2649, %2642
  %2651 = fmul contract <2 x double> %2650, <double 4.000000e-01, double 4.000000e-01>
  %2652 = fadd contract <2 x double> %2643, %2651
  %2653 = load double, ptr %2625, align 8, !tbaa !29, !alias.scope !155
  %2654 = load double, ptr %2626, align 8, !tbaa !29, !alias.scope !155
  %2655 = insertelement <2 x double> poison, double %2653, i64 0
  %2656 = insertelement <2 x double> %2655, double %2654, i64 1
  %2657 = fmul contract <2 x double> %2623, %2656
  %2658 = load double, ptr %2633, align 8, !tbaa !29, !alias.scope !157
  %2659 = load double, ptr %2634, align 8, !tbaa !29, !alias.scope !157
  %2660 = insertelement <2 x double> poison, double %2658, i64 0
  %2661 = insertelement <2 x double> %2660, double %2659, i64 1
  %2662 = fmul contract <2 x double> %2623, %2661
  %2663 = load double, ptr %2644, align 8, !tbaa !29, !alias.scope !159
  %2664 = load double, ptr %2645, align 8, !tbaa !29, !alias.scope !159
  %2665 = insertelement <2 x double> poison, double %2663, i64 0
  %2666 = insertelement <2 x double> %2665, double %2664, i64 1
  %2667 = fmul contract <2 x double> %2666, <double 1.400000e+00, double 1.400000e+00>
  %2668 = fmul contract <2 x double> %2642, <double 4.000000e-01, double 4.000000e-01>
  %2669 = fsub contract <2 x double> %2667, %2668
  %2670 = fmul contract <2 x double> %2623, %2669
  %gep7772 = getelementptr double, ptr %invariant.gep7771, i64 %2616
  %2671 = shufflevector <2 x double> %2615, <2 x double> %2652, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2672 = shufflevector <2 x double> %2657, <2 x double> %2662, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2673 = shufflevector <4 x double> %2671, <4 x double> %2672, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2674 = shufflevector <2 x double> %2670, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec = shufflevector <8 x double> %2673, <8 x double> %2674, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec, ptr %gep7772, align 8, !tbaa !42
  %index.next7313 = add nuw i64 %index7311, 2
  %2675 = icmp eq i64 %index.next7313, %n.vec7306
  br i1 %2675, label %middle.block7301, label %vector.body7310, !llvm.loop !161

middle.block7301:                                 ; preds = %vector.body7310
  %cmp.n7309 = icmp eq i64 %2578, %n.vec7306
  br i1 %cmp.n7309, label %omp.wsloop.region85, label %omp.wsloop.region84.preheader

omp.wsloop.region84.preheader:                    ; preds = %vector.memcheck7244, %omp.wsloop.region84.lr.ph, %middle.block7301
  %indvars.iv6932.ph = phi i64 [ 1, %vector.memcheck7244 ], [ 1, %omp.wsloop.region84.lr.ph ], [ %ind.end7307, %middle.block7301 ]
  br label %omp.wsloop.region84

omp.wsloop.region85:                              ; preds = %omp.wsloop.region84, %middle.block7301, %omp_collapsed.body113
  %2676 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !25
  %2677 = sext i32 %2676 to i64
  %2678 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !27
  %2679 = sext i32 %2678 to i64
  %reass.sub6910 = sub nsw i64 %2679, %2677
  %2680 = icmp sgt i64 %reass.sub6910, -1
  br i1 %2680, label %omp.wsloop.region88.preheader.lr.ph, label %omp.wsloop.region91

omp.wsloop.region88.preheader.lr.ph:              ; preds = %omp.wsloop.region85
  %2681 = add nuw nsw i64 %reass.sub6910, 1
  %2682 = sext i32 %2566 to i64
  %2683 = sext i32 %2565 to i64
  %2684 = sub nsw i64 %2682, %.unpack6658.unpack6660.unpack
  %2685 = mul nsw i64 %2684, %160
  %2686 = sub nsw i64 %2683, %.unpack6658.unpack6661.unpack
  %2687 = mul nsw i64 %161, %2686
  %2688 = getelementptr double, ptr %.unpack6651, i64 %2687
  %2689 = getelementptr double, ptr %2688, i64 %2685
  %2690 = load double, ptr @_QMlu_dataEtx2, align 8, !tbaa !162
  br label %omp.wsloop.region88.preheader

omp.wsloop.region88.preheader:                    ; preds = %omp.wsloop.region88.preheader.lr.ph, %omp.wsloop.region88.preheader
  %2691 = phi i64 [ %2681, %omp.wsloop.region88.preheader.lr.ph ], [ %2746, %omp.wsloop.region88.preheader ]
  %2692 = phi i32 [ %2676, %omp.wsloop.region88.preheader.lr.ph ], [ %2697, %omp.wsloop.region88.preheader ]
  %2693 = sext i32 %2692 to i64
  %2694 = sub nsw i64 %2693, %.unpack6658.unpack6659.unpack
  %2695 = mul nsw i64 %2694, %.unpack6658.unpack.unpack6663
  %2696 = getelementptr double, ptr %2689, i64 %2695
  %2697 = add i32 %2692, 1
  %2698 = sext i32 %2697 to i64
  %2699 = mul nsw i64 %2698, 5
  %gep = getelementptr double, ptr %invariant.gep, i64 %2699
  %2700 = add i32 %2692, -1
  %2701 = sext i32 %2700 to i64
  %2702 = mul nsw i64 %2701, 5
  %gep6866 = getelementptr double, ptr %invariant.gep, i64 %2702
  %2703 = getelementptr double, ptr %2696, i64 %179
  %2704 = load double, ptr %2703, align 8, !tbaa !14
  %2705 = load double, ptr %gep, align 8, !tbaa !42
  %2706 = load double, ptr %gep6866, align 8, !tbaa !42
  %2707 = fsub contract double %2705, %2706
  %2708 = fmul contract double %2690, %2707
  %2709 = fsub contract double %2704, %2708
  store double %2709, ptr %2703, align 8, !tbaa !14
  %2710 = getelementptr double, ptr %2696, i64 %180
  %2711 = load double, ptr %2710, align 8, !tbaa !14
  %2712 = getelementptr i8, ptr %gep, i64 8
  %2713 = load double, ptr %2712, align 8, !tbaa !42
  %2714 = getelementptr i8, ptr %gep6866, i64 8
  %2715 = load double, ptr %2714, align 8, !tbaa !42
  %2716 = fsub contract double %2713, %2715
  %2717 = fmul contract double %2690, %2716
  %2718 = fsub contract double %2711, %2717
  store double %2718, ptr %2710, align 8, !tbaa !14
  %2719 = getelementptr double, ptr %2696, i64 %181
  %2720 = load double, ptr %2719, align 8, !tbaa !14
  %2721 = getelementptr i8, ptr %gep, i64 16
  %2722 = load double, ptr %2721, align 8, !tbaa !42
  %2723 = getelementptr i8, ptr %gep6866, i64 16
  %2724 = load double, ptr %2723, align 8, !tbaa !42
  %2725 = fsub contract double %2722, %2724
  %2726 = fmul contract double %2690, %2725
  %2727 = fsub contract double %2720, %2726
  store double %2727, ptr %2719, align 8, !tbaa !14
  %2728 = getelementptr double, ptr %2696, i64 %182
  %2729 = load double, ptr %2728, align 8, !tbaa !14
  %2730 = getelementptr i8, ptr %gep, i64 24
  %2731 = load double, ptr %2730, align 8, !tbaa !42
  %2732 = getelementptr i8, ptr %gep6866, i64 24
  %2733 = load double, ptr %2732, align 8, !tbaa !42
  %2734 = fsub contract double %2731, %2733
  %2735 = fmul contract double %2690, %2734
  %2736 = fsub contract double %2729, %2735
  store double %2736, ptr %2728, align 8, !tbaa !14
  %2737 = getelementptr double, ptr %2696, i64 %183
  %2738 = load double, ptr %2737, align 8, !tbaa !14
  %2739 = getelementptr i8, ptr %gep, i64 32
  %2740 = load double, ptr %2739, align 8, !tbaa !42
  %2741 = getelementptr i8, ptr %gep6866, i64 32
  %2742 = load double, ptr %2741, align 8, !tbaa !42
  %2743 = fsub contract double %2740, %2742
  %2744 = fmul contract double %2690, %2743
  %2745 = fsub contract double %2738, %2744
  store double %2745, ptr %2737, align 8, !tbaa !14
  %2746 = add nsw i64 %2691, -1
  %2747 = icmp ugt i64 %2691, 1
  br i1 %2747, label %omp.wsloop.region88.preheader, label %omp.wsloop.region91

omp.wsloop.region91:                              ; preds = %omp.wsloop.region88.preheader, %omp.wsloop.region85
  %2748 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !12
  %2749 = sext i32 %2748 to i64
  %reass.sub6911 = sub nsw i64 %2749, %2677
  %2750 = icmp sgt i64 %reass.sub6911, -1
  br i1 %2750, label %omp.wsloop.region93.lr.ph, label %omp.wsloop.region94

omp.wsloop.region93.lr.ph:                        ; preds = %omp.wsloop.region91
  %2751 = add nuw nsw i64 %reass.sub6911, 1
  %2752 = sext i32 %2566 to i64
  %2753 = sext i32 %2565 to i64
  %2754 = sub nsw i64 %2752, %.unpack6682.unpack6684.unpack
  %2755 = mul nsw i64 %2754, %158
  %2756 = sub i64 %2753, %.unpack6682.unpack6685.unpack
  %2757 = mul nsw i64 %159, %2756
  %2758 = getelementptr double, ptr %.unpack6675, i64 %2757
  %2759 = getelementptr double, ptr %2758, i64 %2755
  %2760 = add nsw i64 %2749, 1
  %2761 = sub nsw i64 %2760, %2677
  %min.iters.check = icmp ult i64 %2761, 6
  br i1 %min.iters.check, label %omp.wsloop.region93.preheader, label %vector.scevcheck

vector.scevcheck:                                 ; preds = %omp.wsloop.region93.lr.ph
  %2762 = sub nsw i64 %2749, %2677
  %2763 = trunc i64 %2762 to i32
  %2764 = add i32 %2676, %2763
  %2765 = icmp slt i32 %2764, %2676
  %2766 = add i32 %2676, -1
  %2767 = trunc i64 %2762 to i32
  %2768 = add i32 %2766, %2767
  %2769 = icmp slt i32 %2768, %2766
  %2770 = icmp ugt i64 %2762, 4294967295
  %2771 = or i1 %2769, %2770
  %2772 = mul nsw i64 %2677, 40
  %scevgep7105 = getelementptr i8, ptr %scevgep, i64 %2772
  %mul = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2762, i64 40)
  %mul.result = extractvalue { i64, i1 } %mul, 0
  %mul.overflow = extractvalue { i64, i1 } %mul, 1
  %2773 = getelementptr i8, ptr %scevgep7105, i64 %mul.result
  %2774 = icmp ult ptr %2773, %scevgep7105
  %2775 = or i1 %2774, %mul.overflow
  %scevgep7107 = getelementptr i8, ptr %scevgep7106, i64 %2772
  %mul7108 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2762, i64 40)
  %mul.result7109 = extractvalue { i64, i1 } %mul7108, 0
  %mul.overflow7110 = extractvalue { i64, i1 } %mul7108, 1
  %2776 = getelementptr i8, ptr %scevgep7107, i64 %mul.result7109
  %2777 = icmp ult ptr %2776, %scevgep7107
  %2778 = or i1 %2777, %mul.overflow7110
  %scevgep7112 = getelementptr i8, ptr %scevgep7111, i64 %2772
  %mul7113 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2762, i64 40)
  %mul.result7114 = extractvalue { i64, i1 } %mul7113, 0
  %mul.overflow7115 = extractvalue { i64, i1 } %mul7113, 1
  %2779 = getelementptr i8, ptr %scevgep7112, i64 %mul.result7114
  %2780 = icmp ult ptr %2779, %scevgep7112
  %2781 = or i1 %2780, %mul.overflow7115
  %scevgep7117 = getelementptr i8, ptr %scevgep7116, i64 %2772
  %mul7118 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2762, i64 40)
  %mul.result7119 = extractvalue { i64, i1 } %mul7118, 0
  %mul.overflow7120 = extractvalue { i64, i1 } %mul7118, 1
  %2782 = getelementptr i8, ptr %scevgep7117, i64 %mul.result7119
  %2783 = icmp ult ptr %2782, %scevgep7117
  %2784 = or i1 %2783, %mul.overflow7120
  %2785 = or i1 %2765, %2771
  %2786 = or i1 %2785, %2775
  %2787 = or i1 %2786, %2778
  %2788 = or i1 %2787, %2781
  %2789 = or i1 %2788, %2784
  br i1 %2789, label %omp.wsloop.region93.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %vector.scevcheck
  %2790 = mul nsw i64 %2677, 40
  %scevgep7122 = getelementptr i8, ptr %scevgep7121, i64 %2790
  %2791 = mul nsw i64 %2749, 40
  %scevgep7125 = getelementptr i8, ptr %0, i64 %2791
  %2792 = mul i64 %193, %2756
  %2793 = sub i64 %2792, %208
  %2794 = shl nsw i64 %2752, 3
  %2795 = add i64 %2793, %2794
  %2796 = mul i64 %.unpack6682.unpack6683.unpack6690, %2795
  %2797 = add i64 %2796, 8
  %2798 = add i32 %2676, -1
  %2799 = sext i32 %2798 to i64
  %2800 = add nsw i64 %2749, %2799
  %2801 = shl nsw i64 %2800, 3
  %2802 = add i64 %2797, %2801
  %2803 = add i64 %209, %2677
  %2804 = shl i64 %2803, 3
  %2805 = sub i64 %2802, %2804
  %2806 = mul i64 %.unpack6682.unpack.unpack6687, %2805
  %scevgep7127 = getelementptr i8, ptr %scevgep7126, i64 %2806
  %2807 = add i64 %194, %2796
  %2808 = shl nsw i64 %2799, 3
  %2809 = add i64 %2807, %2808
  %2810 = mul i64 %.unpack6682.unpack.unpack6687, %2809
  %scevgep7129 = getelementptr i8, ptr %scevgep7128, i64 %2810
  %2811 = icmp ult ptr %scevgep7127, %scevgep7129
  %umin7130 = select i1 %2811, ptr %scevgep7127, ptr %scevgep7129
  %2812 = icmp ugt ptr %scevgep7127, %scevgep7129
  %umax = select i1 %2812, ptr %scevgep7127, ptr %scevgep7129
  %scevgep7131 = getelementptr i8, ptr %umax, i64 8
  %scevgep7133 = getelementptr i8, ptr %scevgep7132, i64 %2806
  %scevgep7135 = getelementptr i8, ptr %scevgep7134, i64 %2810
  %2813 = icmp ult ptr %scevgep7133, %scevgep7135
  %umin7136 = select i1 %2813, ptr %scevgep7133, ptr %scevgep7135
  %2814 = icmp ugt ptr %scevgep7133, %scevgep7135
  %umax7137 = select i1 %2814, ptr %scevgep7133, ptr %scevgep7135
  %scevgep7138 = getelementptr i8, ptr %umax7137, i64 8
  %scevgep7140 = getelementptr i8, ptr %scevgep7139, i64 %2806
  %scevgep7142 = getelementptr i8, ptr %scevgep7141, i64 %2810
  %2815 = icmp ult ptr %scevgep7140, %scevgep7142
  %umin7143 = select i1 %2815, ptr %scevgep7140, ptr %scevgep7142
  %2816 = icmp ugt ptr %scevgep7140, %scevgep7142
  %umax7144 = select i1 %2816, ptr %scevgep7140, ptr %scevgep7142
  %scevgep7145 = getelementptr i8, ptr %umax7144, i64 8
  %scevgep7147 = getelementptr i8, ptr %scevgep7146, i64 %2806
  %scevgep7149 = getelementptr i8, ptr %scevgep7148, i64 %2810
  %2817 = icmp ult ptr %scevgep7147, %scevgep7149
  %umin7150 = select i1 %2817, ptr %scevgep7147, ptr %scevgep7149
  %2818 = icmp ugt ptr %scevgep7147, %scevgep7149
  %umax7151 = select i1 %2818, ptr %scevgep7147, ptr %scevgep7149
  %scevgep7152 = getelementptr i8, ptr %umax7151, i64 8
  %scevgep7154 = getelementptr i8, ptr %scevgep7153, i64 %2806
  %scevgep7156 = getelementptr i8, ptr %scevgep7155, i64 %2810
  %2819 = icmp ult ptr %scevgep7154, %scevgep7156
  %umin7157 = select i1 %2819, ptr %scevgep7154, ptr %scevgep7156
  %2820 = icmp ugt ptr %scevgep7154, %scevgep7156
  %umax7158 = select i1 %2820, ptr %scevgep7154, ptr %scevgep7156
  %scevgep7159 = getelementptr i8, ptr %umax7158, i64 8
  %2821 = add i64 %2796, 8
  %2822 = shl nsw i64 %2749, 3
  %2823 = add i64 %2821, %2822
  %2824 = sub i64 %2823, %211
  %2825 = mul i64 %.unpack6682.unpack.unpack6687, %2824
  %scevgep7161 = getelementptr i8, ptr %scevgep7160, i64 %2825
  %2826 = add i64 %194, %2796
  %2827 = shl nsw i64 %2677, 3
  %2828 = add i64 %2826, %2827
  %2829 = mul i64 %.unpack6682.unpack.unpack6687, %2828
  %scevgep7163 = getelementptr i8, ptr %scevgep7162, i64 %2829
  %2830 = icmp ult ptr %scevgep7161, %scevgep7163
  %umin7164 = select i1 %2830, ptr %scevgep7161, ptr %scevgep7163
  %2831 = icmp ugt ptr %scevgep7161, %scevgep7163
  %umax7165 = select i1 %2831, ptr %scevgep7161, ptr %scevgep7163
  %scevgep7166 = getelementptr i8, ptr %umax7165, i64 8
  %scevgep7168 = getelementptr i8, ptr %scevgep7167, i64 %2825
  %scevgep7170 = getelementptr i8, ptr %scevgep7169, i64 %2829
  %2832 = icmp ult ptr %scevgep7168, %scevgep7170
  %umin7171 = select i1 %2832, ptr %scevgep7168, ptr %scevgep7170
  %2833 = icmp ugt ptr %scevgep7168, %scevgep7170
  %umax7172 = select i1 %2833, ptr %scevgep7168, ptr %scevgep7170
  %scevgep7173 = getelementptr i8, ptr %umax7172, i64 8
  %scevgep7175 = getelementptr i8, ptr %scevgep7174, i64 %2825
  %scevgep7177 = getelementptr i8, ptr %scevgep7176, i64 %2829
  %2834 = icmp ult ptr %scevgep7175, %scevgep7177
  %umin7178 = select i1 %2834, ptr %scevgep7175, ptr %scevgep7177
  %2835 = icmp ugt ptr %scevgep7175, %scevgep7177
  %umax7179 = select i1 %2835, ptr %scevgep7175, ptr %scevgep7177
  %scevgep7180 = getelementptr i8, ptr %umax7179, i64 8
  %scevgep7182 = getelementptr i8, ptr %scevgep7181, i64 %2825
  %scevgep7184 = getelementptr i8, ptr %scevgep7183, i64 %2829
  %2836 = icmp ult ptr %scevgep7182, %scevgep7184
  %umin7185 = select i1 %2836, ptr %scevgep7182, ptr %scevgep7184
  %2837 = icmp ugt ptr %scevgep7182, %scevgep7184
  %umax7186 = select i1 %2837, ptr %scevgep7182, ptr %scevgep7184
  %scevgep7187 = getelementptr i8, ptr %umax7186, i64 8
  %scevgep7189 = getelementptr i8, ptr %scevgep7188, i64 %2825
  %scevgep7191 = getelementptr i8, ptr %scevgep7190, i64 %2829
  %2838 = icmp ult ptr %scevgep7189, %scevgep7191
  %umin7192 = select i1 %2838, ptr %scevgep7189, ptr %scevgep7191
  %2839 = icmp ugt ptr %scevgep7189, %scevgep7191
  %umax7193 = select i1 %2839, ptr %scevgep7189, ptr %scevgep7191
  %scevgep7194 = getelementptr i8, ptr %umax7193, i64 8
  %bound0 = icmp ugt ptr %scevgep7125, @_QMlu_dataEtx3
  %bound1 = icmp ult ptr %scevgep7122, getelementptr inbounds (double, ptr @_QMlu_dataEtx3, i64 1)
  %found.conflict = and i1 %bound0, %bound1
  %bound07195 = icmp ult ptr %scevgep7122, %scevgep7131
  %bound17196 = icmp ult ptr %umin7130, %scevgep7125
  %found.conflict7197 = and i1 %bound07195, %bound17196
  %conflict.rdx = or i1 %found.conflict, %found.conflict7197
  %bound07198 = icmp ult ptr %scevgep7122, %scevgep7138
  %bound17199 = icmp ult ptr %umin7136, %scevgep7125
  %found.conflict7200 = and i1 %bound07198, %bound17199
  %conflict.rdx7201 = or i1 %conflict.rdx, %found.conflict7200
  %bound07202 = icmp ult ptr %scevgep7122, %scevgep7145
  %bound17203 = icmp ult ptr %umin7143, %scevgep7125
  %found.conflict7204 = and i1 %bound07202, %bound17203
  %conflict.rdx7205 = or i1 %conflict.rdx7201, %found.conflict7204
  %bound07206 = icmp ult ptr %scevgep7122, %scevgep7152
  %bound17207 = icmp ult ptr %umin7150, %scevgep7125
  %found.conflict7208 = and i1 %bound07206, %bound17207
  %conflict.rdx7209 = or i1 %conflict.rdx7205, %found.conflict7208
  %bound07210 = icmp ult ptr %scevgep7122, %scevgep7159
  %bound17211 = icmp ult ptr %umin7157, %scevgep7125
  %found.conflict7212 = and i1 %bound07210, %bound17211
  %conflict.rdx7213 = or i1 %conflict.rdx7209, %found.conflict7212
  %bound07214 = icmp ult ptr %scevgep7122, %scevgep7166
  %bound17215 = icmp ult ptr %umin7164, %scevgep7125
  %found.conflict7216 = and i1 %bound07214, %bound17215
  %conflict.rdx7217 = or i1 %conflict.rdx7213, %found.conflict7216
  %bound07218 = icmp ult ptr %scevgep7122, %scevgep7173
  %bound17219 = icmp ult ptr %umin7171, %scevgep7125
  %found.conflict7220 = and i1 %bound07218, %bound17219
  %conflict.rdx7221 = or i1 %conflict.rdx7217, %found.conflict7220
  %bound07222 = icmp ult ptr %scevgep7122, %scevgep7180
  %bound17223 = icmp ult ptr %umin7178, %scevgep7125
  %found.conflict7224 = and i1 %bound07222, %bound17223
  %conflict.rdx7225 = or i1 %conflict.rdx7221, %found.conflict7224
  %bound07226 = icmp ult ptr %scevgep7122, %scevgep7187
  %bound17227 = icmp ult ptr %umin7185, %scevgep7125
  %found.conflict7228 = and i1 %bound07226, %bound17227
  %conflict.rdx7229 = or i1 %conflict.rdx7225, %found.conflict7228
  %bound07230 = icmp ult ptr %scevgep7122, %scevgep7194
  %bound17231 = icmp ult ptr %umin7192, %scevgep7125
  %found.conflict7232 = and i1 %bound07230, %bound17231
  %conflict.rdx7233 = or i1 %conflict.rdx7229, %found.conflict7232
  br i1 %conflict.rdx7233, label %omp.wsloop.region93.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %2761, -2
  %ind.end = sub nsw i64 %2751, %n.vec
  %.cast = trunc i64 %n.vec to i32
  %ind.end7235 = add i32 %2676, %.cast
  %2840 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164, !alias.scope !166, !noalias !169
  %broadcast.splatinsert = insertelement <2 x double> poison, double %2840, i64 0
  %2841 = fmul contract <2 x double> %broadcast.splatinsert, <double 0x3FF5555555555555, double poison>
  %2842 = shufflevector <2 x double> %2841, <2 x double> poison, <2 x i32> zeroinitializer
  %2843 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164, !alias.scope !166, !noalias !169
  %broadcast.splatinsert7238 = insertelement <2 x double> poison, double %2843, i64 0
  %broadcast.splat7239 = shufflevector <2 x double> %broadcast.splatinsert7238, <2 x double> poison, <2 x i32> zeroinitializer
  %2844 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164, !alias.scope !166, !noalias !169
  %broadcast.splatinsert7240 = insertelement <2 x double> poison, double %2844, i64 0
  %broadcast.splat7241 = shufflevector <2 x double> %broadcast.splatinsert7240, <2 x double> poison, <2 x i32> zeroinitializer
  %2845 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164, !alias.scope !166, !noalias !169
  %broadcast.splatinsert7242 = insertelement <2 x double> poison, double %2845, i64 0
  %broadcast.splat7243 = shufflevector <2 x double> %broadcast.splatinsert7242, <2 x double> poison, <2 x i32> zeroinitializer
  %2846 = fmul contract <2 x double> %broadcast.splat7243, <double 0x3FDEB851EB851EB6, double 0x3FDEB851EB851EB6>
  %2847 = fmul contract <2 x double> %broadcast.splat7243, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %2848 = fmul contract <2 x double> %broadcast.splat7243, <double 0x3FFF5C28F5C28F5B, double 0x3FFF5C28F5C28F5B>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %.cast7237 = trunc i64 %index to i32
  %offset.idx = add i32 %2676, %.cast7237
  %2849 = add i32 %offset.idx, 1
  %2850 = sext i32 %offset.idx to i64
  %2851 = sext i32 %2849 to i64
  %2852 = sub nsw i64 %2850, %.unpack6682.unpack6683.unpack
  %2853 = sub nsw i64 %2851, %.unpack6682.unpack6683.unpack
  %2854 = mul nsw i64 %2852, %.unpack6682.unpack.unpack6687
  %2855 = mul nsw i64 %2853, %.unpack6682.unpack.unpack6687
  %2856 = getelementptr double, ptr %2759, i64 %2854
  %2857 = getelementptr double, ptr %2759, i64 %2855
  %2858 = getelementptr double, ptr %2856, i64 %162
  %2859 = getelementptr double, ptr %2857, i64 %162
  %2860 = load double, ptr %2858, align 8, !tbaa !29, !alias.scope !171
  %2861 = load double, ptr %2859, align 8, !tbaa !29, !alias.scope !171
  %2862 = insertelement <2 x double> poison, double %2860, i64 0
  %2863 = insertelement <2 x double> %2862, double %2861, i64 1
  %2864 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %2863
  %2865 = getelementptr double, ptr %2856, i64 %163
  %2866 = getelementptr double, ptr %2857, i64 %163
  %2867 = load double, ptr %2865, align 8, !tbaa !29, !alias.scope !173
  %2868 = load double, ptr %2866, align 8, !tbaa !29, !alias.scope !173
  %2869 = insertelement <2 x double> poison, double %2867, i64 0
  %2870 = insertelement <2 x double> %2869, double %2868, i64 1
  %2871 = fmul contract <2 x double> %2864, %2870
  %2872 = getelementptr double, ptr %2856, i64 %164
  %2873 = getelementptr double, ptr %2857, i64 %164
  %2874 = load double, ptr %2872, align 8, !tbaa !29, !alias.scope !175
  %2875 = load double, ptr %2873, align 8, !tbaa !29, !alias.scope !175
  %2876 = insertelement <2 x double> poison, double %2874, i64 0
  %2877 = insertelement <2 x double> %2876, double %2875, i64 1
  %2878 = fmul contract <2 x double> %2864, %2877
  %2879 = getelementptr double, ptr %2856, i64 %165
  %2880 = getelementptr double, ptr %2857, i64 %165
  %2881 = load double, ptr %2879, align 8, !tbaa !29, !alias.scope !177
  %2882 = load double, ptr %2880, align 8, !tbaa !29, !alias.scope !177
  %2883 = insertelement <2 x double> poison, double %2881, i64 0
  %2884 = insertelement <2 x double> %2883, double %2882, i64 1
  %2885 = fmul contract <2 x double> %2864, %2884
  %2886 = getelementptr double, ptr %2856, i64 %166
  %2887 = getelementptr double, ptr %2857, i64 %166
  %2888 = load double, ptr %2886, align 8, !tbaa !29, !alias.scope !179
  %2889 = load double, ptr %2887, align 8, !tbaa !29, !alias.scope !179
  %2890 = insertelement <2 x double> poison, double %2888, i64 0
  %2891 = insertelement <2 x double> %2890, double %2889, i64 1
  %2892 = fmul contract <2 x double> %2864, %2891
  %2893 = add i32 %offset.idx, -1
  %2894 = sext i32 %2893 to i64
  %2895 = sext i32 %offset.idx to i64
  %2896 = sub nsw i64 %2894, %.unpack6682.unpack6683.unpack
  %2897 = sub nsw i64 %2895, %.unpack6682.unpack6683.unpack
  %2898 = mul nsw i64 %2896, %.unpack6682.unpack.unpack6687
  %2899 = mul nsw i64 %2897, %.unpack6682.unpack.unpack6687
  %2900 = getelementptr double, ptr %2759, i64 %2898
  %2901 = getelementptr double, ptr %2759, i64 %2899
  %2902 = getelementptr double, ptr %2900, i64 %162
  %2903 = getelementptr double, ptr %2901, i64 %162
  %2904 = load double, ptr %2902, align 8, !tbaa !29, !alias.scope !181
  %2905 = load double, ptr %2903, align 8, !tbaa !29, !alias.scope !181
  %2906 = insertelement <2 x double> poison, double %2904, i64 0
  %2907 = insertelement <2 x double> %2906, double %2905, i64 1
  %2908 = fdiv contract <2 x double> <double 1.000000e+00, double 1.000000e+00>, %2907
  %2909 = getelementptr double, ptr %2900, i64 %163
  %2910 = getelementptr double, ptr %2901, i64 %163
  %2911 = load double, ptr %2909, align 8, !tbaa !29, !alias.scope !183
  %2912 = load double, ptr %2910, align 8, !tbaa !29, !alias.scope !183
  %2913 = insertelement <2 x double> poison, double %2911, i64 0
  %2914 = insertelement <2 x double> %2913, double %2912, i64 1
  %2915 = fmul contract <2 x double> %2908, %2914
  %2916 = getelementptr double, ptr %2900, i64 %164
  %2917 = getelementptr double, ptr %2901, i64 %164
  %2918 = load double, ptr %2916, align 8, !tbaa !29, !alias.scope !185
  %2919 = load double, ptr %2917, align 8, !tbaa !29, !alias.scope !185
  %2920 = insertelement <2 x double> poison, double %2918, i64 0
  %2921 = insertelement <2 x double> %2920, double %2919, i64 1
  %2922 = fmul contract <2 x double> %2908, %2921
  %2923 = getelementptr double, ptr %2900, i64 %165
  %2924 = getelementptr double, ptr %2901, i64 %165
  %2925 = load double, ptr %2923, align 8, !tbaa !29, !alias.scope !187
  %2926 = load double, ptr %2924, align 8, !tbaa !29, !alias.scope !187
  %2927 = insertelement <2 x double> poison, double %2925, i64 0
  %2928 = insertelement <2 x double> %2927, double %2926, i64 1
  %2929 = fmul contract <2 x double> %2908, %2928
  %2930 = getelementptr double, ptr %2900, i64 %166
  %2931 = getelementptr double, ptr %2901, i64 %166
  %2932 = load double, ptr %2930, align 8, !tbaa !29, !alias.scope !189
  %2933 = load double, ptr %2931, align 8, !tbaa !29, !alias.scope !189
  %2934 = insertelement <2 x double> poison, double %2932, i64 0
  %2935 = insertelement <2 x double> %2934, double %2933, i64 1
  %2936 = fmul contract <2 x double> %2908, %2935
  %2937 = fsub contract <2 x double> %2871, %2915
  %2938 = fmul contract <2 x double> %2937, %2842
  %2939 = mul nsw i64 %2850, 5
  %2940 = mul nsw i64 %2851, 5
  %2941 = getelementptr double, ptr %0, i64 %2939
  %2942 = getelementptr double, ptr %0, i64 %2940
  %2943 = getelementptr i8, ptr %2941, i64 -32
  %2944 = getelementptr i8, ptr %2942, i64 -32
  %2945 = extractelement <2 x double> %2938, i64 0
  store double %2945, ptr %2943, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2946 = extractelement <2 x double> %2938, i64 1
  store double %2946, ptr %2944, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2947 = fsub contract <2 x double> %2878, %2922
  %2948 = fmul contract <2 x double> %2947, %broadcast.splat7239
  %2949 = getelementptr i8, ptr %2941, i64 -24
  %2950 = getelementptr i8, ptr %2942, i64 -24
  %2951 = extractelement <2 x double> %2948, i64 0
  store double %2951, ptr %2949, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2952 = extractelement <2 x double> %2948, i64 1
  store double %2952, ptr %2950, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2953 = fsub contract <2 x double> %2885, %2929
  %2954 = fmul contract <2 x double> %2953, %broadcast.splat7241
  %2955 = getelementptr i8, ptr %2941, i64 -16
  %2956 = getelementptr i8, ptr %2942, i64 -16
  %2957 = extractelement <2 x double> %2954, i64 0
  store double %2957, ptr %2955, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2958 = extractelement <2 x double> %2954, i64 1
  store double %2958, ptr %2956, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2959 = fmul <2 x double> %2871, %2871
  %2960 = fmul <2 x double> %2878, %2878
  %2961 = fadd contract <2 x double> %2959, %2960
  %2962 = fmul <2 x double> %2885, %2885
  %2963 = fadd contract <2 x double> %2961, %2962
  %2964 = fmul <2 x double> %2915, %2915
  %2965 = fmul <2 x double> %2922, %2922
  %2966 = fadd contract <2 x double> %2964, %2965
  %2967 = fmul <2 x double> %2929, %2929
  %2968 = fadd contract <2 x double> %2966, %2967
  %2969 = fsub contract <2 x double> %2963, %2968
  %2970 = fmul contract <2 x double> %2969, %2846
  %2971 = fsub contract <2 x double> %2959, %2964
  %2972 = fmul contract <2 x double> %2971, %2847
  %2973 = fsub contract <2 x double> %2972, %2970
  %2974 = fsub contract <2 x double> %2892, %2936
  %2975 = fmul contract <2 x double> %2974, %2848
  %2976 = fadd contract <2 x double> %2975, %2973
  %2977 = getelementptr i8, ptr %2941, i64 -8
  %2978 = getelementptr i8, ptr %2942, i64 -8
  %2979 = extractelement <2 x double> %2976, i64 0
  store double %2979, ptr %2977, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %2980 = extractelement <2 x double> %2976, i64 1
  store double %2980, ptr %2978, align 8, !tbaa !42, !alias.scope !169, !noalias !191
  %index.next = add nuw i64 %index, 2
  %2981 = icmp eq i64 %index.next, %n.vec
  br i1 %2981, label %middle.block, label %vector.body, !llvm.loop !192

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %2761, %n.vec
  br i1 %cmp.n, label %omp.wsloop.region94.loopexit, label %omp.wsloop.region93.preheader

omp.wsloop.region93.preheader:                    ; preds = %vector.memcheck, %vector.scevcheck, %omp.wsloop.region93.lr.ph, %middle.block
  %.ph7769 = phi i64 [ %2751, %vector.memcheck ], [ %2751, %vector.scevcheck ], [ %2751, %omp.wsloop.region93.lr.ph ], [ %ind.end, %middle.block ]
  %.ph7770 = phi i32 [ %2676, %vector.memcheck ], [ %2676, %vector.scevcheck ], [ %2676, %omp.wsloop.region93.lr.ph ], [ %ind.end7235, %middle.block ]
  br label %omp.wsloop.region93

omp.wsloop.region94.loopexit:                     ; preds = %omp.wsloop.region93, %middle.block
  %.pre = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !25
  %.pre7015 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !27
  %.pre7026 = sext i32 %.pre to i64
  %.pre7028 = sext i32 %.pre7015 to i64
  %.pre7030 = sub nsw i64 %.pre7028, %.pre7026
  br label %omp.wsloop.region94

omp.wsloop.region94:                              ; preds = %omp.wsloop.region94.loopexit, %omp.wsloop.region91
  %reass.sub6912.pre-phi = phi i64 [ %.pre7030, %omp.wsloop.region94.loopexit ], [ %reass.sub6910, %omp.wsloop.region91 ]
  %2982 = phi i32 [ %.pre, %omp.wsloop.region94.loopexit ], [ %2676, %omp.wsloop.region91 ]
  %2983 = icmp sgt i64 %reass.sub6912.pre-phi, -1
  br i1 %2983, label %omp.wsloop.region96.lr.ph, label %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge

omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge: ; preds = %omp.wsloop.region94
  %.pre7071 = sext i32 %2566 to i64
  %.pre7073 = sext i32 %2565 to i64
  %.pre7075 = sub nsw i64 %.pre7071, %.unpack6658.unpack6660.unpack
  %.pre7077 = mul nsw i64 %.pre7075, %160
  %.pre7079 = sub nsw i64 %.pre7073, %.unpack6658.unpack6661.unpack
  %.pre7081 = mul nsw i64 %161, %.pre7079
  %.pre7083 = sub nsw i64 %.pre7071, %.unpack6682.unpack6684.unpack
  %.pre7085 = mul nsw i64 %.pre7083, %158
  %.pre7087 = sub nsw i64 %.pre7073, %.unpack6682.unpack6685.unpack
  %.pre7089 = mul nsw i64 %159, %.pre7087
  br label %omp.wsloop.region98.preheader

omp.wsloop.region96.lr.ph:                        ; preds = %omp.wsloop.region94
  %2984 = add nuw nsw i64 %reass.sub6912.pre-phi, 1
  %2985 = sext i32 %2566 to i64
  %2986 = sext i32 %2565 to i64
  %2987 = sub nsw i64 %2985, %.unpack6658.unpack6660.unpack
  %2988 = mul nsw i64 %2987, %160
  %2989 = sub nsw i64 %2986, %.unpack6658.unpack6661.unpack
  %2990 = mul nsw i64 %161, %2989
  %2991 = getelementptr double, ptr %.unpack6651, i64 %2990
  %2992 = getelementptr double, ptr %2991, i64 %2988
  %2993 = load double, ptr @_QMlu_dataEdx1, align 8, !tbaa !193
  %2994 = load double, ptr @_QMlu_dataEtx1, align 8, !tbaa !195
  %2995 = fmul contract double %2993, %2994
  %2996 = sub nsw i64 %2985, %.unpack6682.unpack6684.unpack
  %2997 = mul nsw i64 %2996, %158
  %2998 = sub nsw i64 %2986, %.unpack6682.unpack6685.unpack
  %2999 = mul nsw i64 %159, %2998
  %3000 = getelementptr double, ptr %.unpack6675, i64 %2999
  %3001 = getelementptr double, ptr %3000, i64 %2997
  %3002 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164
  %3003 = fmul contract double %3002, 1.000000e-01
  %3004 = load double, ptr @_QMlu_dataEdx2, align 8, !tbaa !197
  %3005 = fmul contract double %2994, %3004
  %3006 = load double, ptr @_QMlu_dataEdx3, align 8, !tbaa !199
  %3007 = fmul contract double %2994, %3006
  %3008 = load double, ptr @_QMlu_dataEdx4, align 8, !tbaa !201
  %3009 = fmul contract double %2994, %3008
  %3010 = load double, ptr @_QMlu_dataEdx5, align 8, !tbaa !203
  %3011 = fmul contract double %2994, %3010
  br label %omp.wsloop.region96

omp.wsloop.region98.preheader:                    ; preds = %omp.wsloop.region96, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge
  %.pre-phi7090 = phi i64 [ %.pre7089, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2999, %omp.wsloop.region96 ]
  %.pre-phi7086 = phi i64 [ %.pre7085, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2997, %omp.wsloop.region96 ]
  %.pre-phi7082 = phi i64 [ %.pre7081, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2990, %omp.wsloop.region96 ]
  %.pre-phi7078 = phi i64 [ %.pre7077, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2988, %omp.wsloop.region96 ]
  %.pre-phi7074 = phi i64 [ %.pre7073, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2986, %omp.wsloop.region96 ]
  %.pre-phi7072 = phi i64 [ %.pre7071, %omp.wsloop.region94.omp.wsloop.region98.preheader_crit_edge ], [ %2985, %omp.wsloop.region96 ]
  %3012 = getelementptr double, ptr %.unpack6651, i64 %.pre-phi7082
  %3013 = getelementptr double, ptr %3012, i64 %.pre-phi7078
  %3014 = getelementptr double, ptr %3013, i64 %168
  %3015 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %3016 = getelementptr double, ptr %.unpack6675, i64 %.pre-phi7090
  %3017 = getelementptr double, ptr %3016, i64 %.pre-phi7086
  %3018 = getelementptr double, ptr %3017, i64 %170
  %3019 = getelementptr double, ptr %3017, i64 %172
  %3020 = getelementptr double, ptr %3017, i64 %174
  %3021 = getelementptr double, ptr %3013, i64 %176
  %3022 = getelementptr double, ptr %3017, i64 %178
  %3023 = getelementptr double, ptr %3014, i64 %179
  %3024 = load double, ptr %3023, align 8, !tbaa !14
  %3025 = getelementptr double, ptr %3018, i64 %162
  %3026 = load double, ptr %3025, align 8, !tbaa !29
  %3027 = fmul contract double %3026, 5.000000e+00
  %3028 = getelementptr double, ptr %3019, i64 %162
  %3029 = load double, ptr %3028, align 8, !tbaa !29
  %3030 = fmul contract double %3029, 4.000000e+00
  %3031 = fsub contract double %3027, %3030
  %3032 = getelementptr double, ptr %3020, i64 %162
  %3033 = load double, ptr %3032, align 8, !tbaa !29
  %3034 = fadd contract double %3033, %3031
  %3035 = fmul contract double %3015, %3034
  %3036 = fsub contract double %3024, %3035
  store double %3036, ptr %3023, align 8, !tbaa !14
  %3037 = getelementptr double, ptr %3021, i64 %179
  %3038 = load double, ptr %3037, align 8, !tbaa !14
  %3039 = fmul contract double %3026, 4.000000e+00
  %3040 = fmul contract double %3029, 6.000000e+00
  %3041 = fsub contract double %3040, %3039
  %3042 = fmul contract double %3033, 4.000000e+00
  %3043 = fsub contract double %3041, %3042
  %3044 = getelementptr double, ptr %3022, i64 %162
  %3045 = load double, ptr %3044, align 8, !tbaa !29
  %3046 = fadd contract double %3043, %3045
  %3047 = fmul contract double %3015, %3046
  %3048 = fsub contract double %3038, %3047
  store double %3048, ptr %3037, align 8, !tbaa !14
  %3049 = getelementptr double, ptr %3014, i64 %184
  %3050 = load double, ptr %3049, align 8, !tbaa !14
  %3051 = getelementptr double, ptr %3018, i64 %163
  %3052 = load double, ptr %3051, align 8, !tbaa !29
  %3053 = fmul contract double %3052, 5.000000e+00
  %3054 = getelementptr double, ptr %3019, i64 %163
  %3055 = load double, ptr %3054, align 8, !tbaa !29
  %3056 = fmul contract double %3055, 4.000000e+00
  %3057 = fsub contract double %3053, %3056
  %3058 = getelementptr double, ptr %3020, i64 %163
  %3059 = load double, ptr %3058, align 8, !tbaa !29
  %3060 = fadd contract double %3059, %3057
  %3061 = fmul contract double %3015, %3060
  %3062 = fsub contract double %3050, %3061
  store double %3062, ptr %3049, align 8, !tbaa !14
  %3063 = getelementptr double, ptr %3021, i64 %184
  %3064 = load double, ptr %3063, align 8, !tbaa !14
  %3065 = fmul contract double %3052, 4.000000e+00
  %3066 = fmul contract double %3055, 6.000000e+00
  %3067 = fsub contract double %3066, %3065
  %3068 = fmul contract double %3059, 4.000000e+00
  %3069 = fsub contract double %3067, %3068
  %3070 = getelementptr double, ptr %3022, i64 %163
  %3071 = load double, ptr %3070, align 8, !tbaa !29
  %3072 = fadd contract double %3069, %3071
  %3073 = fmul contract double %3015, %3072
  %3074 = fsub contract double %3064, %3073
  store double %3074, ptr %3063, align 8, !tbaa !14
  %3075 = getelementptr double, ptr %3014, i64 %185
  %3076 = load double, ptr %3075, align 8, !tbaa !14
  %3077 = getelementptr double, ptr %3018, i64 %164
  %3078 = load double, ptr %3077, align 8, !tbaa !29
  %3079 = fmul contract double %3078, 5.000000e+00
  %3080 = getelementptr double, ptr %3019, i64 %164
  %3081 = load double, ptr %3080, align 8, !tbaa !29
  %3082 = fmul contract double %3081, 4.000000e+00
  %3083 = fsub contract double %3079, %3082
  %3084 = getelementptr double, ptr %3020, i64 %164
  %3085 = load double, ptr %3084, align 8, !tbaa !29
  %3086 = fadd contract double %3085, %3083
  %3087 = fmul contract double %3015, %3086
  %3088 = fsub contract double %3076, %3087
  store double %3088, ptr %3075, align 8, !tbaa !14
  %3089 = getelementptr double, ptr %3021, i64 %185
  %3090 = load double, ptr %3089, align 8, !tbaa !14
  %3091 = fmul contract double %3078, 4.000000e+00
  %3092 = fmul contract double %3081, 6.000000e+00
  %3093 = fsub contract double %3092, %3091
  %3094 = fmul contract double %3085, 4.000000e+00
  %3095 = fsub contract double %3093, %3094
  %3096 = getelementptr double, ptr %3022, i64 %164
  %3097 = load double, ptr %3096, align 8, !tbaa !29
  %3098 = fadd contract double %3095, %3097
  %3099 = fmul contract double %3015, %3098
  %3100 = fsub contract double %3090, %3099
  store double %3100, ptr %3089, align 8, !tbaa !14
  %3101 = getelementptr double, ptr %3014, i64 %186
  %3102 = load double, ptr %3101, align 8, !tbaa !14
  %3103 = getelementptr double, ptr %3018, i64 %165
  %3104 = load double, ptr %3103, align 8, !tbaa !29
  %3105 = fmul contract double %3104, 5.000000e+00
  %3106 = getelementptr double, ptr %3019, i64 %165
  %3107 = load double, ptr %3106, align 8, !tbaa !29
  %3108 = fmul contract double %3107, 4.000000e+00
  %3109 = fsub contract double %3105, %3108
  %3110 = getelementptr double, ptr %3020, i64 %165
  %3111 = load double, ptr %3110, align 8, !tbaa !29
  %3112 = fadd contract double %3111, %3109
  %3113 = fmul contract double %3015, %3112
  %3114 = fsub contract double %3102, %3113
  store double %3114, ptr %3101, align 8, !tbaa !14
  %3115 = getelementptr double, ptr %3021, i64 %186
  %3116 = load double, ptr %3115, align 8, !tbaa !14
  %3117 = fmul contract double %3104, 4.000000e+00
  %3118 = fmul contract double %3107, 6.000000e+00
  %3119 = fsub contract double %3118, %3117
  %3120 = fmul contract double %3111, 4.000000e+00
  %3121 = fsub contract double %3119, %3120
  %3122 = getelementptr double, ptr %3022, i64 %165
  %3123 = load double, ptr %3122, align 8, !tbaa !29
  %3124 = fadd contract double %3121, %3123
  %3125 = fmul contract double %3015, %3124
  %3126 = fsub contract double %3116, %3125
  store double %3126, ptr %3115, align 8, !tbaa !14
  %3127 = getelementptr double, ptr %3014, i64 %187
  %3128 = load double, ptr %3127, align 8, !tbaa !14
  %3129 = getelementptr double, ptr %3018, i64 %166
  %3130 = load double, ptr %3129, align 8, !tbaa !29
  %3131 = fmul contract double %3130, 5.000000e+00
  %3132 = getelementptr double, ptr %3019, i64 %166
  %3133 = load double, ptr %3132, align 8, !tbaa !29
  %3134 = fmul contract double %3133, 4.000000e+00
  %3135 = fsub contract double %3131, %3134
  %3136 = getelementptr double, ptr %3020, i64 %166
  %3137 = load double, ptr %3136, align 8, !tbaa !29
  %3138 = fadd contract double %3137, %3135
  %3139 = fmul contract double %3015, %3138
  %3140 = fsub contract double %3128, %3139
  store double %3140, ptr %3127, align 8, !tbaa !14
  %3141 = getelementptr double, ptr %3021, i64 %187
  %3142 = load double, ptr %3141, align 8, !tbaa !14
  %3143 = fmul contract double %3130, 4.000000e+00
  %3144 = fmul contract double %3133, 6.000000e+00
  %3145 = fsub contract double %3144, %3143
  %3146 = fmul contract double %3137, 4.000000e+00
  %3147 = fsub contract double %3145, %3146
  %3148 = getelementptr double, ptr %3022, i64 %166
  %3149 = load double, ptr %3148, align 8, !tbaa !29
  %3150 = fadd contract double %3147, %3149
  %3151 = fmul contract double %3015, %3150
  %3152 = fsub contract double %3142, %3151
  store double %3152, ptr %3141, align 8, !tbaa !14
  %3153 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !12
  %3154 = add i32 %3153, -3
  %3155 = sext i32 %3154 to i64
  %3156 = icmp sgt i32 %3154, 3
  br i1 %3156, label %omp.wsloop.region103.preheader.lr.ph, label %omp.wsloop.region107.preheader

omp.wsloop.region103.preheader.lr.ph:             ; preds = %omp.wsloop.region98.preheader
  %3157 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  br label %omp.wsloop.region103.preheader

omp.wsloop.region107.preheader:                   ; preds = %omp.wsloop.region103.preheader, %omp.wsloop.region98.preheader
  %3158 = add i32 %3153, -2
  %3159 = sext i32 %3158 to i64
  %3160 = sub nsw i64 %3159, %.unpack6658.unpack6659.unpack
  %3161 = mul nsw i64 %3160, %.unpack6658.unpack.unpack6663
  %3162 = getelementptr double, ptr %3013, i64 %3161
  %3163 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !89
  %3164 = add i32 %3153, -4
  %3165 = sext i32 %3164 to i64
  %3166 = sub nsw i64 %3165, %.unpack6173.unpack6174.unpack
  %3167 = mul nsw i64 %3166, %.unpack6173.unpack.unpack6178
  %3168 = sub nsw i64 %.pre-phi7072, %.unpack6173.unpack6175.unpack
  %3169 = mul nsw i64 %3168, %189
  %3170 = sub nsw i64 %.pre-phi7074, %.unpack6173.unpack6176.unpack
  %3171 = mul nsw i64 %190, %3170
  %3172 = getelementptr double, ptr %.unpack6675, i64 %3171
  %3173 = getelementptr double, ptr %3172, i64 %3169
  %3174 = getelementptr double, ptr %3173, i64 %3167
  %3175 = sub nsw i64 %3155, %.unpack6173.unpack6174.unpack
  %3176 = mul nsw i64 %3175, %.unpack6173.unpack.unpack6178
  %3177 = getelementptr double, ptr %3173, i64 %3176
  %3178 = sub nsw i64 %3159, %.unpack6173.unpack6174.unpack
  %3179 = mul nsw i64 %3178, %.unpack6173.unpack.unpack6178
  %3180 = getelementptr double, ptr %3173, i64 %3179
  %3181 = add i32 %3153, -1
  %3182 = sext i32 %3181 to i64
  %3183 = sub nsw i64 %3182, %.unpack6173.unpack6174.unpack
  %3184 = mul nsw i64 %3183, %.unpack6173.unpack.unpack6178
  %3185 = getelementptr double, ptr %3173, i64 %3184
  %3186 = sub nsw i64 %3182, %.unpack6658.unpack6659.unpack
  %3187 = mul nsw i64 %3186, %.unpack6658.unpack.unpack6663
  %3188 = getelementptr double, ptr %3013, i64 %3187
  %3189 = getelementptr double, ptr %3162, i64 %179
  %3190 = load double, ptr %3189, align 8, !tbaa !14
  %3191 = getelementptr double, ptr %3174, i64 %162
  %3192 = load double, ptr %3191, align 8, !tbaa !29
  %3193 = getelementptr double, ptr %3177, i64 %162
  %3194 = load double, ptr %3193, align 8, !tbaa !29
  %3195 = fmul contract double %3194, 4.000000e+00
  %3196 = fsub contract double %3192, %3195
  %3197 = getelementptr double, ptr %3180, i64 %162
  %3198 = load double, ptr %3197, align 8, !tbaa !29
  %3199 = fmul contract double %3198, 6.000000e+00
  %3200 = fadd contract double %3196, %3199
  %3201 = getelementptr double, ptr %3185, i64 %162
  %3202 = load double, ptr %3201, align 8, !tbaa !29
  %3203 = fmul contract double %3202, 4.000000e+00
  %3204 = fsub contract double %3200, %3203
  %3205 = fmul contract double %3163, %3204
  %3206 = fsub contract double %3190, %3205
  store double %3206, ptr %3189, align 8, !tbaa !14
  %3207 = getelementptr double, ptr %3188, i64 %179
  %3208 = load double, ptr %3207, align 8, !tbaa !14
  %3209 = fmul contract double %3198, 4.000000e+00
  %3210 = fsub contract double %3194, %3209
  %3211 = fmul contract double %3202, 5.000000e+00
  %3212 = fadd contract double %3210, %3211
  %3213 = fmul contract double %3163, %3212
  %3214 = fsub contract double %3208, %3213
  store double %3214, ptr %3207, align 8, !tbaa !14
  %3215 = getelementptr double, ptr %3162, i64 %184
  %3216 = load double, ptr %3215, align 8, !tbaa !14
  %3217 = getelementptr double, ptr %3174, i64 %163
  %3218 = load double, ptr %3217, align 8, !tbaa !29
  %3219 = getelementptr double, ptr %3177, i64 %163
  %3220 = load double, ptr %3219, align 8, !tbaa !29
  %3221 = fmul contract double %3220, 4.000000e+00
  %3222 = fsub contract double %3218, %3221
  %3223 = getelementptr double, ptr %3180, i64 %163
  %3224 = load double, ptr %3223, align 8, !tbaa !29
  %3225 = fmul contract double %3224, 6.000000e+00
  %3226 = fadd contract double %3222, %3225
  %3227 = getelementptr double, ptr %3185, i64 %163
  %3228 = load double, ptr %3227, align 8, !tbaa !29
  %3229 = fmul contract double %3228, 4.000000e+00
  %3230 = fsub contract double %3226, %3229
  %3231 = fmul contract double %3163, %3230
  %3232 = fsub contract double %3216, %3231
  store double %3232, ptr %3215, align 8, !tbaa !14
  %3233 = getelementptr double, ptr %3188, i64 %184
  %3234 = load double, ptr %3233, align 8, !tbaa !14
  %3235 = fmul contract double %3224, 4.000000e+00
  %3236 = fsub contract double %3220, %3235
  %3237 = fmul contract double %3228, 5.000000e+00
  %3238 = fadd contract double %3236, %3237
  %3239 = fmul contract double %3163, %3238
  %3240 = fsub contract double %3234, %3239
  store double %3240, ptr %3233, align 8, !tbaa !14
  %3241 = getelementptr double, ptr %3162, i64 %185
  %3242 = load double, ptr %3241, align 8, !tbaa !14
  %3243 = getelementptr double, ptr %3174, i64 %164
  %3244 = load double, ptr %3243, align 8, !tbaa !29
  %3245 = getelementptr double, ptr %3177, i64 %164
  %3246 = load double, ptr %3245, align 8, !tbaa !29
  %3247 = fmul contract double %3246, 4.000000e+00
  %3248 = fsub contract double %3244, %3247
  %3249 = getelementptr double, ptr %3180, i64 %164
  %3250 = load double, ptr %3249, align 8, !tbaa !29
  %3251 = fmul contract double %3250, 6.000000e+00
  %3252 = fadd contract double %3248, %3251
  %3253 = getelementptr double, ptr %3185, i64 %164
  %3254 = load double, ptr %3253, align 8, !tbaa !29
  %3255 = fmul contract double %3254, 4.000000e+00
  %3256 = fsub contract double %3252, %3255
  %3257 = fmul contract double %3163, %3256
  %3258 = fsub contract double %3242, %3257
  store double %3258, ptr %3241, align 8, !tbaa !14
  %3259 = getelementptr double, ptr %3188, i64 %185
  %3260 = load double, ptr %3259, align 8, !tbaa !14
  %3261 = fmul contract double %3250, 4.000000e+00
  %3262 = fsub contract double %3246, %3261
  %3263 = fmul contract double %3254, 5.000000e+00
  %3264 = fadd contract double %3262, %3263
  %3265 = fmul contract double %3163, %3264
  %3266 = fsub contract double %3260, %3265
  store double %3266, ptr %3259, align 8, !tbaa !14
  %3267 = getelementptr double, ptr %3162, i64 %186
  %3268 = load double, ptr %3267, align 8, !tbaa !14
  %3269 = getelementptr double, ptr %3174, i64 %165
  %3270 = load double, ptr %3269, align 8, !tbaa !29
  %3271 = getelementptr double, ptr %3177, i64 %165
  %3272 = load double, ptr %3271, align 8, !tbaa !29
  %3273 = fmul contract double %3272, 4.000000e+00
  %3274 = fsub contract double %3270, %3273
  %3275 = getelementptr double, ptr %3180, i64 %165
  %3276 = load double, ptr %3275, align 8, !tbaa !29
  %3277 = fmul contract double %3276, 6.000000e+00
  %3278 = fadd contract double %3274, %3277
  %3279 = getelementptr double, ptr %3185, i64 %165
  %3280 = load double, ptr %3279, align 8, !tbaa !29
  %3281 = fmul contract double %3280, 4.000000e+00
  %3282 = fsub contract double %3278, %3281
  %3283 = fmul contract double %3163, %3282
  %3284 = fsub contract double %3268, %3283
  store double %3284, ptr %3267, align 8, !tbaa !14
  %3285 = getelementptr double, ptr %3188, i64 %186
  %3286 = load double, ptr %3285, align 8, !tbaa !14
  %3287 = fmul contract double %3276, 4.000000e+00
  %3288 = fsub contract double %3272, %3287
  %3289 = fmul contract double %3280, 5.000000e+00
  %3290 = fadd contract double %3288, %3289
  %3291 = fmul contract double %3163, %3290
  %3292 = fsub contract double %3286, %3291
  store double %3292, ptr %3285, align 8, !tbaa !14
  %3293 = getelementptr double, ptr %3162, i64 %187
  %3294 = load double, ptr %3293, align 8, !tbaa !14
  %3295 = getelementptr double, ptr %3174, i64 %166
  %3296 = load double, ptr %3295, align 8, !tbaa !29
  %3297 = getelementptr double, ptr %3177, i64 %166
  %3298 = load double, ptr %3297, align 8, !tbaa !29
  %3299 = fmul contract double %3298, 4.000000e+00
  %3300 = fsub contract double %3296, %3299
  %3301 = getelementptr double, ptr %3180, i64 %166
  %3302 = load double, ptr %3301, align 8, !tbaa !29
  %3303 = fmul contract double %3302, 6.000000e+00
  %3304 = fadd contract double %3300, %3303
  %3305 = getelementptr double, ptr %3185, i64 %166
  %3306 = load double, ptr %3305, align 8, !tbaa !29
  %3307 = fmul contract double %3306, 4.000000e+00
  %3308 = fsub contract double %3304, %3307
  %3309 = fmul contract double %3163, %3308
  %3310 = fsub contract double %3294, %3309
  store double %3310, ptr %3293, align 8, !tbaa !14
  %3311 = getelementptr double, ptr %3188, i64 %187
  %3312 = load double, ptr %3311, align 8, !tbaa !14
  %3313 = fmul contract double %3302, 4.000000e+00
  %3314 = fsub contract double %3298, %3313
  %3315 = fmul contract double %3306, 5.000000e+00
  %3316 = fadd contract double %3314, %3315
  %3317 = fmul contract double %3163, %3316
  %3318 = fsub contract double %3312, %3317
  store double %3318, ptr %3311, align 8, !tbaa !14
  %omp_collapsed.next119 = add i32 %omp_collapsed.iv1176868, 1
  %exitcond6956.not = icmp eq i32 %omp_collapsed.iv1176868, %reass.sub6909
  br i1 %exitcond6956.not, label %omp_collapsed.exit115, label %omp_collapsed.body113

omp.wsloop.region103.preheader:                   ; preds = %omp.wsloop.region103.preheader.lr.ph, %omp.wsloop.region103.preheader
  %indvars.iv6948 = phi i64 [ 4, %omp.wsloop.region103.preheader.lr.ph ], [ %indvars.iv.next6949, %omp.wsloop.region103.preheader ]
  %3319 = sub nsw i64 %indvars.iv6948, %.unpack6658.unpack6659.unpack
  %3320 = mul nsw i64 %3319, %.unpack6658.unpack.unpack6663
  %3321 = getelementptr double, ptr %3013, i64 %3320
  %3322 = add nsw i64 %indvars.iv6948, -2
  %3323 = sub nsw i64 %3322, %.unpack6682.unpack6683.unpack
  %3324 = mul nsw i64 %3323, %.unpack6682.unpack.unpack6687
  %3325 = getelementptr double, ptr %3017, i64 %3324
  %3326 = add i64 %indvars.iv6948, %188
  %3327 = mul nsw i64 %3326, %.unpack6682.unpack.unpack6687
  %3328 = getelementptr double, ptr %3017, i64 %3327
  %3329 = sub nsw i64 %indvars.iv6948, %.unpack6682.unpack6683.unpack
  %3330 = mul nsw i64 %3329, %.unpack6682.unpack.unpack6687
  %3331 = getelementptr double, ptr %3017, i64 %3330
  %indvars.iv.next6949 = add nuw nsw i64 %indvars.iv6948, 1
  %sext = shl i64 %indvars.iv.next6949, 32
  %3332 = ashr exact i64 %sext, 32
  %3333 = sub nsw i64 %3332, %.unpack6682.unpack6683.unpack
  %3334 = mul nsw i64 %3333, %.unpack6682.unpack.unpack6687
  %3335 = getelementptr double, ptr %3017, i64 %3334
  %3336 = shl i64 %indvars.iv6948, 32
  %sext7091 = add i64 %3336, 8589934592
  %3337 = ashr exact i64 %sext7091, 32
  %3338 = sub nsw i64 %3337, %.unpack6682.unpack6683.unpack
  %3339 = mul nsw i64 %3338, %.unpack6682.unpack.unpack6687
  %3340 = getelementptr double, ptr %3017, i64 %3339
  %3341 = getelementptr double, ptr %3321, i64 %179
  %3342 = load double, ptr %3341, align 8, !tbaa !14
  %3343 = getelementptr double, ptr %3325, i64 %162
  %3344 = load double, ptr %3343, align 8, !tbaa !29
  %3345 = getelementptr double, ptr %3328, i64 %162
  %3346 = load double, ptr %3345, align 8, !tbaa !29
  %3347 = fmul contract double %3346, 4.000000e+00
  %3348 = fsub contract double %3344, %3347
  %3349 = getelementptr double, ptr %3331, i64 %162
  %3350 = load double, ptr %3349, align 8, !tbaa !29
  %3351 = fmul contract double %3350, 6.000000e+00
  %3352 = fadd contract double %3348, %3351
  %3353 = getelementptr double, ptr %3335, i64 %162
  %3354 = load double, ptr %3353, align 8, !tbaa !29
  %3355 = fmul contract double %3354, 4.000000e+00
  %3356 = fsub contract double %3352, %3355
  %3357 = getelementptr double, ptr %3340, i64 %162
  %3358 = load double, ptr %3357, align 8, !tbaa !29
  %3359 = fadd contract double %3358, %3356
  %3360 = fmul contract double %3157, %3359
  %3361 = fsub contract double %3342, %3360
  store double %3361, ptr %3341, align 8, !tbaa !14
  %3362 = getelementptr double, ptr %3321, i64 %184
  %3363 = load double, ptr %3362, align 8, !tbaa !14
  %3364 = getelementptr double, ptr %3325, i64 %163
  %3365 = load double, ptr %3364, align 8, !tbaa !29
  %3366 = getelementptr double, ptr %3328, i64 %163
  %3367 = load double, ptr %3366, align 8, !tbaa !29
  %3368 = fmul contract double %3367, 4.000000e+00
  %3369 = fsub contract double %3365, %3368
  %3370 = getelementptr double, ptr %3331, i64 %163
  %3371 = load double, ptr %3370, align 8, !tbaa !29
  %3372 = fmul contract double %3371, 6.000000e+00
  %3373 = fadd contract double %3369, %3372
  %3374 = getelementptr double, ptr %3335, i64 %163
  %3375 = load double, ptr %3374, align 8, !tbaa !29
  %3376 = fmul contract double %3375, 4.000000e+00
  %3377 = fsub contract double %3373, %3376
  %3378 = getelementptr double, ptr %3340, i64 %163
  %3379 = load double, ptr %3378, align 8, !tbaa !29
  %3380 = fadd contract double %3379, %3377
  %3381 = fmul contract double %3157, %3380
  %3382 = fsub contract double %3363, %3381
  store double %3382, ptr %3362, align 8, !tbaa !14
  %3383 = getelementptr double, ptr %3321, i64 %185
  %3384 = load double, ptr %3383, align 8, !tbaa !14
  %3385 = getelementptr double, ptr %3325, i64 %164
  %3386 = load double, ptr %3385, align 8, !tbaa !29
  %3387 = getelementptr double, ptr %3328, i64 %164
  %3388 = load double, ptr %3387, align 8, !tbaa !29
  %3389 = fmul contract double %3388, 4.000000e+00
  %3390 = fsub contract double %3386, %3389
  %3391 = getelementptr double, ptr %3331, i64 %164
  %3392 = load double, ptr %3391, align 8, !tbaa !29
  %3393 = fmul contract double %3392, 6.000000e+00
  %3394 = fadd contract double %3390, %3393
  %3395 = getelementptr double, ptr %3335, i64 %164
  %3396 = load double, ptr %3395, align 8, !tbaa !29
  %3397 = fmul contract double %3396, 4.000000e+00
  %3398 = fsub contract double %3394, %3397
  %3399 = getelementptr double, ptr %3340, i64 %164
  %3400 = load double, ptr %3399, align 8, !tbaa !29
  %3401 = fadd contract double %3400, %3398
  %3402 = fmul contract double %3157, %3401
  %3403 = fsub contract double %3384, %3402
  store double %3403, ptr %3383, align 8, !tbaa !14
  %3404 = getelementptr double, ptr %3321, i64 %186
  %3405 = load double, ptr %3404, align 8, !tbaa !14
  %3406 = getelementptr double, ptr %3325, i64 %165
  %3407 = load double, ptr %3406, align 8, !tbaa !29
  %3408 = getelementptr double, ptr %3328, i64 %165
  %3409 = load double, ptr %3408, align 8, !tbaa !29
  %3410 = fmul contract double %3409, 4.000000e+00
  %3411 = fsub contract double %3407, %3410
  %3412 = getelementptr double, ptr %3331, i64 %165
  %3413 = load double, ptr %3412, align 8, !tbaa !29
  %3414 = fmul contract double %3413, 6.000000e+00
  %3415 = fadd contract double %3411, %3414
  %3416 = getelementptr double, ptr %3335, i64 %165
  %3417 = load double, ptr %3416, align 8, !tbaa !29
  %3418 = fmul contract double %3417, 4.000000e+00
  %3419 = fsub contract double %3415, %3418
  %3420 = getelementptr double, ptr %3340, i64 %165
  %3421 = load double, ptr %3420, align 8, !tbaa !29
  %3422 = fadd contract double %3421, %3419
  %3423 = fmul contract double %3157, %3422
  %3424 = fsub contract double %3405, %3423
  store double %3424, ptr %3404, align 8, !tbaa !14
  %3425 = getelementptr double, ptr %3321, i64 %187
  %3426 = load double, ptr %3425, align 8, !tbaa !14
  %3427 = getelementptr double, ptr %3325, i64 %166
  %3428 = load double, ptr %3427, align 8, !tbaa !29
  %3429 = getelementptr double, ptr %3328, i64 %166
  %3430 = load double, ptr %3429, align 8, !tbaa !29
  %3431 = fmul contract double %3430, 4.000000e+00
  %3432 = fsub contract double %3428, %3431
  %3433 = getelementptr double, ptr %3331, i64 %166
  %3434 = load double, ptr %3433, align 8, !tbaa !29
  %3435 = fmul contract double %3434, 6.000000e+00
  %3436 = fadd contract double %3432, %3435
  %3437 = getelementptr double, ptr %3335, i64 %166
  %3438 = load double, ptr %3437, align 8, !tbaa !29
  %3439 = fmul contract double %3438, 4.000000e+00
  %3440 = fsub contract double %3436, %3439
  %3441 = getelementptr double, ptr %3340, i64 %166
  %3442 = load double, ptr %3441, align 8, !tbaa !29
  %3443 = fadd contract double %3442, %3440
  %3444 = fmul contract double %3157, %3443
  %3445 = fsub contract double %3426, %3444
  store double %3445, ptr %3425, align 8, !tbaa !14
  %exitcond6951.not = icmp eq i64 %indvars.iv6948, %3155
  br i1 %exitcond6951.not, label %omp.wsloop.region107.preheader, label %omp.wsloop.region103.preheader

omp.wsloop.region96:                              ; preds = %omp.wsloop.region96.lr.ph, %omp.wsloop.region96
  %3446 = phi i64 [ %2984, %omp.wsloop.region96.lr.ph ], [ %3562, %omp.wsloop.region96 ]
  %3447 = phi i32 [ %2982, %omp.wsloop.region96.lr.ph ], [ %3468, %omp.wsloop.region96 ]
  %3448 = sext i32 %3447 to i64
  %3449 = sub nsw i64 %3448, %.unpack6658.unpack6659.unpack
  %3450 = mul nsw i64 %3449, %.unpack6658.unpack.unpack6663
  %reass.sub6406 = sub i64 %3450, %.unpack6658.unpack.unpack
  %3451 = getelementptr double, ptr %2992, i64 %reass.sub6406
  %3452 = getelementptr i8, ptr %3451, i64 8
  %3453 = load double, ptr %3452, align 8, !tbaa !14
  %3454 = add i32 %3447, -1
  %3455 = sext i32 %3454 to i64
  %3456 = sub nsw i64 %3455, %.unpack6682.unpack6683.unpack
  %3457 = mul nsw i64 %3456, %.unpack6682.unpack.unpack6687
  %3458 = getelementptr double, ptr %3001, i64 %3457
  %3459 = getelementptr double, ptr %3458, i64 %162
  %3460 = load double, ptr %3459, align 8, !tbaa !29
  %3461 = sub nsw i64 %3448, %.unpack6682.unpack6683.unpack
  %3462 = mul nsw i64 %3461, %.unpack6682.unpack.unpack6687
  %3463 = getelementptr double, ptr %3001, i64 %3462
  %3464 = getelementptr double, ptr %3463, i64 %162
  %3465 = load double, ptr %3464, align 8, !tbaa !29
  %3466 = fmul contract double %3465, 2.000000e+00
  %3467 = fsub contract double %3460, %3466
  %3468 = add i32 %3447, 1
  %3469 = sext i32 %3468 to i64
  %3470 = sub nsw i64 %3469, %.unpack6682.unpack6683.unpack
  %3471 = mul nsw i64 %3470, %.unpack6682.unpack.unpack6687
  %3472 = getelementptr double, ptr %3001, i64 %3471
  %3473 = getelementptr double, ptr %3472, i64 %162
  %3474 = load double, ptr %3473, align 8, !tbaa !29
  %3475 = fadd contract double %3474, %3467
  %3476 = fmul contract double %2995, %3475
  %3477 = fadd contract double %3453, %3476
  store double %3477, ptr %3452, align 8, !tbaa !14
  %3478 = getelementptr i8, ptr %3451, i64 16
  %3479 = load double, ptr %3478, align 8, !tbaa !14
  %3480 = mul nsw i64 %3469, 5
  %3481 = getelementptr double, ptr %0, i64 %3480
  %3482 = getelementptr i8, ptr %3481, i64 -32
  %3483 = load double, ptr %3482, align 8, !tbaa !42
  %3484 = mul nsw i64 %3448, 5
  %3485 = getelementptr double, ptr %0, i64 %3484
  %3486 = getelementptr i8, ptr %3485, i64 -32
  %3487 = load double, ptr %3486, align 8, !tbaa !42
  %3488 = fsub contract double %3483, %3487
  %3489 = fmul contract double %3003, %3488
  %3490 = fadd contract double %3479, %3489
  %3491 = getelementptr double, ptr %3458, i64 %163
  %3492 = load double, ptr %3491, align 8, !tbaa !29
  %3493 = getelementptr double, ptr %3463, i64 %163
  %3494 = load double, ptr %3493, align 8, !tbaa !29
  %3495 = fmul contract double %3494, 2.000000e+00
  %3496 = fsub contract double %3492, %3495
  %3497 = getelementptr double, ptr %3472, i64 %163
  %3498 = load double, ptr %3497, align 8, !tbaa !29
  %3499 = fadd contract double %3498, %3496
  %3500 = fmul contract double %3005, %3499
  %3501 = fadd contract double %3490, %3500
  store double %3501, ptr %3478, align 8, !tbaa !14
  %3502 = getelementptr i8, ptr %3451, i64 24
  %3503 = load double, ptr %3502, align 8, !tbaa !14
  %3504 = getelementptr i8, ptr %3481, i64 -24
  %3505 = load double, ptr %3504, align 8, !tbaa !42
  %3506 = getelementptr i8, ptr %3485, i64 -24
  %3507 = load double, ptr %3506, align 8, !tbaa !42
  %3508 = fsub contract double %3505, %3507
  %3509 = fmul contract double %3003, %3508
  %3510 = fadd contract double %3503, %3509
  %3511 = getelementptr double, ptr %3458, i64 %164
  %3512 = load double, ptr %3511, align 8, !tbaa !29
  %3513 = getelementptr double, ptr %3463, i64 %164
  %3514 = load double, ptr %3513, align 8, !tbaa !29
  %3515 = fmul contract double %3514, 2.000000e+00
  %3516 = fsub contract double %3512, %3515
  %3517 = getelementptr double, ptr %3472, i64 %164
  %3518 = load double, ptr %3517, align 8, !tbaa !29
  %3519 = fadd contract double %3518, %3516
  %3520 = fmul contract double %3007, %3519
  %3521 = fadd contract double %3510, %3520
  store double %3521, ptr %3502, align 8, !tbaa !14
  %3522 = getelementptr i8, ptr %3451, i64 32
  %3523 = load double, ptr %3522, align 8, !tbaa !14
  %3524 = getelementptr i8, ptr %3481, i64 -16
  %3525 = load double, ptr %3524, align 8, !tbaa !42
  %3526 = getelementptr i8, ptr %3485, i64 -16
  %3527 = load double, ptr %3526, align 8, !tbaa !42
  %3528 = fsub contract double %3525, %3527
  %3529 = fmul contract double %3003, %3528
  %3530 = fadd contract double %3523, %3529
  %3531 = getelementptr double, ptr %3458, i64 %165
  %3532 = load double, ptr %3531, align 8, !tbaa !29
  %3533 = getelementptr double, ptr %3463, i64 %165
  %3534 = load double, ptr %3533, align 8, !tbaa !29
  %3535 = fmul contract double %3534, 2.000000e+00
  %3536 = fsub contract double %3532, %3535
  %3537 = getelementptr double, ptr %3472, i64 %165
  %3538 = load double, ptr %3537, align 8, !tbaa !29
  %3539 = fadd contract double %3538, %3536
  %3540 = fmul contract double %3009, %3539
  %3541 = fadd contract double %3530, %3540
  store double %3541, ptr %3522, align 8, !tbaa !14
  %3542 = getelementptr i8, ptr %3451, i64 40
  %3543 = load double, ptr %3542, align 8, !tbaa !14
  %3544 = getelementptr i8, ptr %3481, i64 -8
  %3545 = load double, ptr %3544, align 8, !tbaa !42
  %3546 = getelementptr i8, ptr %3485, i64 -8
  %3547 = load double, ptr %3546, align 8, !tbaa !42
  %3548 = fsub contract double %3545, %3547
  %3549 = fmul contract double %3003, %3548
  %3550 = fadd contract double %3543, %3549
  %3551 = getelementptr double, ptr %3458, i64 %166
  %3552 = load double, ptr %3551, align 8, !tbaa !29
  %3553 = getelementptr double, ptr %3463, i64 %166
  %3554 = load double, ptr %3553, align 8, !tbaa !29
  %3555 = fmul contract double %3554, 2.000000e+00
  %3556 = fsub contract double %3552, %3555
  %3557 = getelementptr double, ptr %3472, i64 %166
  %3558 = load double, ptr %3557, align 8, !tbaa !29
  %3559 = fadd contract double %3558, %3556
  %3560 = fmul contract double %3011, %3559
  %3561 = fadd contract double %3550, %3560
  store double %3561, ptr %3542, align 8, !tbaa !14
  %3562 = add nsw i64 %3446, -1
  %3563 = icmp ugt i64 %3446, 1
  br i1 %3563, label %omp.wsloop.region96, label %omp.wsloop.region98.preheader

omp.wsloop.region93:                              ; preds = %omp.wsloop.region93.preheader, %omp.wsloop.region93
  %3564 = phi i64 [ %3644, %omp.wsloop.region93 ], [ %.ph7769, %omp.wsloop.region93.preheader ]
  %3565 = phi i32 [ %3643, %omp.wsloop.region93 ], [ %.ph7770, %omp.wsloop.region93.preheader ]
  %3566 = sext i32 %3565 to i64
  %3567 = sub nsw i64 %3566, %.unpack6682.unpack6683.unpack
  %3568 = mul nsw i64 %3567, %.unpack6682.unpack.unpack6687
  %3569 = getelementptr double, ptr %2759, i64 %3568
  %3570 = getelementptr double, ptr %3569, i64 %162
  %3571 = load double, ptr %3570, align 8, !tbaa !29
  %3572 = fdiv contract double 1.000000e+00, %3571
  %3573 = getelementptr double, ptr %3569, i64 %163
  %3574 = load double, ptr %3573, align 8, !tbaa !29
  %3575 = fmul contract double %3572, %3574
  %3576 = getelementptr double, ptr %3569, i64 %164
  %3577 = load double, ptr %3576, align 8, !tbaa !29
  %3578 = fmul contract double %3572, %3577
  %3579 = getelementptr double, ptr %3569, i64 %165
  %3580 = load double, ptr %3579, align 8, !tbaa !29
  %3581 = fmul contract double %3572, %3580
  %3582 = getelementptr double, ptr %3569, i64 %166
  %3583 = load double, ptr %3582, align 8, !tbaa !29
  %3584 = fmul contract double %3572, %3583
  %3585 = add i32 %3565, -1
  %3586 = sext i32 %3585 to i64
  %3587 = sub nsw i64 %3586, %.unpack6682.unpack6683.unpack
  %3588 = mul nsw i64 %3587, %.unpack6682.unpack.unpack6687
  %3589 = getelementptr double, ptr %2759, i64 %3588
  %3590 = getelementptr double, ptr %3589, i64 %162
  %3591 = load double, ptr %3590, align 8, !tbaa !29
  %3592 = fdiv contract double 1.000000e+00, %3591
  %3593 = getelementptr double, ptr %3589, i64 %163
  %3594 = load double, ptr %3593, align 8, !tbaa !29
  %3595 = fmul contract double %3592, %3594
  %3596 = getelementptr double, ptr %3589, i64 %164
  %3597 = load double, ptr %3596, align 8, !tbaa !29
  %3598 = fmul contract double %3592, %3597
  %3599 = getelementptr double, ptr %3589, i64 %165
  %3600 = load double, ptr %3599, align 8, !tbaa !29
  %3601 = fmul contract double %3592, %3600
  %3602 = getelementptr double, ptr %3589, i64 %166
  %3603 = load double, ptr %3602, align 8, !tbaa !29
  %3604 = fmul contract double %3592, %3603
  %3605 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164
  %3606 = fmul contract double %3605, 0x3FF5555555555555
  %3607 = fsub contract double %3575, %3595
  %3608 = fmul contract double %3607, %3606
  %3609 = mul nsw i64 %3566, 5
  %3610 = getelementptr double, ptr %0, i64 %3609
  %3611 = getelementptr i8, ptr %3610, i64 -32
  store double %3608, ptr %3611, align 8, !tbaa !42
  %3612 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164
  %3613 = fsub contract double %3578, %3598
  %3614 = fmul contract double %3613, %3612
  %3615 = getelementptr i8, ptr %3610, i64 -24
  store double %3614, ptr %3615, align 8, !tbaa !42
  %3616 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164
  %3617 = fsub contract double %3581, %3601
  %3618 = fmul contract double %3617, %3616
  %3619 = getelementptr i8, ptr %3610, i64 -16
  store double %3618, ptr %3619, align 8, !tbaa !42
  %3620 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !164
  %3621 = fmul contract double %3620, 0x3FDEB851EB851EB6
  %3622 = fmul double %3575, %3575
  %3623 = fmul double %3578, %3578
  %3624 = fadd contract double %3622, %3623
  %3625 = fmul double %3581, %3581
  %3626 = fadd contract double %3624, %3625
  %3627 = fmul double %3595, %3595
  %3628 = fmul double %3598, %3598
  %3629 = fadd contract double %3627, %3628
  %3630 = fmul double %3601, %3601
  %3631 = fadd contract double %3629, %3630
  %3632 = fsub contract double %3626, %3631
  %3633 = fmul contract double %3632, %3621
  %3634 = fmul contract double %3620, 0x3FC5555555555555
  %3635 = fsub contract double %3622, %3627
  %3636 = fmul contract double %3635, %3634
  %3637 = fsub contract double %3636, %3633
  %3638 = fmul contract double %3620, 0x3FFF5C28F5C28F5B
  %3639 = fsub contract double %3584, %3604
  %3640 = fmul contract double %3639, %3638
  %3641 = fadd contract double %3640, %3637
  %3642 = getelementptr i8, ptr %3610, i64 -8
  store double %3641, ptr %3642, align 8, !tbaa !42
  %3643 = add i32 %3565, 1
  %3644 = add nsw i64 %3564, -1
  %3645 = icmp ugt i64 %3564, 1
  br i1 %3645, label %omp.wsloop.region93, label %omp.wsloop.region94.loopexit, !llvm.loop !205

omp.wsloop.region84:                              ; preds = %omp.wsloop.region84.preheader, %omp.wsloop.region84
  %indvars.iv6932 = phi i64 [ %indvars.iv.next6933, %omp.wsloop.region84 ], [ %indvars.iv6932.ph, %omp.wsloop.region84.preheader ]
  %3646 = sub nsw i64 %indvars.iv6932, %.unpack6682.unpack6683.unpack
  %3647 = mul nsw i64 %3646, %.unpack6682.unpack.unpack6687
  %reass.sub6699 = sub i64 %3647, %.unpack6682.unpack.unpack
  %3648 = getelementptr double, ptr %2576, i64 %reass.sub6699
  %3649 = getelementptr i8, ptr %3648, i64 16
  %3650 = load double, ptr %3649, align 8, !tbaa !29
  %3651 = mul nuw nsw i64 %indvars.iv6932, 5
  %3652 = getelementptr double, ptr %0, i64 %3651
  %3653 = getelementptr i8, ptr %3652, i64 -40
  store double %3650, ptr %3653, align 8, !tbaa !42
  %3654 = getelementptr i8, ptr %3648, i64 8
  %3655 = load double, ptr %3654, align 8, !tbaa !29
  %3656 = fdiv contract double %3650, %3655
  %3657 = fmul contract double %3650, %3650
  %3658 = getelementptr i8, ptr %3648, i64 24
  %3659 = load double, ptr %3658, align 8, !tbaa !29
  %3660 = fmul contract double %3659, %3659
  %3661 = fadd contract double %3657, %3660
  %3662 = getelementptr i8, ptr %3648, i64 32
  %3663 = load double, ptr %3662, align 8, !tbaa !29
  %3664 = fmul contract double %3663, %3663
  %3665 = fadd contract double %3661, %3664
  %3666 = fmul contract double %3665, 5.000000e-01
  %3667 = fdiv contract double %3666, %3655
  %3668 = fmul contract double %3650, %3656
  %3669 = getelementptr i8, ptr %3648, i64 40
  %3670 = load double, ptr %3669, align 8, !tbaa !29
  %3671 = fsub contract double %3670, %3667
  %3672 = fmul contract double %3671, 4.000000e-01
  %3673 = fadd contract double %3668, %3672
  %3674 = getelementptr i8, ptr %3652, i64 -32
  store double %3673, ptr %3674, align 8, !tbaa !42
  %3675 = load double, ptr %3658, align 8, !tbaa !29
  %3676 = fmul contract double %3656, %3675
  %3677 = getelementptr i8, ptr %3652, i64 -24
  store double %3676, ptr %3677, align 8, !tbaa !42
  %3678 = load double, ptr %3662, align 8, !tbaa !29
  %3679 = fmul contract double %3656, %3678
  %3680 = getelementptr i8, ptr %3652, i64 -16
  store double %3679, ptr %3680, align 8, !tbaa !42
  %3681 = load double, ptr %3669, align 8, !tbaa !29
  %3682 = fmul contract double %3681, 1.400000e+00
  %3683 = fmul contract double %3667, 4.000000e-01
  %3684 = fsub contract double %3682, %3683
  %3685 = fmul contract double %3656, %3684
  %3686 = getelementptr i8, ptr %3652, i64 -8
  store double %3685, ptr %3686, align 8, !tbaa !42
  %indvars.iv.next6933 = add nuw nsw i64 %indvars.iv6932, 1
  %exitcond6935.not = icmp eq i64 %indvars.iv.next6933, %2577
  br i1 %exitcond6935.not, label %omp.wsloop.region85, label %omp.wsloop.region84, !llvm.loop !206

omp_collapsed.body53:                             ; preds = %omp_collapsed.body53.lr.ph, %omp.wsloop.region49
  %omp_collapsed.iv576864 = phi i32 [ 0, %omp_collapsed.body53.lr.ph ], [ %omp_collapsed.next59, %omp.wsloop.region49 ]
  br i1 %69, label %omp.wsloop.region45.lr.ph, label %omp.wsloop.region49

omp.wsloop.region45.lr.ph:                        ; preds = %omp_collapsed.body53
  %3687 = add i32 %omp_collapsed.iv576864, %59
  %3688 = urem i32 %3687, %omp_loop.tripcount31
  %3689 = sitofp i32 %3688 to double
  %3690 = fdiv contract double %3689, %66
  %3691 = udiv i32 %3687, %omp_loop.tripcount31
  %3692 = sitofp i32 %3691 to double
  %3693 = fdiv contract double %3692, %63
  %3694 = add nuw nsw i32 %3688, 1
  %3695 = add i32 %3691, 1
  %3696 = zext nneg i32 %3694 to i64
  %3697 = sext i32 %3695 to i64
  %3698 = sub nsw i64 %3696, %.unpack6811.unpack6813.unpack
  %3699 = mul nsw i64 %3698, %73
  %3700 = sub nsw i64 %3697, %.unpack6811.unpack6814.unpack
  %3701 = mul nsw i64 %74, %3700
  %3702 = getelementptr double, ptr %.unpack6804, i64 %3701
  %3703 = getelementptr double, ptr %3702, i64 %3699
  %3704 = fmul contract double %3690, %83
  %3705 = fadd contract double %82, %3704
  %3706 = fmul contract double %3690, %3705
  %3707 = fadd contract double %81, %3706
  %3708 = fmul contract double %3690, %3707
  %3709 = fadd contract double %80, %3708
  %3710 = fmul contract double %3690, %3709
  %3711 = fmul contract double %3693, %87
  %3712 = fadd contract double %86, %3711
  %3713 = fmul contract double %3693, %3712
  %3714 = fadd contract double %85, %3713
  %3715 = fmul contract double %3693, %3714
  %3716 = fadd contract double %84, %3715
  %3717 = fmul contract double %3693, %3716
  %3718 = fmul contract double %3690, %97
  %3719 = fadd contract double %96, %3718
  %3720 = fmul contract double %3690, %3719
  %3721 = fadd contract double %95, %3720
  %3722 = fmul contract double %3690, %3721
  %3723 = fadd contract double %94, %3722
  %3724 = fmul contract double %3690, %3723
  %3725 = fmul contract double %3693, %101
  %3726 = fadd contract double %100, %3725
  %3727 = fmul contract double %3693, %3726
  %3728 = fadd contract double %99, %3727
  %3729 = fmul contract double %3693, %3728
  %3730 = fadd contract double %98, %3729
  %3731 = fmul contract double %3693, %3730
  %3732 = fmul contract double %3690, %111
  %3733 = fadd contract double %110, %3732
  %3734 = fmul contract double %3690, %3733
  %3735 = fadd contract double %109, %3734
  %3736 = fmul contract double %3690, %3735
  %3737 = fadd contract double %108, %3736
  %3738 = fmul contract double %3690, %3737
  %3739 = fmul contract double %3693, %115
  %3740 = fadd contract double %114, %3739
  %3741 = fmul contract double %3693, %3740
  %3742 = fadd contract double %113, %3741
  %3743 = fmul contract double %3693, %3742
  %3744 = fadd contract double %112, %3743
  %3745 = fmul contract double %3693, %3744
  %3746 = fmul contract double %3690, %125
  %3747 = fadd contract double %124, %3746
  %3748 = fmul contract double %3690, %3747
  %3749 = fadd contract double %123, %3748
  %3750 = fmul contract double %3690, %3749
  %3751 = fadd contract double %122, %3750
  %3752 = fmul contract double %3690, %3751
  %3753 = fmul contract double %3693, %129
  %3754 = fadd contract double %128, %3753
  %3755 = fmul contract double %3693, %3754
  %3756 = fadd contract double %127, %3755
  %3757 = fmul contract double %3693, %3756
  %3758 = fadd contract double %126, %3757
  %3759 = fmul contract double %3693, %3758
  %3760 = fmul contract double %3690, %139
  %3761 = fadd contract double %138, %3760
  %3762 = fmul contract double %3690, %3761
  %3763 = fadd contract double %137, %3762
  %3764 = fmul contract double %3690, %3763
  %3765 = fadd contract double %136, %3764
  %3766 = fmul contract double %3690, %3765
  %3767 = fmul contract double %3693, %143
  %3768 = fadd contract double %142, %3767
  %3769 = fmul contract double %3693, %3768
  %3770 = fadd contract double %141, %3769
  %3771 = fmul contract double %3693, %3770
  %3772 = fadd contract double %140, %3771
  %3773 = fmul contract double %3693, %3772
  br label %omp.wsloop.region45

omp.wsloop.region49:                              ; preds = %omp.wsloop.region45, %omp_collapsed.body53
  %omp_collapsed.next59 = add nuw i32 %omp_collapsed.iv576864, 1
  %exitcond6931.not = icmp eq i32 %omp_collapsed.iv576864, %reass.sub6908
  br i1 %exitcond6931.not, label %omp_collapsed.exit55, label %omp_collapsed.body53

omp.wsloop.region45:                              ; preds = %omp.wsloop.region45.lr.ph, %omp.wsloop.region45
  %indvars.iv6927 = phi i64 [ 1, %omp.wsloop.region45.lr.ph ], [ %indvars.iv.next6928, %omp.wsloop.region45 ]
  %3774 = trunc i64 %indvars.iv6927 to i32
  %3775 = add i32 %3774, -1
  %3776 = sitofp i32 %3775 to double
  %3777 = fdiv contract double %3776, %72
  %3778 = sub nsw i64 %indvars.iv6927, %.unpack6811.unpack6812.unpack
  %3779 = mul nsw i64 %3778, %.unpack6811.unpack.unpack6816
  %3780 = getelementptr double, ptr %3703, i64 %3779
  %3781 = fmul contract double %3777, %79
  %3782 = fadd contract double %78, %3781
  %3783 = fmul contract double %3777, %3782
  %3784 = fadd contract double %77, %3783
  %3785 = fmul contract double %3777, %3784
  %3786 = fadd contract double %76, %3785
  %3787 = fmul contract double %3777, %3786
  %3788 = fadd contract double %75, %3787
  %3789 = fadd contract double %3788, %3710
  %3790 = fadd contract double %3789, %3717
  %3791 = getelementptr double, ptr %3780, i64 %88
  store double %3790, ptr %3791, align 8, !tbaa !29
  %3792 = fmul contract double %3777, %93
  %3793 = fadd contract double %92, %3792
  %3794 = fmul contract double %3777, %3793
  %3795 = fadd contract double %91, %3794
  %3796 = fmul contract double %3777, %3795
  %3797 = fadd contract double %90, %3796
  %3798 = fmul contract double %3777, %3797
  %3799 = fadd contract double %89, %3798
  %3800 = fadd contract double %3799, %3724
  %3801 = fadd contract double %3800, %3731
  %3802 = getelementptr double, ptr %3780, i64 %102
  store double %3801, ptr %3802, align 8, !tbaa !29
  %3803 = fmul contract double %3777, %107
  %3804 = fadd contract double %106, %3803
  %3805 = fmul contract double %3777, %3804
  %3806 = fadd contract double %105, %3805
  %3807 = fmul contract double %3777, %3806
  %3808 = fadd contract double %104, %3807
  %3809 = fmul contract double %3777, %3808
  %3810 = fadd contract double %103, %3809
  %3811 = fadd contract double %3810, %3738
  %3812 = fadd contract double %3811, %3745
  %3813 = getelementptr double, ptr %3780, i64 %116
  store double %3812, ptr %3813, align 8, !tbaa !29
  %3814 = fmul contract double %3777, %121
  %3815 = fadd contract double %120, %3814
  %3816 = fmul contract double %3777, %3815
  %3817 = fadd contract double %119, %3816
  %3818 = fmul contract double %3777, %3817
  %3819 = fadd contract double %118, %3818
  %3820 = fmul contract double %3777, %3819
  %3821 = fadd contract double %117, %3820
  %3822 = fadd contract double %3821, %3752
  %3823 = fadd contract double %3822, %3759
  %3824 = getelementptr double, ptr %3780, i64 %130
  store double %3823, ptr %3824, align 8, !tbaa !29
  %3825 = fmul contract double %3777, %135
  %3826 = fadd contract double %134, %3825
  %3827 = fmul contract double %3777, %3826
  %3828 = fadd contract double %133, %3827
  %3829 = fmul contract double %3777, %3828
  %3830 = fadd contract double %132, %3829
  %3831 = fmul contract double %3777, %3830
  %3832 = fadd contract double %131, %3831
  %3833 = fadd contract double %3832, %3766
  %3834 = fadd contract double %3833, %3773
  %3835 = getelementptr double, ptr %3780, i64 %144
  store double %3834, ptr %3835, align 8, !tbaa !29
  %indvars.iv.next6928 = add nuw nsw i64 %indvars.iv6927, 1
  %exitcond6930.not = icmp eq i64 %indvars.iv6927, %68
  br i1 %exitcond6930.not, label %omp.wsloop.region49, label %omp.wsloop.region45
}

; Function Attrs: nounwind
declare i32 @__kmpc_global_thread_num(ptr) local_unnamed_addr #1

; Function Attrs: nounwind
declare ptr @__kmpc_threadprivate_cached(ptr, i32, ptr, i64, ptr) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_4u(ptr, i32, i32, ptr, ptr, ptr, ptr, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @__kmpc_for_static_fini(ptr, i32) local_unnamed_addr #1

; Function Attrs: convergent nounwind
declare void @__kmpc_barrier(ptr, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare !callback !207 void @__kmpc_fork_call(ptr, i32, ptr, ...) local_unnamed_addr #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #3

attributes #0 = { nounwind "target-cpu"="x86-64" }
attributes #1 = { nounwind }
attributes #2 = { convergent nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 7, !"openmp", i32 11}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{!5, !5, i64 0}
!5 = !{!"global data/_QMlu_dataEnz", !6, i64 0}
!6 = !{!"global data", !7, i64 0}
!7 = !{!"any data access", !8, i64 0}
!8 = !{!"any access", !9, i64 0}
!9 = !{!"Flang function root _QPerhs"}
!10 = !{!11, !11, i64 0}
!11 = !{!"global data/_QMlu_dataEny", !6, i64 0}
!12 = !{!13, !13, i64 0}
!13 = !{!"global data/_QMlu_dataEnx", !6, i64 0}
!14 = !{!15, !15, i64 0}
!15 = !{!"direct data/_QMlu_dataEfrct", !16, i64 0}
!16 = !{!"direct data", !7, i64 0}
!17 = !{!18, !18, i64 0}
!18 = !{!"global data/_QMlu_dataEny0", !6, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"global data/_QMlu_dataEjst", !6, i64 0}
!21 = !{!22, !22, i64 0}
!22 = !{!"global data/_QMlu_dataEjend", !6, i64 0}
!23 = !{!24, !24, i64 0}
!24 = !{!"descriptor member", !8, i64 0}
!25 = !{!26, !26, i64 0}
!26 = !{!"global data/_QMlu_dataEist", !6, i64 0}
!27 = !{!28, !28, i64 0}
!28 = !{!"global data/_QMlu_dataEiend", !6, i64 0}
!29 = !{!30, !30, i64 0}
!30 = !{!"direct data/_QMlu_dataErsd", !16, i64 0}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35}
!35 = distinct !{!35, !33}
!36 = !{!37}
!37 = distinct !{!37, !33}
!38 = !{!39}
!39 = distinct !{!39, !33}
!40 = !{!41}
!41 = distinct !{!41, !33}
!42 = !{!7, !7, i64 0}
!43 = distinct !{!43, !44, !45}
!44 = !{!"llvm.loop.isvectorized", i32 1}
!45 = !{!"llvm.loop.unroll.runtime.disable"}
!46 = !{!47, !47, i64 0}
!47 = !{!"global data/_QMlu_dataEtz2", !6, i64 0}
!48 = !{!49, !49, i64 0}
!49 = !{!"global data/_QMlu_dataEtz3", !6, i64 0}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = !{!56}
!56 = distinct !{!56, !52}
!57 = !{!58}
!58 = distinct !{!58, !52}
!59 = !{!60}
!60 = distinct !{!60, !52}
!61 = !{!62}
!62 = distinct !{!62, !52}
!63 = !{!64}
!64 = distinct !{!64, !52}
!65 = !{!66}
!66 = distinct !{!66, !52}
!67 = !{!68}
!68 = distinct !{!68, !52}
!69 = !{!70}
!70 = distinct !{!70, !52}
!71 = !{!72}
!72 = distinct !{!72, !52}
!73 = !{!74}
!74 = distinct !{!74, !52}
!75 = !{!72, !70, !68, !66, !64, !62, !60, !58, !56, !54, !51}
!76 = distinct !{!76, !44, !45}
!77 = !{!78, !78, i64 0}
!78 = !{!"global data/_QMlu_dataEdz1", !6, i64 0}
!79 = !{!80, !80, i64 0}
!80 = !{!"global data/_QMlu_dataEtz1", !6, i64 0}
!81 = !{!82, !82, i64 0}
!82 = !{!"global data/_QMlu_dataEdz2", !6, i64 0}
!83 = !{!84, !84, i64 0}
!84 = !{!"global data/_QMlu_dataEdz3", !6, i64 0}
!85 = !{!86, !86, i64 0}
!86 = !{!"global data/_QMlu_dataEdz4", !6, i64 0}
!87 = !{!88, !88, i64 0}
!88 = !{!"global data/_QMlu_dataEdz5", !6, i64 0}
!89 = !{!90, !90, i64 0}
!90 = !{!"global data/_QMlu_dataEdssp", !6, i64 0}
!91 = distinct !{!91, !44}
!92 = distinct !{!92, !44}
!93 = !{!94}
!94 = distinct !{!94, !95}
!95 = distinct !{!95, !"LVerDomain"}
!96 = !{!97}
!97 = distinct !{!97, !95}
!98 = !{!99}
!99 = distinct !{!99, !95}
!100 = !{!101}
!101 = distinct !{!101, !95}
!102 = !{!103}
!103 = distinct !{!103, !95}
!104 = distinct !{!104, !44, !45}
!105 = !{!106, !106, i64 0}
!106 = !{!"global data/_QMlu_dataEty2", !6, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"global data/_QMlu_dataEty3", !6, i64 0}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = !{!115}
!115 = distinct !{!115, !111}
!116 = !{!117}
!117 = distinct !{!117, !111}
!118 = !{!119}
!119 = distinct !{!119, !111}
!120 = !{!121}
!121 = distinct !{!121, !111}
!122 = !{!123}
!123 = distinct !{!123, !111}
!124 = !{!125}
!125 = distinct !{!125, !111}
!126 = !{!127}
!127 = distinct !{!127, !111}
!128 = !{!129}
!129 = distinct !{!129, !111}
!130 = !{!131}
!131 = distinct !{!131, !111}
!132 = !{!133}
!133 = distinct !{!133, !111}
!134 = !{!133, !131, !129, !127, !125, !123, !121, !119, !117, !115}
!135 = distinct !{!135, !44, !45}
!136 = !{!137, !137, i64 0}
!137 = !{!"global data/_QMlu_dataEdy1", !6, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"global data/_QMlu_dataEty1", !6, i64 0}
!140 = !{!141, !141, i64 0}
!141 = !{!"global data/_QMlu_dataEdy2", !6, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"global data/_QMlu_dataEdy3", !6, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"global data/_QMlu_dataEdy4", !6, i64 0}
!146 = !{!147, !147, i64 0}
!147 = !{!"global data/_QMlu_dataEdy5", !6, i64 0}
!148 = distinct !{!148, !44}
!149 = distinct !{!149, !44}
!150 = !{!151}
!151 = distinct !{!151, !152}
!152 = distinct !{!152, !"LVerDomain"}
!153 = !{!154}
!154 = distinct !{!154, !152}
!155 = !{!156}
!156 = distinct !{!156, !152}
!157 = !{!158}
!158 = distinct !{!158, !152}
!159 = !{!160}
!160 = distinct !{!160, !152}
!161 = distinct !{!161, !44, !45}
!162 = !{!163, !163, i64 0}
!163 = !{!"global data/_QMlu_dataEtx2", !6, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"global data/_QMlu_dataEtx3", !6, i64 0}
!166 = !{!167}
!167 = distinct !{!167, !168}
!168 = distinct !{!168, !"LVerDomain"}
!169 = !{!170}
!170 = distinct !{!170, !168}
!171 = !{!172}
!172 = distinct !{!172, !168}
!173 = !{!174}
!174 = distinct !{!174, !168}
!175 = !{!176}
!176 = distinct !{!176, !168}
!177 = !{!178}
!178 = distinct !{!178, !168}
!179 = !{!180}
!180 = distinct !{!180, !168}
!181 = !{!182}
!182 = distinct !{!182, !168}
!183 = !{!184}
!184 = distinct !{!184, !168}
!185 = !{!186}
!186 = distinct !{!186, !168}
!187 = !{!188}
!188 = distinct !{!188, !168}
!189 = !{!190}
!190 = distinct !{!190, !168}
!191 = !{!190, !188, !186, !184, !182, !180, !178, !176, !174, !172}
!192 = distinct !{!192, !44, !45}
!193 = !{!194, !194, i64 0}
!194 = !{!"global data/_QMlu_dataEdx1", !6, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"global data/_QMlu_dataEtx1", !6, i64 0}
!197 = !{!198, !198, i64 0}
!198 = !{!"global data/_QMlu_dataEdx2", !6, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"global data/_QMlu_dataEdx3", !6, i64 0}
!201 = !{!202, !202, i64 0}
!202 = !{!"global data/_QMlu_dataEdx4", !6, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"global data/_QMlu_dataEdx5", !6, i64 0}
!205 = distinct !{!205, !44}
!206 = distinct !{!206, !44}
!207 = !{!208}
!208 = !{i64 2, i64 -1, i64 -1, i1 true}
