; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ident_t = type { i32, i32, i32, i32, ptr }

@_QMlu_dataEa = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEb = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEc = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEd = external global [102 x [5 x [5 x double]]]
@_QMlu_dataEdssp = external local_unnamed_addr global double
@_QMlu_dataEdx1 = external local_unnamed_addr global double
@_QMlu_dataEdx2 = external local_unnamed_addr global double
@_QMlu_dataEdx3 = external local_unnamed_addr global double
@_QMlu_dataEdx4 = external local_unnamed_addr global double
@_QMlu_dataEdx5 = external local_unnamed_addr global double
@_QMlu_dataEdy1 = external local_unnamed_addr global double
@_QMlu_dataEdy2 = external local_unnamed_addr global double
@_QMlu_dataEdy3 = external local_unnamed_addr global double
@_QMlu_dataEdy4 = external local_unnamed_addr global double
@_QMlu_dataEdy5 = external local_unnamed_addr global double
@_QMlu_dataEdz1 = external local_unnamed_addr global double
@_QMlu_dataEdz2 = external local_unnamed_addr global double
@_QMlu_dataEdz3 = external local_unnamed_addr global double
@_QMlu_dataEdz4 = external local_unnamed_addr global double
@_QMlu_dataEdz5 = external local_unnamed_addr global double
@_QMlu_dataEflux = external global [102 x [5 x double]]
@_QMlu_dataEfrct = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }
@_QMlu_dataEiend = external local_unnamed_addr global i32
@_QMlu_dataEist = external local_unnamed_addr global i32
@_QMlu_dataEjend = external local_unnamed_addr global i32
@_QMlu_dataEjst = external local_unnamed_addr global i32
@_QMlu_dataEnx = external local_unnamed_addr global i32
@_QMlu_dataEny = external local_unnamed_addr global i32
@_QMlu_dataEnz = external local_unnamed_addr global i32
@_QMlu_dataEqs = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }
@_QMlu_dataErho_i = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }
@_QMlu_dataErsd = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }
@_QMlu_dataEtimeron = external local_unnamed_addr global i32
@_QMlu_dataEtx1 = external local_unnamed_addr global double
@_QMlu_dataEtx2 = external local_unnamed_addr global double
@_QMlu_dataEtx3 = external local_unnamed_addr global double
@_QMlu_dataEty1 = external local_unnamed_addr global double
@_QMlu_dataEty2 = external local_unnamed_addr global double
@_QMlu_dataEty3 = external local_unnamed_addr global double
@_QMlu_dataEtz1 = external local_unnamed_addr global double
@_QMlu_dataEtz2 = external local_unnamed_addr global double
@_QMlu_dataEtz3 = external local_unnamed_addr global double
@_QMlu_dataEu = external local_unnamed_addr global { ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }
@0 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %struct.ident_t { i32 0, i32 2, i32 0, i32 22, ptr @0 }, align 8
@_QMlu_dataEa.cache = common global ptr null, align 8
@_QMlu_dataEb.cache = common global ptr null, align 8
@_QMlu_dataEc.cache = common global ptr null, align 8
@_QMlu_dataEd.cache = common global ptr null, align 8
@_QMlu_dataEflux.cache = common global ptr null, align 8
@2 = private unnamed_addr constant %struct.ident_t { i32 0, i32 66, i32 0, i32 22, ptr @0 }, align 8

define void @rhs_() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %omp_global_thread_num5 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @1)
  %3 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEa, i64 20400, ptr nonnull @_QMlu_dataEa.cache)
  %4 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEb, i64 20400, ptr nonnull @_QMlu_dataEb.cache)
  %5 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEc, i64 20400, ptr nonnull @_QMlu_dataEc.cache)
  %6 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEd, i64 20400, ptr nonnull @_QMlu_dataEd.cache)
  %7 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num5, ptr nonnull @_QMlu_dataEflux, i64 4080, ptr nonnull @_QMlu_dataEflux.cache)
  %8 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not = icmp eq i32 %8, 0
  br i1 %.not, label %omp_parallel, label %9

9:                                                ; preds = %0
  store i32 5, ptr %2, align 4, !tbaa !10
  call void @timer_start_(ptr nonnull %2)
  br label %omp_parallel

omp_parallel:                                     ; preds = %9, %0
  call void (ptr, i32, ptr, ...) @__kmpc_fork_call(ptr nonnull @1, i32 0, ptr nonnull @rhs_..omp_par)
  %10 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not299 = icmp eq i32 %10, 0
  br i1 %.not299, label %12, label %11

11:                                               ; preds = %omp_parallel
  store i32 5, ptr %1, align 4, !tbaa !10
  call void @timer_stop_(ptr nonnull %1)
  br label %12

12:                                               ; preds = %11, %omp_parallel
  ret void
}

; Function Attrs: nounwind
define internal void @rhs_..omp_par(ptr noalias nocapture readnone %tid.addr, ptr noalias nocapture readnone %zero.addr) #1 {
omp.par.entry:
  %p.lastiter = alloca i32, align 4
  %p.lowerbound = alloca i32, align 4
  %p.upperbound = alloca i32, align 4
  %p.stride = alloca i32, align 4
  %p.lastiter86 = alloca i32, align 4
  %p.lowerbound87 = alloca i32, align 4
  %p.upperbound88 = alloca i32, align 4
  %p.stride89 = alloca i32, align 4
  %p.lastiter143 = alloca i32, align 4
  %p.lowerbound144 = alloca i32, align 4
  %p.upperbound145 = alloca i32, align 4
  %p.stride146 = alloca i32, align 4
  %p.lastiter215 = alloca i32, align 4
  %p.lowerbound216 = alloca i32, align 4
  %p.upperbound217 = alloca i32, align 4
  %p.stride218 = alloca i32, align 4
  %p.lastiter287 = alloca i32, align 4
  %p.lowerbound288 = alloca i32, align 4
  %p.upperbound289 = alloca i32, align 4
  %p.stride290 = alloca i32, align 4
  %0 = alloca i32, align 4
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %omp_global_thread_num292 = tail call i32 @__kmpc_global_thread_num(ptr nonnull @1)
  %6 = tail call ptr @__kmpc_threadprivate_cached(ptr nonnull @1, i32 %omp_global_thread_num292, ptr nonnull @_QMlu_dataEflux, i64 4080, ptr nonnull @_QMlu_dataEflux.cache)
  %7 = alloca [102 x [6 x double]], align 8
  %8 = alloca [102 x [5 x double]], align 8
  %9 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %10 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !13
  %omp_loop.tripcount = tail call i32 @llvm.smax.i32(i32 %9, i32 0)
  %omp_loop.tripcount8 = tail call i32 @llvm.smax.i32(i32 %10, i32 0)
  %11 = mul nuw i32 %omp_loop.tripcount8, %omp_loop.tripcount
  store i32 0, ptr %p.lowerbound, align 4
  %12 = add i32 %11, -1
  store i32 %12, ptr %p.upperbound, align 4
  store i32 1, ptr %p.stride, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num292, i32 34, ptr nonnull %p.lastiter, ptr nonnull %p.lowerbound, ptr nonnull %p.upperbound, ptr nonnull %p.stride, i32 1, i32 0)
  %13 = load i32, ptr %p.lowerbound, align 4
  %14 = load i32, ptr %p.upperbound, align 4
  %reass.sub6006 = sub i32 %14, %13
  %omp_collapsed.cmp5924.not = icmp eq i32 %reass.sub6006, -1
  br i1 %omp_collapsed.cmp5924.not, label %omp_collapsed.exit, label %omp_collapsed.body.lr.ph

omp_collapsed.body.lr.ph:                         ; preds = %omp.par.entry
  %15 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !15
  %16 = icmp sgt i32 %15, 0
  %.unpack5855 = load ptr, ptr @_QMlu_dataEfrct, align 8
  %.unpack5862.unpack.unpack5867 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5862.unpack5863.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1), align 8
  %.unpack5862.unpack5863.unpack5870 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5862.unpack5864.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2), align 8
  %.unpack5862.unpack5864.unpack5873 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5862.unpack5865.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7, i64 3), align 8
  %17 = mul nsw i64 %.unpack5862.unpack5863.unpack5870, %.unpack5862.unpack.unpack5867
  %18 = mul nsw i64 %.unpack5862.unpack5864.unpack5873, %17
  %.unpack5879 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack5886.unpack.unpack5891 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5886.unpack5887.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack5886.unpack5887.unpack5894 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5886.unpack5888.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack5886.unpack5888.unpack5897 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5886.unpack5889.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %19 = mul nsw i64 %.unpack5886.unpack5887.unpack5894, %.unpack5886.unpack.unpack5891
  %20 = mul nsw i64 %.unpack5886.unpack5888.unpack5897, %19
  %.unpack5763 = load ptr, ptr @_QMlu_dataEu, align 8
  %.unpack5770.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack5770.unpack.unpack5775 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5770.unpack5771.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack5770.unpack5771.unpack5778 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5770.unpack5772.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack5770.unpack5772.unpack5781 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5770.unpack5773.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %21 = mul nsw i64 %.unpack5770.unpack5771.unpack5778, %.unpack5770.unpack.unpack5775
  %22 = mul nsw i64 %.unpack5770.unpack5772.unpack5781, %21
  %.unpack5788 = load ptr, ptr @_QMlu_dataErho_i, align 8
  %.unpack5795.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7), align 8
  %.unpack5795.unpack.unpack5799 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5795.unpack5796.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1), align 8
  %.unpack5795.unpack5796.unpack5802 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5795.unpack5797.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 2), align 8
  %23 = mul nsw i64 %.unpack5795.unpack5796.unpack5802, %.unpack5795.unpack.unpack5799
  %.unpack5835 = load ptr, ptr @_QMlu_dataEqs, align 8
  %.unpack5842.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7), align 8
  %.unpack5842.unpack.unpack5846 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5842.unpack5843.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1), align 8
  %.unpack5842.unpack5843.unpack5849 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5842.unpack5844.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 2), align 8
  %24 = mul nsw i64 %.unpack5842.unpack5843.unpack5849, %.unpack5842.unpack.unpack5846
  br i1 %16, label %omp_collapsed.body.us.preheader, label %omp_collapsed.exit

omp_collapsed.body.us.preheader:                  ; preds = %omp_collapsed.body.lr.ph
  %.unpack5886.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack5862.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEfrct, i64 0, i32 7), align 8
  %25 = zext nneg i32 %15 to i64
  %26 = sub nsw i64 1, %.unpack5862.unpack.unpack
  %27 = sub nsw i64 1, %.unpack5886.unpack.unpack
  %28 = sub nsw i64 2, %.unpack5862.unpack.unpack
  %29 = sub nsw i64 2, %.unpack5886.unpack.unpack
  %30 = sub nsw i64 3, %.unpack5862.unpack.unpack
  %31 = sub nsw i64 3, %.unpack5886.unpack.unpack
  %32 = sub nsw i64 4, %.unpack5862.unpack.unpack
  %33 = sub nsw i64 4, %.unpack5886.unpack.unpack
  %34 = sub nsw i64 5, %.unpack5862.unpack.unpack
  %35 = sub nsw i64 5, %.unpack5886.unpack.unpack
  br label %omp_collapsed.body.us

omp_collapsed.body.us:                            ; preds = %omp_collapsed.body.us.preheader, %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us
  %omp_collapsed.iv5925.us = phi i32 [ %omp_collapsed.next.us, %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us ], [ 0, %omp_collapsed.body.us.preheader ]
  %36 = add i32 %omp_collapsed.iv5925.us, %13
  %37 = urem i32 %36, %omp_loop.tripcount8
  %38 = udiv i32 %36, %omp_loop.tripcount8
  %39 = add i32 %38, 1
  %40 = add nuw nsw i32 %37, 1
  %41 = zext nneg i32 %40 to i64
  %42 = sext i32 %39 to i64
  %43 = sub nsw i64 %41, %.unpack5862.unpack5864.unpack
  %44 = mul nsw i64 %43, %17
  %45 = sub nsw i64 %42, %.unpack5862.unpack5865.unpack
  %46 = mul nsw i64 %18, %45
  %47 = getelementptr double, ptr %.unpack5855, i64 %46
  %48 = getelementptr double, ptr %47, i64 %44
  %49 = sub nsw i64 %41, %.unpack5886.unpack5888.unpack
  %50 = mul nsw i64 %49, %19
  %51 = sub nsw i64 %42, %.unpack5886.unpack5889.unpack
  %52 = mul nsw i64 %20, %51
  %53 = getelementptr double, ptr %.unpack5879, i64 %52
  %54 = getelementptr double, ptr %53, i64 %50
  %55 = sub nsw i64 %41, %.unpack5770.unpack5772.unpack
  %56 = mul nsw i64 %55, %21
  %57 = sub nsw i64 %42, %.unpack5770.unpack5773.unpack
  %58 = mul nsw i64 %22, %57
  %59 = getelementptr double, ptr %.unpack5763, i64 %58
  %60 = getelementptr double, ptr %59, i64 %56
  %61 = sub nsw i64 %41, %.unpack5795.unpack5796.unpack
  %62 = mul nsw i64 %61, %.unpack5795.unpack.unpack5799
  %63 = sub nsw i64 %42, %.unpack5795.unpack5797.unpack
  %64 = mul nsw i64 %23, %63
  %65 = getelementptr double, ptr %.unpack5788, i64 %64
  %66 = getelementptr double, ptr %65, i64 %62
  %67 = sub nsw i64 %41, %.unpack5842.unpack5843.unpack
  %68 = mul nsw i64 %67, %.unpack5842.unpack.unpack5846
  %69 = sub nsw i64 %42, %.unpack5842.unpack5844.unpack
  %70 = mul nsw i64 %24, %69
  %71 = getelementptr double, ptr %.unpack5835, i64 %70
  %72 = getelementptr double, ptr %71, i64 %68
  br label %omp.wsloop.region22.preheader.us

omp.wsloop.region22.preheader.us:                 ; preds = %omp_collapsed.body.us, %omp.wsloop.region22.preheader.us
  %indvars.iv = phi i64 [ 1, %omp_collapsed.body.us ], [ %indvars.iv.next, %omp.wsloop.region22.preheader.us ]
  %73 = sub nsw i64 %indvars.iv, %.unpack5862.unpack5863.unpack
  %74 = mul nsw i64 %73, %.unpack5862.unpack.unpack5867
  %75 = getelementptr double, ptr %48, i64 %74
  %76 = sub nsw i64 %indvars.iv, %.unpack5886.unpack5887.unpack
  %77 = mul nsw i64 %76, %.unpack5886.unpack.unpack5891
  %78 = getelementptr double, ptr %54, i64 %77
  %79 = getelementptr double, ptr %75, i64 %26
  %80 = load double, ptr %79, align 8, !tbaa !17
  %81 = fneg contract double %80
  %82 = getelementptr double, ptr %78, i64 %27
  store double %81, ptr %82, align 8, !tbaa !20
  %83 = getelementptr double, ptr %75, i64 %28
  %84 = load double, ptr %83, align 8, !tbaa !17
  %85 = fneg contract double %84
  %86 = getelementptr double, ptr %78, i64 %29
  store double %85, ptr %86, align 8, !tbaa !20
  %87 = getelementptr double, ptr %75, i64 %30
  %88 = load double, ptr %87, align 8, !tbaa !17
  %89 = fneg contract double %88
  %90 = getelementptr double, ptr %78, i64 %31
  store double %89, ptr %90, align 8, !tbaa !20
  %91 = getelementptr double, ptr %75, i64 %32
  %92 = load double, ptr %91, align 8, !tbaa !17
  %93 = fneg contract double %92
  %94 = getelementptr double, ptr %78, i64 %33
  store double %93, ptr %94, align 8, !tbaa !20
  %95 = getelementptr double, ptr %75, i64 %34
  %96 = load double, ptr %95, align 8, !tbaa !17
  %97 = fneg contract double %96
  %98 = getelementptr double, ptr %78, i64 %35
  store double %97, ptr %98, align 8, !tbaa !20
  %99 = sub nsw i64 %indvars.iv, %.unpack5770.unpack5771.unpack
  %100 = mul nsw i64 %99, %.unpack5770.unpack.unpack5775
  %reass.sub5787.us = sub i64 %100, %.unpack5770.unpack.unpack
  %101 = getelementptr double, ptr %60, i64 %reass.sub5787.us
  %102 = getelementptr i8, ptr %101, i64 8
  %103 = load double, ptr %102, align 8, !tbaa !22
  %104 = fdiv contract double 1.000000e+00, %103
  %105 = sub nsw i64 %indvars.iv, %.unpack5795.unpack.unpack
  %106 = getelementptr double, ptr %66, i64 %105
  store double %104, ptr %106, align 8, !tbaa !24
  %107 = getelementptr i8, ptr %101, i64 16
  %108 = load double, ptr %107, align 8, !tbaa !22
  %109 = fmul contract double %108, %108
  %110 = getelementptr i8, ptr %101, i64 24
  %111 = load double, ptr %110, align 8, !tbaa !22
  %112 = fmul contract double %111, %111
  %113 = fadd contract double %109, %112
  %114 = getelementptr i8, ptr %101, i64 32
  %115 = load double, ptr %114, align 8, !tbaa !22
  %116 = fmul contract double %115, %115
  %117 = fadd contract double %113, %116
  %118 = fmul contract double %117, 5.000000e-01
  %119 = fmul contract double %104, %118
  %120 = sub nsw i64 %indvars.iv, %.unpack5842.unpack.unpack
  %121 = getelementptr double, ptr %72, i64 %120
  store double %119, ptr %121, align 8, !tbaa !26
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %25
  br i1 %exitcond.not, label %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us, label %omp.wsloop.region22.preheader.us

omp.wsloop.region20.omp.wsloop.region25_crit_edge.us: ; preds = %omp.wsloop.region22.preheader.us
  %omp_collapsed.next.us = add nuw i32 %omp_collapsed.iv5925.us, 1
  %exitcond6030.not = icmp eq i32 %omp_collapsed.iv5925.us, %reass.sub6006
  br i1 %exitcond6030.not, label %omp_collapsed.exit, label %omp_collapsed.body.us

omp_collapsed.exit:                               ; preds = %omp.wsloop.region20.omp.wsloop.region25_crit_edge.us, %omp_collapsed.body.lr.ph, %omp.par.entry
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num292)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num292)
  %122 = call i32 @__kmpc_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  %.not = icmp eq i32 %122, 0
  br i1 %.not, label %omp_region.end, label %omp.master.region

omp_region.end:                                   ; preds = %omp_collapsed.exit, %omp.region.cont29
  %123 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %124 = add i32 %123, -1
  %125 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !28
  %126 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !30
  %127 = icmp slt i32 %124, 2
  %128 = add i32 %123, -2
  %omp_loop.tripcount32 = select i1 %127, i32 0, i32 %128
  %129 = sub i32 %126, %125
  %130 = icmp slt i32 %126, %125
  %131 = add i32 %129, 1
  %omp_loop.tripcount36 = select i1 %130, i32 0, i32 %131
  %132 = mul nuw i32 %omp_loop.tripcount36, %omp_loop.tripcount32
  store i32 0, ptr %p.lowerbound87, align 4
  %133 = add i32 %132, -1
  store i32 %133, ptr %p.upperbound88, align 4
  store i32 1, ptr %p.stride89, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num292, i32 34, ptr nonnull %p.lastiter86, ptr nonnull %p.lowerbound87, ptr nonnull %p.upperbound88, ptr nonnull %p.stride89, i32 1, i32 0)
  %134 = load i32, ptr %p.lowerbound87, align 4
  %135 = load i32, ptr %p.upperbound88, align 4
  %reass.sub6007 = sub i32 %135, %134
  %omp_collapsed.cmp845928.not = icmp eq i32 %reass.sub6007, -1
  br i1 %omp_collapsed.cmp845928.not, label %omp_collapsed.exit81, label %omp_collapsed.body79.lr.ph

omp_collapsed.body79.lr.ph:                       ; preds = %omp_region.end
  %.unpack5597 = load ptr, ptr @_QMlu_dataEu, align 8
  %.unpack5604.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack5604.unpack.unpack5609 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5604.unpack5605.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack5604.unpack5605.unpack5612 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5604.unpack5606.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack5604.unpack5606.unpack5615 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5604.unpack5607.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %136 = mul nsw i64 %.unpack5604.unpack5605.unpack5612, %.unpack5604.unpack.unpack5609
  %137 = mul nsw i64 %.unpack5604.unpack5606.unpack5615, %136
  %.unpack5647 = load ptr, ptr @_QMlu_dataErho_i, align 8
  %.unpack5654.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7), align 8
  %.unpack5654.unpack.unpack5658 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5654.unpack5655.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1), align 8
  %.unpack5654.unpack5655.unpack5661 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5654.unpack5656.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 2), align 8
  %138 = mul nsw i64 %.unpack5654.unpack5655.unpack5661, %.unpack5654.unpack.unpack5658
  %.unpack5667 = load ptr, ptr @_QMlu_dataEqs, align 8
  %.unpack5674.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7), align 8
  %.unpack5674.unpack.unpack5678 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5674.unpack5675.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1), align 8
  %.unpack5674.unpack5675.unpack5681 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5674.unpack5676.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 2), align 8
  %139 = mul nsw i64 %.unpack5674.unpack5675.unpack5681, %.unpack5674.unpack.unpack5678
  %invariant.gep = getelementptr i8, ptr %6, i64 -40
  %.unpack5573 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack5580.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack5580.unpack.unpack5585 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5580.unpack5581.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack5580.unpack5581.unpack5588 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5580.unpack5582.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack5580.unpack5582.unpack5591 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5580.unpack5583.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %140 = mul nsw i64 %.unpack5580.unpack5581.unpack5588, %.unpack5580.unpack.unpack5585
  %141 = mul nsw i64 %.unpack5580.unpack5582.unpack5591, %140
  %142 = sub nsw i64 2, %.unpack5604.unpack.unpack
  %143 = sub nsw i64 3, %.unpack5604.unpack.unpack
  %144 = sub nsw i64 4, %.unpack5604.unpack.unpack
  %145 = sub nsw i64 5, %.unpack5604.unpack.unpack
  %146 = sub nsw i64 1, %.unpack5604.unpack.unpack
  %147 = sub nsw i64 2, %.unpack5580.unpack5581.unpack
  %148 = mul nsw i64 %147, %.unpack5580.unpack.unpack5585
  %149 = sub nsw i64 2, %.unpack5604.unpack5605.unpack
  %150 = mul nsw i64 %149, %.unpack5604.unpack.unpack5609
  %151 = sub nsw i64 3, %.unpack5604.unpack5605.unpack
  %152 = mul nsw i64 %151, %.unpack5604.unpack.unpack5609
  %153 = sub nsw i64 4, %.unpack5604.unpack5605.unpack
  %154 = mul nsw i64 %153, %.unpack5604.unpack.unpack5609
  %155 = sub nsw i64 3, %.unpack5580.unpack5581.unpack
  %156 = mul nsw i64 %155, %.unpack5580.unpack.unpack5585
  %157 = sub nsw i64 5, %.unpack5604.unpack5605.unpack
  %158 = mul nsw i64 %157, %.unpack5604.unpack.unpack5609
  %159 = sub nsw i64 1, %.unpack5580.unpack.unpack
  %160 = sub nsw i64 2, %.unpack5580.unpack.unpack
  %161 = sub nsw i64 3, %.unpack5580.unpack.unpack
  %162 = sub nsw i64 4, %.unpack5580.unpack.unpack
  %163 = sub nsw i64 5, %.unpack5580.unpack.unpack
  %164 = sub nsw i64 1, %.unpack5580.unpack.unpack
  %165 = sub nsw i64 2, %.unpack5580.unpack.unpack
  %166 = sub nsw i64 3, %.unpack5580.unpack.unpack
  %167 = sub nsw i64 4, %.unpack5580.unpack.unpack
  %168 = sub nsw i64 5, %.unpack5580.unpack.unpack
  %.unpack5171.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack5171.unpack.unpack5176 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack5171.unpack5172.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack5171.unpack5172.unpack5179 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack5171.unpack5173.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack5171.unpack5173.unpack5182 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack5171.unpack5174.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %169 = mul nsw i64 %.unpack5171.unpack5172.unpack5179, %.unpack5171.unpack.unpack5176
  %170 = mul nsw i64 %.unpack5171.unpack5173.unpack5182, %169
  %171 = xor i64 %.unpack5171.unpack5172.unpack, -1
  %172 = sub nsw i64 1, %.unpack5171.unpack.unpack
  %173 = sub nsw i64 2, %.unpack5171.unpack.unpack
  %174 = sub nsw i64 3, %.unpack5171.unpack.unpack
  %175 = sub nsw i64 4, %.unpack5171.unpack.unpack
  %176 = sub nsw i64 5, %.unpack5171.unpack.unpack
  %.unpack5044 = load ptr, ptr @_QMlu_dataErsd, align 8, !tbaa !32
  %.unpack5051.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8, !tbaa !32
  %.unpack5051.unpack.unpack5056 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8, !tbaa !32
  %.unpack5051.unpack5052.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8, !tbaa !32
  %.unpack5051.unpack5052.unpack5059 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8, !tbaa !32
  %.unpack5051.unpack5053.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8, !tbaa !32
  %.unpack5051.unpack5053.unpack5062 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8, !tbaa !32
  %.unpack5051.unpack5054.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8, !tbaa !32
  %177 = mul nsw i64 %.unpack5051.unpack5052.unpack5059, %.unpack5051.unpack.unpack5056
  %178 = mul nsw i64 %.unpack5051.unpack5053.unpack5062, %177
  %.unpack5068 = load ptr, ptr @_QMlu_dataEu, align 8, !tbaa !32
  %.unpack5075.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8, !tbaa !32
  %.unpack5075.unpack.unpack5080 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8, !tbaa !32
  %.unpack5075.unpack5076.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8, !tbaa !32
  %.unpack5075.unpack5076.unpack5083 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8, !tbaa !32
  %.unpack5075.unpack5077.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8, !tbaa !32
  %.unpack5075.unpack5077.unpack5086 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8, !tbaa !32
  %.unpack5075.unpack5078.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8, !tbaa !32
  %179 = mul nsw i64 %.unpack5075.unpack5076.unpack5083, %.unpack5075.unpack.unpack5080
  %180 = mul nsw i64 %.unpack5075.unpack5077.unpack5086, %179
  %181 = sub nsw i64 1, %.unpack5051.unpack.unpack
  %182 = sub nsw i64 1, %.unpack5075.unpack.unpack
  %183 = sub nsw i64 2, %.unpack5051.unpack.unpack
  %184 = sub nsw i64 2, %.unpack5075.unpack.unpack
  %185 = sub nsw i64 3, %.unpack5051.unpack.unpack
  %186 = sub nsw i64 3, %.unpack5075.unpack.unpack
  %187 = sub nsw i64 4, %.unpack5051.unpack.unpack
  %188 = sub nsw i64 4, %.unpack5075.unpack.unpack
  %189 = sub nsw i64 5, %.unpack5051.unpack.unpack
  %190 = sub nsw i64 5, %.unpack5075.unpack.unpack
  %scevgep = getelementptr i8, ptr %6, i64 -16
  %scevgep6198 = getelementptr i8, ptr %6, i64 -8
  %scevgep6203 = getelementptr i8, ptr %6, i64 -24
  %scevgep6208 = getelementptr i8, ptr %6, i64 -32
  %scevgep6213 = getelementptr i8, ptr %6, i64 -32
  %191 = mul i64 %.unpack5654.unpack.unpack, -8
  %scevgep6218 = getelementptr i8, ptr %.unpack5647, i64 %191
  %192 = shl i64 %.unpack5654.unpack5655.unpack5661, 3
  %scevgep6220 = getelementptr i8, ptr %.unpack5647, i64 16
  %scevgep6222 = getelementptr i8, ptr %.unpack5647, i64 %191
  %scevgep6224 = getelementptr i8, ptr %.unpack5647, i64 16
  %193 = shl i64 %.unpack5604.unpack.unpack, 3
  %194 = sub i64 40, %193
  %scevgep6226 = getelementptr i8, ptr %.unpack5597, i64 %194
  %195 = shl i64 %.unpack5604.unpack5606.unpack5615, 3
  %scevgep6228 = getelementptr i8, ptr %.unpack5597, i64 %194
  %196 = mul i64 %.unpack5604.unpack5605.unpack, -8
  %197 = sub i64 32, %193
  %scevgep6232 = getelementptr i8, ptr %.unpack5597, i64 %197
  %scevgep6234 = getelementptr i8, ptr %.unpack5597, i64 %197
  %198 = sub i64 24, %193
  %scevgep6239 = getelementptr i8, ptr %.unpack5597, i64 %198
  %scevgep6241 = getelementptr i8, ptr %.unpack5597, i64 %198
  %199 = sub i64 16, %193
  %scevgep6246 = getelementptr i8, ptr %.unpack5597, i64 %199
  %scevgep6248 = getelementptr i8, ptr %.unpack5597, i64 %199
  %scevgep6253 = getelementptr i8, ptr %.unpack5597, i64 %194
  %scevgep6255 = getelementptr i8, ptr %.unpack5597, i64 %194
  %scevgep6260 = getelementptr i8, ptr %.unpack5597, i64 %197
  %scevgep6262 = getelementptr i8, ptr %.unpack5597, i64 %197
  %scevgep6267 = getelementptr i8, ptr %.unpack5597, i64 %198
  %scevgep6269 = getelementptr i8, ptr %.unpack5597, i64 %198
  %scevgep6274 = getelementptr i8, ptr %.unpack5597, i64 %199
  %scevgep6276 = getelementptr i8, ptr %.unpack5597, i64 %199
  %scevgep6332 = getelementptr i8, ptr %6, i64 -40
  %200 = shl i64 %.unpack5604.unpack.unpack, 3
  %201 = sub i64 32, %200
  %scevgep6334 = getelementptr i8, ptr %.unpack5597, i64 %201
  %202 = shl i64 %.unpack5604.unpack5605.unpack, 3
  %203 = shl i64 %.unpack5604.unpack5606.unpack5615, 3
  %scevgep6336 = getelementptr i8, ptr %.unpack5597, i64 %201
  %204 = sub i64 24, %200
  %scevgep6341 = getelementptr i8, ptr %.unpack5597, i64 %204
  %scevgep6343 = getelementptr i8, ptr %.unpack5597, i64 %204
  %205 = sub i64 40, %200
  %scevgep6348 = getelementptr i8, ptr %.unpack5597, i64 %205
  %scevgep6350 = getelementptr i8, ptr %.unpack5597, i64 %205
  %206 = sub i64 16, %200
  %scevgep6355 = getelementptr i8, ptr %.unpack5597, i64 %206
  %scevgep6357 = getelementptr i8, ptr %.unpack5597, i64 %206
  %207 = shl i64 %.unpack5654.unpack.unpack, 3
  %208 = sub i64 8, %207
  %scevgep6362 = getelementptr i8, ptr %.unpack5647, i64 %208
  %209 = shl i64 %.unpack5654.unpack5655.unpack5661, 3
  %210 = mul i64 %.unpack5654.unpack.unpack, -8
  %scevgep6364 = getelementptr i8, ptr %.unpack5647, i64 %210
  %211 = shl i64 %.unpack5674.unpack.unpack, 3
  %212 = sub i64 8, %211
  %scevgep6366 = getelementptr i8, ptr %.unpack5667, i64 %212
  %213 = shl i64 %.unpack5674.unpack5675.unpack5681, 3
  %214 = mul i64 %.unpack5674.unpack.unpack, -8
  %scevgep6368 = getelementptr i8, ptr %.unpack5667, i64 %214
  %215 = shl i64 %.unpack5604.unpack5606.unpack, 3
  %216 = shl i64 %.unpack5654.unpack5655.unpack, 3
  %217 = shl i64 %.unpack5674.unpack5675.unpack, 3
  %invariant.gep6637 = getelementptr i8, ptr %6, i64 -40
  %218 = shl i64 %.unpack5654.unpack5655.unpack, 3
  %219 = add i64 %.unpack5654.unpack.unpack, 1
  %220 = shl i64 %.unpack5654.unpack.unpack, 3
  %221 = add i64 %220, 8
  %222 = shl i64 %.unpack5604.unpack5606.unpack, 3
  %223 = add i64 %.unpack5604.unpack5605.unpack, 1
  %224 = shl i64 %.unpack5604.unpack5605.unpack, 3
  %225 = add i64 %224, 8
  br label %omp_collapsed.body79

omp_collapsed.exit81:                             ; preds = %omp.wsloop.region73.preheader, %omp_region.end
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num292)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num292)
  %226 = call i32 @__kmpc_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  %.not3998 = icmp eq i32 %226, 0
  br i1 %.not3998, label %omp_region.end93, label %omp.master.region96

omp_region.end93:                                 ; preds = %omp_collapsed.exit81, %omp.region.cont95
  %227 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %228 = add i32 %227, -1
  %229 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !34
  %230 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !36
  %231 = icmp slt i32 %228, 2
  %232 = add i32 %227, -2
  %omp_loop.tripcount101 = select i1 %231, i32 0, i32 %232
  %233 = sub i32 %230, %229
  %234 = icmp slt i32 %230, %229
  %235 = add i32 %233, 1
  %omp_loop.tripcount105 = select i1 %234, i32 0, i32 %235
  %236 = mul nuw i32 %omp_loop.tripcount105, %omp_loop.tripcount101
  store i32 0, ptr %p.lowerbound144, align 4
  %237 = add i32 %236, -1
  store i32 %237, ptr %p.upperbound145, align 4
  store i32 1, ptr %p.stride146, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num292, i32 34, ptr nonnull %p.lastiter143, ptr nonnull %p.lowerbound144, ptr nonnull %p.upperbound145, ptr nonnull %p.stride146, i32 1, i32 0)
  %238 = load i32, ptr %p.lowerbound144, align 4
  %239 = load i32, ptr %p.upperbound145, align 4
  %reass.sub6011 = sub i32 %239, %238
  %omp_collapsed.cmp1415948.not = icmp eq i32 %reass.sub6011, -1
  br i1 %omp_collapsed.cmp1415948.not, label %omp_collapsed.exit138, label %omp_collapsed.body136.lr.ph

omp_collapsed.body136.lr.ph:                      ; preds = %omp_region.end93
  %.unpack4877 = load ptr, ptr @_QMlu_dataEu, align 8
  %.unpack4884.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack4884.unpack.unpack4889 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4884.unpack4885.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack4884.unpack4885.unpack4892 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4884.unpack4886.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack4884.unpack4886.unpack4895 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4884.unpack4887.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %240 = mul nsw i64 %.unpack4884.unpack4885.unpack4892, %.unpack4884.unpack.unpack4889
  %241 = mul nsw i64 %.unpack4884.unpack4886.unpack4895, %240
  %.unpack4927 = load ptr, ptr @_QMlu_dataErho_i, align 8
  %.unpack4934.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7), align 8
  %.unpack4934.unpack.unpack4938 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4934.unpack4935.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1), align 8
  %.unpack4934.unpack4935.unpack4941 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4934.unpack4936.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 2), align 8
  %242 = mul nsw i64 %.unpack4934.unpack4935.unpack4941, %.unpack4934.unpack.unpack4938
  %.unpack4947 = load ptr, ptr @_QMlu_dataEqs, align 8
  %.unpack4954.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7), align 8
  %.unpack4954.unpack.unpack4958 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4954.unpack4955.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1), align 8
  %.unpack4954.unpack4955.unpack4961 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4954.unpack4956.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 2), align 8
  %243 = mul nsw i64 %.unpack4954.unpack4955.unpack4961, %.unpack4954.unpack.unpack4958
  %invariant.gep5936 = getelementptr i8, ptr %6, i64 -40
  %.unpack4853 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack4860.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack4860.unpack.unpack4865 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4860.unpack4861.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack4860.unpack4861.unpack4868 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4860.unpack4862.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack4860.unpack4862.unpack4871 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4860.unpack4863.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %244 = mul nsw i64 %.unpack4860.unpack4861.unpack4868, %.unpack4860.unpack.unpack4865
  %245 = mul nsw i64 %.unpack4860.unpack4862.unpack4871, %244
  %246 = sub nsw i64 1, %.unpack4860.unpack.unpack
  %247 = sub nsw i64 2, %.unpack4860.unpack.unpack
  %248 = sub nsw i64 3, %.unpack4860.unpack.unpack
  %249 = sub nsw i64 4, %.unpack4860.unpack.unpack
  %250 = sub nsw i64 5, %.unpack4860.unpack.unpack
  %scevgep6411 = getelementptr i8, ptr %6, i64 -40
  %251 = shl i64 %.unpack4884.unpack.unpack, 3
  %252 = sub i64 32, %251
  %scevgep6413 = getelementptr i8, ptr %.unpack4877, i64 %252
  %253 = mul i64 %.unpack4884.unpack4885.unpack, -8
  %254 = shl i64 %.unpack4884.unpack4886.unpack, 3
  %255 = shl i64 %.unpack4884.unpack4886.unpack4895, 3
  %scevgep6415 = getelementptr i8, ptr %.unpack4877, i64 %252
  %256 = sub i64 40, %251
  %scevgep6420 = getelementptr i8, ptr %.unpack4877, i64 %256
  %scevgep6422 = getelementptr i8, ptr %.unpack4877, i64 %256
  %257 = sub i64 16, %251
  %scevgep6427 = getelementptr i8, ptr %.unpack4877, i64 %257
  %scevgep6429 = getelementptr i8, ptr %.unpack4877, i64 %257
  %258 = sub i64 24, %251
  %scevgep6434 = getelementptr i8, ptr %.unpack4877, i64 %258
  %scevgep6436 = getelementptr i8, ptr %.unpack4877, i64 %258
  %259 = shl i64 %.unpack4934.unpack4935.unpack, 3
  %260 = add i64 %.unpack4934.unpack.unpack, %.unpack4934.unpack4935.unpack
  %261 = shl i64 %260, 3
  %262 = sub i64 8, %261
  %scevgep6441 = getelementptr i8, ptr %.unpack4927, i64 %262
  %263 = shl i64 %.unpack4934.unpack4935.unpack4941, 3
  %264 = mul i64 %.unpack4934.unpack.unpack, -8
  %265 = sub i64 %264, %259
  %scevgep6443 = getelementptr i8, ptr %.unpack4927, i64 %265
  %266 = shl i64 %.unpack4954.unpack4955.unpack, 3
  %267 = add i64 %.unpack4954.unpack.unpack, %.unpack4954.unpack4955.unpack
  %268 = shl i64 %267, 3
  %269 = sub i64 8, %268
  %scevgep6445 = getelementptr i8, ptr %.unpack4947, i64 %269
  %270 = shl i64 %.unpack4954.unpack4955.unpack4961, 3
  %271 = mul i64 %.unpack4954.unpack.unpack, -8
  %272 = sub i64 %271, %266
  %scevgep6447 = getelementptr i8, ptr %.unpack4947, i64 %272
  %ident.check = icmp ne i64 %.unpack4934.unpack.unpack4938, 1
  %ident.check6409 = icmp ne i64 %.unpack4954.unpack.unpack4958, 1
  %273 = or i1 %ident.check, %ident.check6409
  %invariant.gep6639 = getelementptr i8, ptr %6, i64 -40
  br label %omp_collapsed.body136

omp_collapsed.exit138:                            ; preds = %omp.wsloop.region132, %omp_region.end93
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num292)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num292)
  %274 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %275 = add i32 %274, -1
  %276 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !28
  %277 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !30
  %278 = icmp slt i32 %275, 2
  %279 = add i32 %274, -2
  %omp_loop.tripcount149 = select i1 %278, i32 0, i32 %279
  %280 = sub nsw i32 %277, %276
  %281 = icmp slt i32 %277, %276
  %282 = add i32 %280, 1
  %omp_loop.tripcount153 = select i1 %281, i32 0, i32 %282
  %283 = mul nuw i32 %omp_loop.tripcount153, %omp_loop.tripcount149
  store i32 0, ptr %p.lowerbound216, align 4
  %284 = add i32 %283, -1
  store i32 %284, ptr %p.upperbound217, align 4
  store i32 1, ptr %p.stride218, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num292, i32 34, ptr nonnull %p.lastiter215, ptr nonnull %p.lowerbound216, ptr nonnull %p.upperbound217, ptr nonnull %p.stride218, i32 1, i32 0)
  %285 = load i32, ptr %p.lowerbound216, align 4
  %286 = load i32, ptr %p.upperbound217, align 4
  %reass.sub6015 = sub i32 %286, %285
  %omp_collapsed.cmp2135950.not = icmp eq i32 %reass.sub6015, -1
  br i1 %omp_collapsed.cmp2135950.not, label %omp_collapsed.exit210, label %omp_collapsed.body208.lr.ph

omp_collapsed.body208.lr.ph:                      ; preds = %omp_collapsed.exit138
  %287 = load i32, ptr @_QMlu_dataEist, align 4
  %288 = sext i32 %287 to i64
  %289 = load i32, ptr @_QMlu_dataEiend, align 4
  %290 = sext i32 %289 to i64
  %reass.sub6016 = sub nsw i64 %290, %288
  %291 = add nsw i64 %reass.sub6016, 1
  %292 = icmp sgt i64 %reass.sub6016, -1
  %.unpack4459 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack4466.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack4466.unpack.unpack4471 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4466.unpack4467.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack4466.unpack4467.unpack4474 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4466.unpack4468.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack4466.unpack4468.unpack4477 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4466.unpack4469.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %293 = mul nsw i64 %.unpack4466.unpack4467.unpack4474, %.unpack4466.unpack.unpack4471
  %294 = sub nsw i64 3, %.unpack4466.unpack4468.unpack
  %295 = mul nsw i64 %294, %293
  %296 = mul nsw i64 %.unpack4466.unpack4468.unpack4477, %293
  %invariant.gep5952 = getelementptr double, ptr %.unpack4459, i64 %295
  %297 = load double, ptr @_QMlu_dataEdssp, align 8
  %.unpack4483 = load ptr, ptr @_QMlu_dataEu, align 8
  %.unpack4490.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack4490.unpack.unpack4495 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4490.unpack4491.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack4490.unpack4491.unpack4498 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4490.unpack4492.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack4490.unpack4492.unpack4501 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4490.unpack4493.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %298 = mul nsw i64 %.unpack4490.unpack4491.unpack4498, %.unpack4490.unpack.unpack4495
  %299 = sub nsw i64 2, %.unpack4490.unpack4492.unpack
  %300 = mul nsw i64 %299, %298
  %301 = mul nsw i64 %.unpack4490.unpack4492.unpack4501, %298
  %302 = sub nsw i64 3, %.unpack4490.unpack4492.unpack
  %303 = mul nsw i64 %302, %298
  %304 = sub nsw i64 4, %.unpack4490.unpack4492.unpack
  %305 = mul nsw i64 %304, %298
  %306 = sub nsw i64 5, %.unpack4490.unpack4492.unpack
  %307 = mul nsw i64 %306, %298
  %308 = sub nsw i64 2, %.unpack4466.unpack4468.unpack
  %309 = mul nsw i64 %308, %293
  %invariant.gep5954 = getelementptr double, ptr %.unpack4459, i64 %309
  %310 = load i32, ptr @_QMlu_dataEny, align 4
  %311 = add i32 %310, -2
  %312 = add i32 %310, -1
  %313 = sext i32 %312 to i64
  %314 = sub nsw i64 %313, %.unpack4466.unpack4468.unpack
  %315 = mul nsw i64 %314, %293
  %invariant.gep5956 = getelementptr double, ptr %.unpack4459, i64 %315
  %316 = add i32 %310, -3
  %317 = sext i32 %316 to i64
  %318 = sub nsw i64 %317, %.unpack4490.unpack4492.unpack
  %319 = mul nsw i64 %318, %298
  %320 = sext i32 %311 to i64
  %321 = sub nsw i64 %320, %.unpack4490.unpack4492.unpack
  %322 = mul nsw i64 %321, %298
  %323 = sub nsw i64 %313, %.unpack4490.unpack4492.unpack
  %324 = mul nsw i64 %323, %298
  %325 = sub nsw i64 %320, %.unpack4466.unpack4468.unpack
  %326 = mul nsw i64 %325, %293
  %invariant.gep5958 = getelementptr double, ptr %.unpack4459, i64 %326
  %327 = add i32 %310, -4
  %328 = sext i32 %327 to i64
  %329 = sub nsw i64 %328, %.unpack4490.unpack4492.unpack
  %330 = mul nsw i64 %329, %298
  %331 = sub nsw i64 1, %.unpack4466.unpack.unpack
  %332 = sub nsw i64 2, %.unpack4466.unpack.unpack
  %333 = sub nsw i64 3, %.unpack4466.unpack.unpack
  %334 = sub nsw i64 4, %.unpack4466.unpack.unpack
  %335 = sub nsw i64 5, %.unpack4466.unpack.unpack
  %336 = sub nsw i64 1, %.unpack4466.unpack.unpack
  %337 = sub nsw i64 2, %.unpack4466.unpack.unpack
  %338 = sub nsw i64 3, %.unpack4466.unpack.unpack
  %339 = sub nsw i64 4, %.unpack4466.unpack.unpack
  %340 = sub nsw i64 5, %.unpack4466.unpack.unpack
  %341 = sub nsw i64 1, %.unpack4466.unpack.unpack
  %342 = sub nsw i64 2, %.unpack4466.unpack.unpack
  %343 = sub nsw i64 3, %.unpack4466.unpack.unpack
  %344 = sub nsw i64 4, %.unpack4466.unpack.unpack
  %345 = sub nsw i64 5, %.unpack4466.unpack.unpack
  %346 = sub nsw i64 1, %.unpack4466.unpack.unpack
  %347 = sub nsw i64 2, %.unpack4466.unpack.unpack
  %348 = sub nsw i64 3, %.unpack4466.unpack.unpack
  %349 = sub nsw i64 4, %.unpack4466.unpack.unpack
  %350 = sub nsw i64 5, %.unpack4466.unpack.unpack
  %351 = sub nsw i64 1, %.unpack4466.unpack.unpack
  %352 = sub nsw i64 2, %.unpack4466.unpack.unpack
  %353 = sub nsw i64 3, %.unpack4466.unpack.unpack
  %354 = sub nsw i64 4, %.unpack4466.unpack.unpack
  %355 = sub nsw i64 5, %.unpack4466.unpack.unpack
  br label %omp_collapsed.body208

omp_collapsed.exit210:                            ; preds = %omp_collapsed.inc209, %omp_collapsed.exit138
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num292)
  call void @__kmpc_barrier(ptr nonnull @2, i32 %omp_global_thread_num292)
  %356 = call i32 @__kmpc_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  %.not4001 = icmp eq i32 %356, 0
  br i1 %.not4001, label %omp_region.end222, label %omp.master.region225

omp_region.end222:                                ; preds = %omp_collapsed.exit210, %omp.region.cont224
  %357 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !28
  %358 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !30
  %359 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !34
  %360 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !36
  %361 = icmp slt i32 %358, %357
  %reass.sub6021 = sub i32 %358, %357
  %362 = add i32 %reass.sub6021, 1
  %omp_loop.tripcount230 = select i1 %361, i32 0, i32 %362
  %363 = sub nsw i32 %360, %359
  %364 = icmp slt i32 %360, %359
  %365 = add i32 %363, 1
  %omp_loop.tripcount234 = select i1 %364, i32 0, i32 %365
  %366 = mul nuw i32 %omp_loop.tripcount234, %omp_loop.tripcount230
  store i32 0, ptr %p.lowerbound288, align 4
  %367 = add i32 %366, -1
  store i32 %367, ptr %p.upperbound289, align 4
  store i32 1, ptr %p.stride290, align 4
  call void @__kmpc_for_static_init_4u(ptr nonnull @1, i32 %omp_global_thread_num292, i32 34, ptr nonnull %p.lastiter287, ptr nonnull %p.lowerbound288, ptr nonnull %p.upperbound289, ptr nonnull %p.stride290, i32 1, i32 0)
  %368 = load i32, ptr %p.lowerbound288, align 4
  %369 = load i32, ptr %p.upperbound289, align 4
  %reass.sub6022 = sub i32 %369, %368
  %invariant.gep5996 = getelementptr i8, ptr %7, i64 -48
  %omp_collapsed.cmp2856004.not = icmp eq i32 %reass.sub6022, -1
  br i1 %omp_collapsed.cmp2856004.not, label %omp_collapsed.exit282, label %omp_collapsed.body280.lr.ph

omp_collapsed.body280.lr.ph:                      ; preds = %omp_region.end222
  %.unpack4171 = load ptr, ptr @_QMlu_dataEu, align 8
  %.unpack4178.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7), align 8
  %.unpack4178.unpack.unpack4183 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4178.unpack4179.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1), align 8
  %.unpack4178.unpack4179.unpack4186 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4178.unpack4180.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2), align 8
  %.unpack4178.unpack4180.unpack4189 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4178.unpack4181.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataEu, i64 0, i32 7, i64 3), align 8
  %370 = mul nsw i64 %.unpack4178.unpack4179.unpack4186, %.unpack4178.unpack.unpack4183
  %371 = mul nsw i64 %.unpack4178.unpack4180.unpack4189, %370
  %.unpack4295 = load ptr, ptr @_QMlu_dataErho_i, align 8
  %.unpack4302.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7), align 8
  %.unpack4302.unpack.unpack4306 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4302.unpack4303.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1), align 8
  %.unpack4302.unpack4303.unpack4309 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4302.unpack4304.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataErho_i, i64 0, i32 7, i64 2), align 8
  %372 = mul nsw i64 %.unpack4302.unpack4303.unpack4309, %.unpack4302.unpack.unpack4306
  %.unpack4151 = load ptr, ptr @_QMlu_dataEqs, align 8
  %.unpack4158.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7), align 8
  %.unpack4158.unpack.unpack4162 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4158.unpack4159.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1), align 8
  %.unpack4158.unpack4159.unpack4165 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4158.unpack4160.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] }, ptr @_QMlu_dataEqs, i64 0, i32 7, i64 2), align 8
  %373 = mul nsw i64 %.unpack4158.unpack4159.unpack4165, %.unpack4158.unpack.unpack4162
  %invariant.gep5972 = getelementptr i8, ptr %6, i64 -40
  %invariant.gep5976 = getelementptr i8, ptr %8, i64 -40
  %.unpack4127 = load ptr, ptr @_QMlu_dataErsd, align 8
  %.unpack4134.unpack.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7), align 8
  %.unpack4134.unpack.unpack4139 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 0, i64 1), align 8
  %.unpack4134.unpack4135.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1), align 8
  %.unpack4134.unpack4135.unpack4142 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 1, i64 1), align 8
  %.unpack4134.unpack4136.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2), align 8
  %.unpack4134.unpack4136.unpack4145 = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 2, i64 1), align 8
  %.unpack4134.unpack4137.unpack = load i64, ptr getelementptr inbounds ({ ptr, i64, i32, i8, i8, i8, i8, [4 x [3 x i64]] }, ptr @_QMlu_dataErsd, i64 0, i32 7, i64 3), align 8
  %374 = mul nsw i64 %.unpack4134.unpack4135.unpack4142, %.unpack4134.unpack.unpack4139
  %375 = mul nsw i64 %.unpack4134.unpack4136.unpack4145, %374
  %376 = sub nsw i64 2, %.unpack4134.unpack4137.unpack
  %377 = mul nsw i64 %376, %375
  %378 = getelementptr double, ptr %.unpack4127, i64 %377
  %379 = sub nsw i64 3, %.unpack4134.unpack4137.unpack
  %380 = mul nsw i64 %379, %375
  %381 = getelementptr double, ptr %.unpack4127, i64 %380
  %382 = sub nsw i64 1, %.unpack4134.unpack.unpack
  %383 = sub nsw i64 2, %.unpack4134.unpack.unpack
  %384 = sub nsw i64 3, %.unpack4134.unpack.unpack
  %385 = sub nsw i64 4, %.unpack4134.unpack.unpack
  %386 = sub nsw i64 5, %.unpack4134.unpack.unpack
  %387 = getelementptr inbounds i8, ptr %8, i64 40
  %388 = getelementptr inbounds i8, ptr %7, i64 48
  %389 = getelementptr inbounds i8, ptr %7, i64 96
  %390 = getelementptr inbounds i8, ptr %7, i64 144
  %391 = sub nsw i64 1, %.unpack4134.unpack.unpack
  %392 = getelementptr inbounds i8, ptr %8, i64 80
  %393 = getelementptr inbounds i8, ptr %7, i64 192
  %394 = getelementptr inbounds i8, ptr %8, i64 48
  %395 = getelementptr inbounds i8, ptr %7, i64 56
  %396 = getelementptr inbounds i8, ptr %7, i64 104
  %397 = getelementptr inbounds i8, ptr %7, i64 152
  %398 = sub nsw i64 2, %.unpack4134.unpack.unpack
  %399 = getelementptr inbounds i8, ptr %8, i64 88
  %400 = getelementptr inbounds i8, ptr %7, i64 200
  %401 = getelementptr inbounds i8, ptr %8, i64 56
  %402 = getelementptr inbounds i8, ptr %7, i64 64
  %403 = getelementptr inbounds i8, ptr %7, i64 112
  %404 = getelementptr inbounds i8, ptr %7, i64 160
  %405 = sub nsw i64 3, %.unpack4134.unpack.unpack
  %406 = getelementptr inbounds i8, ptr %8, i64 96
  %407 = getelementptr inbounds i8, ptr %7, i64 208
  %408 = getelementptr inbounds i8, ptr %8, i64 64
  %409 = getelementptr inbounds i8, ptr %7, i64 72
  %410 = getelementptr inbounds i8, ptr %7, i64 120
  %411 = getelementptr inbounds i8, ptr %7, i64 168
  %412 = sub nsw i64 4, %.unpack4134.unpack.unpack
  %413 = getelementptr inbounds i8, ptr %8, i64 104
  %414 = getelementptr inbounds i8, ptr %7, i64 216
  %415 = getelementptr inbounds i8, ptr %8, i64 72
  %416 = getelementptr inbounds i8, ptr %7, i64 80
  %417 = getelementptr inbounds i8, ptr %7, i64 128
  %418 = getelementptr inbounds i8, ptr %7, i64 176
  %419 = sub nsw i64 5, %.unpack4134.unpack.unpack
  %420 = getelementptr inbounds i8, ptr %8, i64 112
  %421 = getelementptr inbounds i8, ptr %7, i64 224
  %scevgep6536 = getelementptr i8, ptr %6, i64 48
  %scevgep6538 = getelementptr inbounds i8, ptr %7, i64 8
  %scevgep6569 = getelementptr inbounds i8, ptr %8, i64 64
  %scevgep6573 = getelementptr inbounds i8, ptr %8, i64 72
  %scevgep6577 = getelementptr inbounds i8, ptr %8, i64 56
  %scevgep6581 = getelementptr inbounds i8, ptr %8, i64 48
  %scevgep6585 = getelementptr inbounds i8, ptr %8, i64 40
  %invariant.gep6641 = getelementptr i8, ptr %invariant.gep5972, i64 40
  %bound06543 = icmp ult ptr %scevgep6536, getelementptr inbounds (double, ptr @_QMlu_dataEtz3, i64 1)
  %invariant.gep6643 = getelementptr i8, ptr %6, i64 8
  br label %omp_collapsed.body280

omp_collapsed.exit282:                            ; preds = %omp.wsloop.region274.preheader, %omp_region.end222
  call void @__kmpc_for_static_fini(ptr nonnull @1, i32 %omp_global_thread_num292)
  %422 = call i32 @__kmpc_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  %.not4004 = icmp eq i32 %422, 0
  br i1 %.not4004, label %omp.par.outlined.exit.exitStub, label %omp.master.region296

omp.master.region296:                             ; preds = %omp_collapsed.exit282
  %423 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not4005 = icmp eq i32 %423, 0
  br i1 %.not4005, label %omp.region.cont295, label %omp.master.region297

omp.region.cont295:                               ; preds = %omp.master.region296, %omp.master.region297
  call void @__kmpc_end_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  br label %omp.par.outlined.exit.exitStub

omp.master.region297:                             ; preds = %omp.master.region296
  store i32 4, ptr %0, align 4, !tbaa !10
  call void @timer_stop_(ptr nonnull %0) #2
  br label %omp.region.cont295

omp_collapsed.body280:                            ; preds = %omp_collapsed.body280.lr.ph, %omp.wsloop.region274.preheader
  %omp_collapsed.iv2846005 = phi i32 [ 0, %omp_collapsed.body280.lr.ph ], [ %omp_collapsed.next286, %omp.wsloop.region274.preheader ]
  %424 = add i32 %omp_collapsed.iv2846005, %368
  %425 = urem i32 %424, %365
  %426 = udiv i32 %424, %365
  %427 = add i32 %426, %357
  %428 = add i32 %425, %359
  %429 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %430 = sext i32 %429 to i64
  %431 = icmp sgt i32 %429, 0
  br i1 %431, label %omp.wsloop.region248.lr.ph, label %omp.wsloop.region252

omp.wsloop.region248.lr.ph:                       ; preds = %omp_collapsed.body280
  %432 = sext i32 %428 to i64
  %433 = sext i32 %427 to i64
  %434 = sub nsw i64 %432, %.unpack4178.unpack4179.unpack
  %435 = mul nsw i64 %434, %.unpack4178.unpack.unpack4183
  %reass.sub = sub i64 %435, %.unpack4178.unpack.unpack
  %436 = sub nsw i64 %433, %.unpack4178.unpack4180.unpack
  %437 = mul nsw i64 %436, %370
  %invariant.gep5960 = getelementptr double, ptr %.unpack4171, i64 %437
  %invariant.gep5962 = getelementptr double, ptr %invariant.gep5960, i64 %reass.sub
  %438 = sub nsw i64 %432, %.unpack4302.unpack.unpack
  %439 = sub nsw i64 %433, %.unpack4302.unpack4303.unpack
  %440 = mul nsw i64 %439, %.unpack4302.unpack.unpack4306
  %invariant.gep5964 = getelementptr double, ptr %.unpack4295, i64 %440
  %invariant.gep5966 = getelementptr double, ptr %invariant.gep5964, i64 %438
  br label %omp.wsloop.region248

omp.wsloop.region250.preheader:                   ; preds = %omp.wsloop.region248
  br i1 %431, label %omp.wsloop.region251.lr.ph, label %omp.wsloop.region252

omp.wsloop.region251.lr.ph:                       ; preds = %omp.wsloop.region250.preheader
  %441 = sext i32 %428 to i64
  %442 = sext i32 %427 to i64
  %443 = sub nsw i64 %441, %.unpack4158.unpack.unpack
  %444 = sub nsw i64 %442, %.unpack4158.unpack4159.unpack
  %445 = mul nsw i64 %444, %.unpack4158.unpack.unpack4162
  %invariant.gep5968 = getelementptr double, ptr %.unpack4151, i64 %445
  %invariant.gep5970 = getelementptr double, ptr %invariant.gep5968, i64 %443
  br label %omp.wsloop.region251

omp.wsloop.region252.loopexit:                    ; preds = %omp.wsloop.region251
  %.pre6126 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  br label %omp.wsloop.region252

omp.wsloop.region252:                             ; preds = %omp_collapsed.body280, %omp.wsloop.region252.loopexit, %omp.wsloop.region250.preheader
  %446 = phi i32 [ %.pre6126, %omp.wsloop.region252.loopexit ], [ %429, %omp.wsloop.region250.preheader ], [ %429, %omp_collapsed.body280 ]
  %447 = add i32 %446, -1
  %448 = icmp sgt i32 %447, 1
  br i1 %448, label %omp.wsloop.region255.preheader.lr.ph, label %omp.wsloop.region258

omp.wsloop.region255.preheader.lr.ph:             ; preds = %omp.wsloop.region252
  %449 = zext nneg i32 %447 to i64
  %450 = sext i32 %428 to i64
  %451 = sext i32 %427 to i64
  %452 = sub nsw i64 %450, %.unpack4134.unpack4135.unpack
  %453 = mul nsw i64 %452, %.unpack4134.unpack.unpack4139
  %454 = sub nsw i64 %451, %.unpack4134.unpack4136.unpack
  %455 = mul nsw i64 %454, %374
  %invariant.gep5978 = getelementptr double, ptr %.unpack4127, i64 %455
  %invariant.gep5980 = getelementptr double, ptr %invariant.gep5978, i64 %453
  %456 = load double, ptr @_QMlu_dataEtz2, align 8, !tbaa !38
  %457 = add nsw i64 %449, -1
  %min.iters.check6592 = icmp ult i32 %447, 13
  br i1 %min.iters.check6592, label %omp.wsloop.region255.preheader.preheader, label %vector.scevcheck6567

vector.scevcheck6567:                             ; preds = %omp.wsloop.region255.preheader.lr.ph
  %458 = add nsw i64 %449, -2
  %459 = trunc i64 %458 to i32
  %460 = icmp ugt i32 %459, 2147483645
  %461 = icmp ugt i64 %458, 4294967295
  %462 = or i1 %460, %461
  %mul6570 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %458, i64 40)
  %mul.result6571 = extractvalue { i64, i1 } %mul6570, 0
  %mul.overflow6572 = extractvalue { i64, i1 } %mul6570, 1
  %463 = getelementptr i8, ptr %scevgep6569, i64 %mul.result6571
  %464 = icmp ult ptr %463, %scevgep6569
  %465 = or i1 %464, %mul.overflow6572
  %mul6574 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %458, i64 40)
  %mul.result6575 = extractvalue { i64, i1 } %mul6574, 0
  %mul.overflow6576 = extractvalue { i64, i1 } %mul6574, 1
  %466 = getelementptr i8, ptr %scevgep6573, i64 %mul.result6575
  %467 = icmp ult ptr %466, %scevgep6573
  %468 = or i1 %467, %mul.overflow6576
  %mul6578 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %458, i64 40)
  %mul.result6579 = extractvalue { i64, i1 } %mul6578, 0
  %mul.overflow6580 = extractvalue { i64, i1 } %mul6578, 1
  %469 = getelementptr i8, ptr %scevgep6577, i64 %mul.result6579
  %470 = icmp ult ptr %469, %scevgep6577
  %471 = or i1 %470, %mul.overflow6580
  %mul6582 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %458, i64 40)
  %mul.result6583 = extractvalue { i64, i1 } %mul6582, 0
  %mul.overflow6584 = extractvalue { i64, i1 } %mul6582, 1
  %472 = getelementptr i8, ptr %scevgep6581, i64 %mul.result6583
  %473 = icmp ult ptr %472, %scevgep6581
  %474 = or i1 %473, %mul.overflow6584
  %mul6586 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %458, i64 40)
  %mul.result6587 = extractvalue { i64, i1 } %mul6586, 0
  %mul.overflow6588 = extractvalue { i64, i1 } %mul6586, 1
  %475 = getelementptr i8, ptr %scevgep6585, i64 %mul.result6587
  %476 = icmp ult ptr %475, %scevgep6585
  %477 = or i1 %476, %mul.overflow6588
  %478 = trunc i64 %458 to i32
  %479 = icmp ugt i32 %478, 2147483644
  %480 = trunc i64 %458 to i32
  %481 = icmp ugt i32 %480, 2147483646
  %482 = or i1 %462, %465
  %483 = or i1 %482, %468
  %484 = or i1 %483, %471
  %485 = or i1 %484, %474
  %486 = or i1 %485, %477
  %487 = or i1 %479, %486
  %488 = or i1 %481, %487
  br i1 %488, label %omp.wsloop.region255.preheader.preheader, label %vector.ph6593

vector.ph6593:                                    ; preds = %vector.scevcheck6567
  %n.vec6595 = and i64 %457, -2
  %ind.end6596 = sub nsw i64 %449, %n.vec6595
  %.cast6598 = trunc nsw i64 %n.vec6595 to i32
  %ind.end6599 = add i32 %.cast6598, 2
  %broadcast.splatinsert6618 = insertelement <2 x double> poison, double %456, i64 0
  %broadcast.splat6619 = shufflevector <2 x double> %broadcast.splatinsert6618, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body6602

vector.body6602:                                  ; preds = %vector.body6602, %vector.ph6593
  %index6603 = phi i64 [ 0, %vector.ph6593 ], [ %index.next6621, %vector.body6602 ]
  %offset.idx6605 = shl i64 %index6603, 32
  %sext6628 = add i64 %offset.idx6605, 8589934592
  %489 = ashr exact i64 %sext6628, 32
  %490 = shl i64 %index6603, 32
  %sext6626 = add i64 %490, 12884901888
  %491 = ashr exact i64 %sext6626, 32
  %492 = sub nsw i64 %489, %.unpack4134.unpack4137.unpack
  %493 = sub nsw i64 %491, %.unpack4134.unpack4137.unpack
  %494 = mul nsw i64 %375, %492
  %495 = mul nsw i64 %375, %493
  %496 = getelementptr double, ptr %invariant.gep5980, i64 %494
  %497 = getelementptr double, ptr %invariant.gep5980, i64 %495
  %498 = shl i64 %index6603, 32
  %sext6627 = add i64 %498, 12884901888
  %499 = ashr exact i64 %sext6627, 32
  %500 = mul nsw i64 %499, 5
  %501 = getelementptr double, ptr %invariant.gep5972, i64 %500
  %502 = shl i64 %index6603, 32
  %sext6629 = ashr exact i64 %502, 32
  %503 = mul nsw i64 %sext6629, 5
  %gep6642 = getelementptr double, ptr %invariant.gep6641, i64 %503
  %504 = mul nsw i64 %489, 5
  %505 = getelementptr double, ptr %invariant.gep5976, i64 %504
  %506 = getelementptr double, ptr %496, i64 %382
  %507 = getelementptr double, ptr %497, i64 %382
  %508 = load double, ptr %506, align 8, !tbaa !20
  %509 = load double, ptr %507, align 8, !tbaa !20
  %510 = insertelement <2 x double> poison, double %508, i64 0
  %511 = insertelement <2 x double> %510, double %509, i64 1
  %wide.vec6606 = load <10 x double>, ptr %501, align 8, !tbaa !10
  %wide.vec6612 = load <10 x double>, ptr %gep6642, align 8, !tbaa !10
  %512 = fsub contract <10 x double> %wide.vec6606, %wide.vec6612
  %513 = shufflevector <10 x double> %512, <10 x double> poison, <2 x i32> <i32 0, i32 5>
  %514 = fmul contract <2 x double> %broadcast.splat6619, %513
  %515 = fsub contract <2 x double> %511, %514
  %516 = getelementptr double, ptr %496, i64 %383
  %517 = getelementptr double, ptr %497, i64 %383
  %518 = load double, ptr %516, align 8, !tbaa !20
  %519 = load double, ptr %517, align 8, !tbaa !20
  %520 = insertelement <2 x double> poison, double %518, i64 0
  %521 = insertelement <2 x double> %520, double %519, i64 1
  %522 = fsub contract <10 x double> %wide.vec6606, %wide.vec6612
  %523 = shufflevector <10 x double> %522, <10 x double> poison, <2 x i32> <i32 1, i32 6>
  %524 = fmul contract <2 x double> %broadcast.splat6619, %523
  %525 = fsub contract <2 x double> %521, %524
  %526 = getelementptr double, ptr %496, i64 %384
  %527 = getelementptr double, ptr %497, i64 %384
  %528 = load double, ptr %526, align 8, !tbaa !20
  %529 = load double, ptr %527, align 8, !tbaa !20
  %530 = insertelement <2 x double> poison, double %528, i64 0
  %531 = insertelement <2 x double> %530, double %529, i64 1
  %532 = fsub contract <10 x double> %wide.vec6606, %wide.vec6612
  %533 = shufflevector <10 x double> %532, <10 x double> poison, <2 x i32> <i32 2, i32 7>
  %534 = fmul contract <2 x double> %broadcast.splat6619, %533
  %535 = fsub contract <2 x double> %531, %534
  %536 = getelementptr double, ptr %496, i64 %385
  %537 = getelementptr double, ptr %497, i64 %385
  %538 = load double, ptr %536, align 8, !tbaa !20
  %539 = load double, ptr %537, align 8, !tbaa !20
  %540 = insertelement <2 x double> poison, double %538, i64 0
  %541 = insertelement <2 x double> %540, double %539, i64 1
  %542 = fsub contract <10 x double> %wide.vec6606, %wide.vec6612
  %543 = shufflevector <10 x double> %542, <10 x double> poison, <2 x i32> <i32 3, i32 8>
  %544 = fmul contract <2 x double> %broadcast.splat6619, %543
  %545 = fsub contract <2 x double> %541, %544
  %546 = getelementptr double, ptr %496, i64 %386
  %547 = getelementptr double, ptr %497, i64 %386
  %548 = load double, ptr %546, align 8, !tbaa !20
  %549 = load double, ptr %547, align 8, !tbaa !20
  %550 = insertelement <2 x double> poison, double %548, i64 0
  %551 = insertelement <2 x double> %550, double %549, i64 1
  %552 = fsub contract <10 x double> %wide.vec6606, %wide.vec6612
  %553 = shufflevector <10 x double> %552, <10 x double> poison, <2 x i32> <i32 4, i32 9>
  %554 = fmul contract <2 x double> %broadcast.splat6619, %553
  %555 = fsub contract <2 x double> %551, %554
  %556 = shufflevector <2 x double> %515, <2 x double> %525, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %557 = shufflevector <2 x double> %535, <2 x double> %545, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %558 = shufflevector <4 x double> %556, <4 x double> %557, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %559 = shufflevector <2 x double> %555, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec6620 = shufflevector <8 x double> %558, <8 x double> %559, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec6620, ptr %505, align 8, !tbaa !10
  %index.next6621 = add nuw i64 %index6603, 2
  %560 = icmp eq i64 %index.next6621, %n.vec6595
  br i1 %560, label %middle.block6590, label %vector.body6602, !llvm.loop !40

middle.block6590:                                 ; preds = %vector.body6602
  %cmp.n6601 = icmp eq i64 %457, %n.vec6595
  br i1 %cmp.n6601, label %omp.wsloop.region258, label %omp.wsloop.region255.preheader.preheader

omp.wsloop.region255.preheader.preheader:         ; preds = %vector.scevcheck6567, %omp.wsloop.region255.preheader.lr.ph, %middle.block6590
  %.in.ph = phi i64 [ %449, %vector.scevcheck6567 ], [ %449, %omp.wsloop.region255.preheader.lr.ph ], [ %ind.end6596, %middle.block6590 ]
  %.ph = phi i32 [ 2, %vector.scevcheck6567 ], [ 2, %omp.wsloop.region255.preheader.lr.ph ], [ %ind.end6599, %middle.block6590 ]
  br label %omp.wsloop.region255.preheader

omp.wsloop.region255.preheader:                   ; preds = %omp.wsloop.region255.preheader.preheader, %omp.wsloop.region255.preheader
  %.in = phi i64 [ %619, %omp.wsloop.region255.preheader ], [ %.in.ph, %omp.wsloop.region255.preheader.preheader ]
  %561 = phi i32 [ %565, %omp.wsloop.region255.preheader ], [ %.ph, %omp.wsloop.region255.preheader.preheader ]
  %562 = sext i32 %561 to i64
  %563 = sub nsw i64 %562, %.unpack4134.unpack4137.unpack
  %564 = mul nsw i64 %375, %563
  %gep5981 = getelementptr double, ptr %invariant.gep5980, i64 %564
  %565 = add i32 %561, 1
  %566 = sext i32 %565 to i64
  %567 = mul nsw i64 %566, 5
  %gep5973 = getelementptr double, ptr %invariant.gep5972, i64 %567
  %568 = add i32 %561, -1
  %569 = sext i32 %568 to i64
  %570 = mul nsw i64 %569, 5
  %gep5975 = getelementptr double, ptr %invariant.gep5972, i64 %570
  %571 = mul nsw i64 %562, 5
  %gep5977 = getelementptr double, ptr %invariant.gep5976, i64 %571
  %572 = getelementptr double, ptr %gep5981, i64 %382
  %573 = load double, ptr %572, align 8, !tbaa !20
  %574 = load double, ptr %gep5973, align 8, !tbaa !10
  %575 = load double, ptr %gep5975, align 8, !tbaa !10
  %576 = fsub contract double %574, %575
  %577 = fmul contract double %456, %576
  %578 = fsub contract double %573, %577
  store double %578, ptr %gep5977, align 8, !tbaa !10
  %579 = getelementptr double, ptr %gep5981, i64 %383
  %580 = load double, ptr %579, align 8, !tbaa !20
  %581 = getelementptr i8, ptr %gep5973, i64 8
  %582 = load double, ptr %581, align 8, !tbaa !10
  %583 = getelementptr i8, ptr %gep5975, i64 8
  %584 = load double, ptr %583, align 8, !tbaa !10
  %585 = fsub contract double %582, %584
  %586 = fmul contract double %456, %585
  %587 = fsub contract double %580, %586
  %588 = getelementptr i8, ptr %gep5977, i64 8
  store double %587, ptr %588, align 8, !tbaa !10
  %589 = getelementptr double, ptr %gep5981, i64 %384
  %590 = load double, ptr %589, align 8, !tbaa !20
  %591 = getelementptr i8, ptr %gep5973, i64 16
  %592 = load double, ptr %591, align 8, !tbaa !10
  %593 = getelementptr i8, ptr %gep5975, i64 16
  %594 = load double, ptr %593, align 8, !tbaa !10
  %595 = fsub contract double %592, %594
  %596 = fmul contract double %456, %595
  %597 = fsub contract double %590, %596
  %598 = getelementptr i8, ptr %gep5977, i64 16
  store double %597, ptr %598, align 8, !tbaa !10
  %599 = getelementptr double, ptr %gep5981, i64 %385
  %600 = load double, ptr %599, align 8, !tbaa !20
  %601 = getelementptr i8, ptr %gep5973, i64 24
  %602 = load double, ptr %601, align 8, !tbaa !10
  %603 = getelementptr i8, ptr %gep5975, i64 24
  %604 = load double, ptr %603, align 8, !tbaa !10
  %605 = fsub contract double %602, %604
  %606 = fmul contract double %456, %605
  %607 = fsub contract double %600, %606
  %608 = getelementptr i8, ptr %gep5977, i64 24
  store double %607, ptr %608, align 8, !tbaa !10
  %609 = getelementptr double, ptr %gep5981, i64 %386
  %610 = load double, ptr %609, align 8, !tbaa !20
  %611 = getelementptr i8, ptr %gep5973, i64 32
  %612 = load double, ptr %611, align 8, !tbaa !10
  %613 = getelementptr i8, ptr %gep5975, i64 32
  %614 = load double, ptr %613, align 8, !tbaa !10
  %615 = fsub contract double %612, %614
  %616 = fmul contract double %456, %615
  %617 = fsub contract double %610, %616
  %618 = getelementptr i8, ptr %gep5977, i64 32
  store double %617, ptr %618, align 8, !tbaa !10
  %619 = add nsw i64 %.in, -1
  %620 = icmp ugt i64 %.in, 2
  br i1 %620, label %omp.wsloop.region255.preheader, label %omp.wsloop.region258, !llvm.loop !43

omp.wsloop.region258:                             ; preds = %omp.wsloop.region255.preheader, %middle.block6590, %omp.wsloop.region252
  %621 = icmp sgt i32 %446, 1
  br i1 %621, label %omp.wsloop.region260.preheader, label %omp.wsloop.region261

omp.wsloop.region260.preheader:                   ; preds = %omp.wsloop.region258
  %622 = zext nneg i32 %446 to i64
  %623 = add nsw i64 %622, -1
  %min.iters.check6549 = icmp ult i32 %446, 4
  br i1 %min.iters.check6549, label %omp.wsloop.region260.preheader6630, label %vector.memcheck6535

omp.wsloop.region260.preheader6630:               ; preds = %vector.body6555, %vector.memcheck6535, %omp.wsloop.region260.preheader
  %indvars.iv6098.ph = phi i64 [ 2, %vector.memcheck6535 ], [ 2, %omp.wsloop.region260.preheader ], [ %ind.end6553, %vector.body6555 ]
  br label %omp.wsloop.region260

vector.memcheck6535:                              ; preds = %omp.wsloop.region260.preheader
  %624 = mul nuw nsw i64 %622, 40
  %scevgep6537 = getelementptr i8, ptr %6, i64 %624
  %625 = mul nuw nsw i64 %622, 48
  %scevgep6539 = getelementptr i8, ptr %7, i64 %625
  %bound06540 = icmp ult ptr %scevgep6536, %scevgep6539
  %bound16541 = icmp ult ptr %scevgep6538, %scevgep6537
  %found.conflict6542 = and i1 %bound06540, %bound16541
  %bound16544 = icmp ugt ptr %scevgep6537, @_QMlu_dataEtz3
  %found.conflict6545 = and i1 %bound06543, %bound16544
  %conflict.rdx6546 = or i1 %found.conflict6542, %found.conflict6545
  br i1 %conflict.rdx6546, label %omp.wsloop.region260.preheader6630, label %vector.ph6550

vector.ph6550:                                    ; preds = %vector.memcheck6535
  %n.mod.vf6551 = and i64 %623, 1
  %626 = icmp eq i64 %n.mod.vf6551, 0
  %627 = select i1 %626, i64 2, i64 %n.mod.vf6551
  %n.vec6552 = sub nsw i64 %623, %627
  %ind.end6553 = add nsw i64 %n.vec6552, 2
  %628 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44, !alias.scope !46
  %broadcast.splatinsert6558 = insertelement <2 x double> poison, double %628, i64 0
  %broadcast.splat6559 = shufflevector <2 x double> %broadcast.splatinsert6558, <2 x double> poison, <2 x i32> zeroinitializer
  %629 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44, !alias.scope !46
  %broadcast.splatinsert6560 = insertelement <2 x double> poison, double %629, i64 0
  %broadcast.splat6561 = shufflevector <2 x double> %broadcast.splatinsert6560, <2 x double> poison, <2 x i32> zeroinitializer
  %630 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44, !alias.scope !46
  %broadcast.splatinsert6562 = insertelement <2 x double> poison, double %630, i64 0
  %631 = fmul contract <2 x double> %broadcast.splatinsert6562, <double 0x3FF5555555555555, double poison>
  %632 = shufflevector <2 x double> %631, <2 x double> poison, <2 x i32> zeroinitializer
  %633 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44, !alias.scope !46
  %broadcast.splatinsert6564 = insertelement <2 x double> poison, double %633, i64 0
  %broadcast.splat6565 = shufflevector <2 x double> %broadcast.splatinsert6564, <2 x double> poison, <2 x i32> zeroinitializer
  %634 = fmul contract <2 x double> %broadcast.splat6565, <double 0x3FDEB851EB851EB6, double 0x3FDEB851EB851EB6>
  %635 = fmul contract <2 x double> %broadcast.splat6565, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %636 = fmul contract <2 x double> %broadcast.splat6565, <double 0x3FFF5C28F5C28F5B, double 0x3FFF5C28F5C28F5B>
  br label %vector.body6555

vector.body6555:                                  ; preds = %vector.body6555, %vector.ph6550
  %index6556 = phi i64 [ 0, %vector.ph6550 ], [ %index.next6566, %vector.body6555 ]
  %637 = or disjoint i64 %index6556, 1
  %638 = add i64 %index6556, 2
  %639 = mul nuw nsw i64 %637, 6
  %640 = mul nuw nsw i64 %638, 6
  %641 = getelementptr double, ptr %7, i64 %639
  %642 = getelementptr double, ptr %7, i64 %640
  %643 = getelementptr i8, ptr %641, i64 40
  %644 = getelementptr i8, ptr %642, i64 40
  %645 = load double, ptr %643, align 8, !tbaa !10, !alias.scope !49
  %646 = load double, ptr %644, align 8, !tbaa !10, !alias.scope !49
  %647 = insertelement <2 x double> poison, double %645, i64 0
  %648 = insertelement <2 x double> %647, double %646, i64 1
  %649 = or disjoint i64 %639, 1
  %650 = or disjoint i64 %640, 1
  %651 = getelementptr double, ptr %7, i64 %649
  %652 = getelementptr double, ptr %7, i64 %650
  %653 = load double, ptr %651, align 8, !tbaa !10, !alias.scope !49
  %654 = load double, ptr %652, align 8, !tbaa !10, !alias.scope !49
  %655 = insertelement <2 x double> poison, double %653, i64 0
  %656 = insertelement <2 x double> %655, double %654, i64 1
  %657 = fmul contract <2 x double> %648, %656
  %658 = getelementptr i8, ptr %641, i64 16
  %659 = getelementptr i8, ptr %642, i64 16
  %660 = load double, ptr %658, align 8, !tbaa !10, !alias.scope !49
  %661 = load double, ptr %659, align 8, !tbaa !10, !alias.scope !49
  %662 = insertelement <2 x double> poison, double %660, i64 0
  %663 = insertelement <2 x double> %662, double %661, i64 1
  %664 = fmul contract <2 x double> %648, %663
  %665 = getelementptr i8, ptr %641, i64 24
  %666 = getelementptr i8, ptr %642, i64 24
  %667 = load double, ptr %665, align 8, !tbaa !10, !alias.scope !49
  %668 = load double, ptr %666, align 8, !tbaa !10, !alias.scope !49
  %669 = insertelement <2 x double> poison, double %667, i64 0
  %670 = insertelement <2 x double> %669, double %668, i64 1
  %671 = fmul contract <2 x double> %648, %670
  %672 = getelementptr i8, ptr %641, i64 32
  %673 = getelementptr i8, ptr %642, i64 32
  %674 = load double, ptr %672, align 8, !tbaa !10, !alias.scope !49
  %675 = load double, ptr %673, align 8, !tbaa !10, !alias.scope !49
  %676 = insertelement <2 x double> poison, double %674, i64 0
  %677 = insertelement <2 x double> %676, double %675, i64 1
  %678 = fmul contract <2 x double> %648, %677
  %679 = getelementptr i8, ptr %641, i64 -8
  %680 = getelementptr i8, ptr %642, i64 -8
  %681 = load double, ptr %679, align 8, !tbaa !10, !alias.scope !49
  %682 = load double, ptr %680, align 8, !tbaa !10, !alias.scope !49
  %683 = insertelement <2 x double> poison, double %681, i64 0
  %684 = insertelement <2 x double> %683, double %682, i64 1
  %685 = getelementptr i8, ptr %641, i64 -40
  %686 = getelementptr i8, ptr %642, i64 -40
  %687 = load double, ptr %685, align 8, !tbaa !10, !alias.scope !49
  %688 = load double, ptr %686, align 8, !tbaa !10, !alias.scope !49
  %689 = insertelement <2 x double> poison, double %687, i64 0
  %690 = insertelement <2 x double> %689, double %688, i64 1
  %691 = fmul contract <2 x double> %684, %690
  %692 = getelementptr i8, ptr %641, i64 -32
  %693 = getelementptr i8, ptr %642, i64 -32
  %694 = load double, ptr %692, align 8, !tbaa !10, !alias.scope !49
  %695 = load double, ptr %693, align 8, !tbaa !10, !alias.scope !49
  %696 = insertelement <2 x double> poison, double %694, i64 0
  %697 = insertelement <2 x double> %696, double %695, i64 1
  %698 = fmul contract <2 x double> %684, %697
  %699 = getelementptr i8, ptr %641, i64 -24
  %700 = getelementptr i8, ptr %642, i64 -24
  %701 = load double, ptr %699, align 8, !tbaa !10, !alias.scope !49
  %702 = load double, ptr %700, align 8, !tbaa !10, !alias.scope !49
  %703 = insertelement <2 x double> poison, double %701, i64 0
  %704 = insertelement <2 x double> %703, double %702, i64 1
  %705 = fmul contract <2 x double> %684, %704
  %706 = getelementptr i8, ptr %641, i64 -16
  %707 = getelementptr i8, ptr %642, i64 -16
  %708 = load double, ptr %706, align 8, !tbaa !10, !alias.scope !49
  %709 = load double, ptr %707, align 8, !tbaa !10, !alias.scope !49
  %710 = insertelement <2 x double> poison, double %708, i64 0
  %711 = insertelement <2 x double> %710, double %709, i64 1
  %712 = fmul contract <2 x double> %684, %711
  %713 = fsub contract <2 x double> %657, %691
  %714 = fmul contract <2 x double> %713, %broadcast.splat6559
  %715 = mul nuw nsw i64 %637, 5
  %716 = mul nuw nsw i64 %638, 5
  %717 = getelementptr double, ptr %6, i64 %715
  %718 = getelementptr double, ptr %6, i64 %716
  %719 = getelementptr i8, ptr %717, i64 8
  %720 = getelementptr i8, ptr %718, i64 8
  %721 = extractelement <2 x double> %714, i64 0
  store double %721, ptr %719, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %722 = extractelement <2 x double> %714, i64 1
  store double %722, ptr %720, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %723 = fsub contract <2 x double> %664, %698
  %724 = fmul contract <2 x double> %723, %broadcast.splat6561
  %725 = getelementptr i8, ptr %717, i64 16
  %726 = getelementptr i8, ptr %718, i64 16
  %727 = extractelement <2 x double> %724, i64 0
  store double %727, ptr %725, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %728 = extractelement <2 x double> %724, i64 1
  store double %728, ptr %726, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %729 = fsub contract <2 x double> %671, %705
  %730 = fmul contract <2 x double> %729, %632
  %731 = getelementptr i8, ptr %717, i64 24
  %732 = getelementptr i8, ptr %718, i64 24
  %733 = extractelement <2 x double> %730, i64 0
  store double %733, ptr %731, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %734 = extractelement <2 x double> %730, i64 1
  store double %734, ptr %732, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %735 = fmul <2 x double> %657, %657
  %736 = fmul <2 x double> %664, %664
  %737 = fadd contract <2 x double> %735, %736
  %738 = fmul <2 x double> %671, %671
  %739 = fadd contract <2 x double> %737, %738
  %740 = fmul <2 x double> %691, %691
  %741 = fmul <2 x double> %698, %698
  %742 = fadd contract <2 x double> %740, %741
  %743 = fmul <2 x double> %705, %705
  %744 = fadd contract <2 x double> %742, %743
  %745 = fsub contract <2 x double> %739, %744
  %746 = fmul contract <2 x double> %745, %634
  %747 = fsub contract <2 x double> %738, %743
  %748 = fmul contract <2 x double> %747, %635
  %749 = fsub contract <2 x double> %748, %746
  %750 = fsub contract <2 x double> %678, %712
  %751 = fmul contract <2 x double> %750, %636
  %752 = fadd contract <2 x double> %751, %749
  %753 = getelementptr i8, ptr %717, i64 32
  %754 = getelementptr i8, ptr %718, i64 32
  %755 = extractelement <2 x double> %752, i64 0
  store double %755, ptr %753, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %756 = extractelement <2 x double> %752, i64 1
  store double %756, ptr %754, align 8, !tbaa !10, !alias.scope !51, !noalias !53
  %index.next6566 = add nuw i64 %index6556, 2
  %757 = icmp eq i64 %index.next6566, %n.vec6552
  br i1 %757, label %omp.wsloop.region260.preheader6630, label %vector.body6555, !llvm.loop !54

omp.wsloop.region261.loopexit:                    ; preds = %omp.wsloop.region260
  %.pre6127 = load i32, ptr @_QMlu_dataEnz, align 4, !tbaa !11
  %.pre6128 = add i32 %.pre6127, -1
  br label %omp.wsloop.region261

omp.wsloop.region261:                             ; preds = %omp.wsloop.region261.loopexit, %omp.wsloop.region258
  %.pre-phi = phi i32 [ %.pre6128, %omp.wsloop.region261.loopexit ], [ %447, %omp.wsloop.region258 ]
  %758 = phi i32 [ %.pre6127, %omp.wsloop.region261.loopexit ], [ %446, %omp.wsloop.region258 ]
  %759 = sext i32 %.pre-phi to i64
  %760 = icmp sgt i32 %.pre-phi, 1
  br i1 %760, label %omp.wsloop.region263.lr.ph, label %omp.wsloop.region265.preheader

omp.wsloop.region263.lr.ph:                       ; preds = %omp.wsloop.region261
  %761 = load double, ptr @_QMlu_dataEdz1, align 8, !tbaa !55
  %762 = load double, ptr @_QMlu_dataEtz1, align 8, !tbaa !57
  %763 = fmul contract double %761, %762
  %764 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44
  %765 = fmul contract double %764, 1.000000e-01
  %766 = load double, ptr @_QMlu_dataEdz2, align 8, !tbaa !59
  %767 = fmul contract double %762, %766
  %768 = load double, ptr @_QMlu_dataEdz3, align 8, !tbaa !61
  %769 = fmul contract double %762, %768
  %770 = load double, ptr @_QMlu_dataEdz4, align 8, !tbaa !63
  %771 = fmul contract double %762, %770
  %772 = load double, ptr @_QMlu_dataEdz5, align 8, !tbaa !65
  %773 = fmul contract double %762, %772
  %774 = add nsw i64 %759, -1
  %min.iters.check6491 = icmp ult i32 %.pre-phi, 4
  br i1 %min.iters.check6491, label %omp.wsloop.region263.preheader, label %vector.scevcheck6488

omp.wsloop.region263.preheader:                   ; preds = %vector.body6497, %vector.scevcheck6488, %omp.wsloop.region263.lr.ph
  %indvars.iv6102.ph = phi i64 [ 2, %vector.scevcheck6488 ], [ 2, %omp.wsloop.region263.lr.ph ], [ %ind.end6495, %vector.body6497 ]
  br label %omp.wsloop.region263

vector.scevcheck6488:                             ; preds = %omp.wsloop.region263.lr.ph
  %775 = add nsw i64 %759, -2
  %776 = trunc i64 %775 to i32
  %777 = icmp ugt i32 %776, 2147483644
  %778 = icmp ugt i64 %775, 4294967295
  %779 = or i1 %777, %778
  br i1 %779, label %omp.wsloop.region263.preheader, label %vector.ph6492

vector.ph6492:                                    ; preds = %vector.scevcheck6488
  %n.mod.vf6493 = and i64 %774, 1
  %780 = icmp eq i64 %n.mod.vf6493, 0
  %781 = select i1 %780, i64 2, i64 %n.mod.vf6493
  %n.vec6494 = sub nsw i64 %774, %781
  %ind.end6495 = add nsw i64 %n.vec6494, 2
  %broadcast.splatinsert6516 = insertelement <2 x double> poison, double %763, i64 0
  %broadcast.splat6517 = shufflevector <2 x double> %broadcast.splatinsert6516, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert6523 = insertelement <2 x double> poison, double %765, i64 0
  %broadcast.splat6524 = shufflevector <2 x double> %broadcast.splatinsert6523, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert6525 = insertelement <2 x double> poison, double %767, i64 0
  %broadcast.splat6526 = shufflevector <2 x double> %broadcast.splatinsert6525, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert6527 = insertelement <2 x double> poison, double %769, i64 0
  %broadcast.splat6528 = shufflevector <2 x double> %broadcast.splatinsert6527, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert6529 = insertelement <2 x double> poison, double %771, i64 0
  %broadcast.splat6530 = shufflevector <2 x double> %broadcast.splatinsert6529, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert6531 = insertelement <2 x double> poison, double %773, i64 0
  %broadcast.splat6532 = shufflevector <2 x double> %broadcast.splatinsert6531, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body6497

vector.body6497:                                  ; preds = %vector.body6497, %vector.ph6492
  %index6498 = phi i64 [ 0, %vector.ph6492 ], [ %index.next6534, %vector.body6497 ]
  %782 = or disjoint i64 %index6498, 1
  %783 = mul nuw nsw i64 %782, 5
  %784 = getelementptr double, ptr %8, i64 %783
  %wide.vec = load <10 x double>, ptr %784, align 8, !tbaa !10
  %strided.vec = shufflevector <10 x double> %wide.vec, <10 x double> poison, <2 x i32> <i32 0, i32 5>
  %strided.vec6500 = shufflevector <10 x double> %wide.vec, <10 x double> poison, <2 x i32> <i32 1, i32 6>
  %strided.vec6501 = shufflevector <10 x double> %wide.vec, <10 x double> poison, <2 x i32> <i32 2, i32 7>
  %strided.vec6502 = shufflevector <10 x double> %wide.vec, <10 x double> poison, <2 x i32> <i32 3, i32 8>
  %strided.vec6503 = shufflevector <10 x double> %wide.vec, <10 x double> poison, <2 x i32> <i32 4, i32 9>
  %785 = mul nuw nsw i64 %782, 6
  %786 = mul i64 %index6498, 6
  %787 = getelementptr double, ptr %7, i64 %785
  %788 = getelementptr double, ptr %7, i64 %786
  %789 = getelementptr i8, ptr %787, i64 -48
  %790 = getelementptr i8, ptr %788, i64 48
  %791 = load double, ptr %789, align 8, !tbaa !10
  %792 = load double, ptr %790, align 8, !tbaa !10
  %793 = insertelement <2 x double> poison, double %791, i64 0
  %794 = insertelement <2 x double> %793, double %792, i64 1
  %wide.vec6504 = load <12 x double>, ptr %787, align 8, !tbaa !10
  %strided.vec6505 = shufflevector <12 x double> %wide.vec6504, <12 x double> poison, <2 x i32> <i32 0, i32 6>
  %strided.vec6506 = shufflevector <12 x double> %wide.vec6504, <12 x double> poison, <2 x i32> <i32 1, i32 7>
  %strided.vec6507 = shufflevector <12 x double> %wide.vec6504, <12 x double> poison, <2 x i32> <i32 2, i32 8>
  %strided.vec6508 = shufflevector <12 x double> %wide.vec6504, <12 x double> poison, <2 x i32> <i32 3, i32 9>
  %strided.vec6509 = shufflevector <12 x double> %wide.vec6504, <12 x double> poison, <2 x i32> <i32 4, i32 10>
  %795 = fmul contract <2 x double> %strided.vec6505, <double 2.000000e+00, double 2.000000e+00>
  %796 = fsub contract <2 x double> %794, %795
  %797 = shl i64 %index6498, 32
  %798 = add i64 %797, 12884901888
  %799 = shl i64 %index6498, 32
  %800 = add i64 %799, 17179869184
  %801 = ashr exact i64 %798, 32
  %802 = ashr exact i64 %800, 32
  %803 = add nsw i64 %801, -1
  %804 = mul nsw i64 %803, 6
  %805 = getelementptr double, ptr %7, i64 %804
  %wide.vec6510 = load <12 x double>, ptr %805, align 8, !tbaa !10
  %strided.vec6511 = shufflevector <12 x double> %wide.vec6510, <12 x double> poison, <2 x i32> <i32 0, i32 6>
  %strided.vec6512 = shufflevector <12 x double> %wide.vec6510, <12 x double> poison, <2 x i32> <i32 1, i32 7>
  %strided.vec6513 = shufflevector <12 x double> %wide.vec6510, <12 x double> poison, <2 x i32> <i32 2, i32 8>
  %strided.vec6514 = shufflevector <12 x double> %wide.vec6510, <12 x double> poison, <2 x i32> <i32 3, i32 9>
  %strided.vec6515 = shufflevector <12 x double> %wide.vec6510, <12 x double> poison, <2 x i32> <i32 4, i32 10>
  %806 = fadd contract <2 x double> %strided.vec6511, %796
  %807 = fmul contract <2 x double> %broadcast.splat6517, %806
  %808 = fadd contract <2 x double> %strided.vec, %807
  %809 = mul nsw i64 %803, 5
  %810 = mul nsw i64 %802, 5
  %811 = getelementptr double, ptr %6, i64 %809
  %812 = getelementptr double, ptr %6, i64 %810
  %813 = getelementptr i8, ptr %811, i64 8
  %814 = getelementptr i8, ptr %812, i64 -32
  %815 = load double, ptr %813, align 8, !tbaa !10
  %816 = load double, ptr %814, align 8, !tbaa !10
  %817 = insertelement <2 x double> poison, double %815, i64 0
  %818 = insertelement <2 x double> %817, double %816, i64 1
  %gep6644 = getelementptr double, ptr %invariant.gep6643, i64 %783
  %wide.vec6518 = load <10 x double>, ptr %gep6644, align 8, !tbaa !10
  %strided.vec6519 = shufflevector <10 x double> %wide.vec6518, <10 x double> poison, <2 x i32> <i32 0, i32 5>
  %strided.vec6520 = shufflevector <10 x double> %wide.vec6518, <10 x double> poison, <2 x i32> <i32 1, i32 6>
  %strided.vec6521 = shufflevector <10 x double> %wide.vec6518, <10 x double> poison, <2 x i32> <i32 2, i32 7>
  %strided.vec6522 = shufflevector <10 x double> %wide.vec6518, <10 x double> poison, <2 x i32> <i32 3, i32 8>
  %819 = fsub contract <2 x double> %818, %strided.vec6519
  %820 = fmul contract <2 x double> %broadcast.splat6524, %819
  %821 = fadd contract <2 x double> %strided.vec6500, %820
  %822 = getelementptr i8, ptr %787, i64 -40
  %823 = getelementptr i8, ptr %788, i64 56
  %824 = load double, ptr %822, align 8, !tbaa !10
  %825 = load double, ptr %823, align 8, !tbaa !10
  %826 = insertelement <2 x double> poison, double %824, i64 0
  %827 = insertelement <2 x double> %826, double %825, i64 1
  %828 = fmul contract <2 x double> %strided.vec6506, <double 2.000000e+00, double 2.000000e+00>
  %829 = fsub contract <2 x double> %827, %828
  %830 = fadd contract <2 x double> %strided.vec6512, %829
  %831 = fmul contract <2 x double> %broadcast.splat6526, %830
  %832 = fadd contract <2 x double> %821, %831
  %833 = getelementptr i8, ptr %811, i64 16
  %834 = getelementptr i8, ptr %812, i64 -24
  %835 = load double, ptr %833, align 8, !tbaa !10
  %836 = load double, ptr %834, align 8, !tbaa !10
  %837 = insertelement <2 x double> poison, double %835, i64 0
  %838 = insertelement <2 x double> %837, double %836, i64 1
  %839 = fsub contract <2 x double> %838, %strided.vec6520
  %840 = fmul contract <2 x double> %broadcast.splat6524, %839
  %841 = fadd contract <2 x double> %strided.vec6501, %840
  %842 = getelementptr i8, ptr %787, i64 -32
  %843 = getelementptr i8, ptr %788, i64 64
  %844 = load double, ptr %842, align 8, !tbaa !10
  %845 = load double, ptr %843, align 8, !tbaa !10
  %846 = insertelement <2 x double> poison, double %844, i64 0
  %847 = insertelement <2 x double> %846, double %845, i64 1
  %848 = fmul contract <2 x double> %strided.vec6507, <double 2.000000e+00, double 2.000000e+00>
  %849 = fsub contract <2 x double> %847, %848
  %850 = fadd contract <2 x double> %strided.vec6513, %849
  %851 = fmul contract <2 x double> %broadcast.splat6528, %850
  %852 = fadd contract <2 x double> %841, %851
  %853 = getelementptr i8, ptr %811, i64 24
  %854 = getelementptr i8, ptr %812, i64 -16
  %855 = load double, ptr %853, align 8, !tbaa !10
  %856 = load double, ptr %854, align 8, !tbaa !10
  %857 = insertelement <2 x double> poison, double %855, i64 0
  %858 = insertelement <2 x double> %857, double %856, i64 1
  %859 = fsub contract <2 x double> %858, %strided.vec6521
  %860 = fmul contract <2 x double> %broadcast.splat6524, %859
  %861 = fadd contract <2 x double> %strided.vec6502, %860
  %862 = getelementptr i8, ptr %787, i64 -24
  %863 = getelementptr i8, ptr %788, i64 72
  %864 = load double, ptr %862, align 8, !tbaa !10
  %865 = load double, ptr %863, align 8, !tbaa !10
  %866 = insertelement <2 x double> poison, double %864, i64 0
  %867 = insertelement <2 x double> %866, double %865, i64 1
  %868 = fmul contract <2 x double> %strided.vec6508, <double 2.000000e+00, double 2.000000e+00>
  %869 = fsub contract <2 x double> %867, %868
  %870 = fadd contract <2 x double> %strided.vec6514, %869
  %871 = fmul contract <2 x double> %broadcast.splat6530, %870
  %872 = fadd contract <2 x double> %861, %871
  %873 = getelementptr double, ptr %8, i64 %783
  %874 = getelementptr i8, ptr %811, i64 32
  %875 = getelementptr i8, ptr %812, i64 -8
  %876 = load double, ptr %874, align 8, !tbaa !10
  %877 = load double, ptr %875, align 8, !tbaa !10
  %878 = insertelement <2 x double> poison, double %876, i64 0
  %879 = insertelement <2 x double> %878, double %877, i64 1
  %880 = fsub contract <2 x double> %879, %strided.vec6522
  %881 = fmul contract <2 x double> %broadcast.splat6524, %880
  %882 = fadd contract <2 x double> %strided.vec6503, %881
  %883 = getelementptr i8, ptr %787, i64 -16
  %884 = getelementptr i8, ptr %788, i64 80
  %885 = load double, ptr %883, align 8, !tbaa !10
  %886 = load double, ptr %884, align 8, !tbaa !10
  %887 = insertelement <2 x double> poison, double %885, i64 0
  %888 = insertelement <2 x double> %887, double %886, i64 1
  %889 = fmul contract <2 x double> %strided.vec6509, <double 2.000000e+00, double 2.000000e+00>
  %890 = fsub contract <2 x double> %888, %889
  %891 = fadd contract <2 x double> %strided.vec6515, %890
  %892 = fmul contract <2 x double> %broadcast.splat6532, %891
  %893 = fadd contract <2 x double> %882, %892
  %894 = shufflevector <2 x double> %808, <2 x double> %832, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %895 = shufflevector <2 x double> %852, <2 x double> %872, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %896 = shufflevector <4 x double> %894, <4 x double> %895, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %897 = shufflevector <2 x double> %893, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec6533 = shufflevector <8 x double> %896, <8 x double> %897, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec6533, ptr %873, align 8, !tbaa !10
  %index.next6534 = add nuw i64 %index6498, 2
  %898 = icmp eq i64 %index.next6534, %n.vec6494
  br i1 %898, label %omp.wsloop.region263.preheader, label %vector.body6497, !llvm.loop !67

omp.wsloop.region265.preheader:                   ; preds = %omp.wsloop.region263, %omp.wsloop.region261
  %899 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %900 = sext i32 %428 to i64
  %901 = sext i32 %427 to i64
  %902 = sub nsw i64 %900, %.unpack4134.unpack4135.unpack
  %903 = mul nsw i64 %902, %.unpack4134.unpack.unpack4139
  %904 = sub nsw i64 %901, %.unpack4134.unpack4136.unpack
  %905 = mul nsw i64 %904, %374
  %906 = getelementptr double, ptr %378, i64 %905
  %907 = getelementptr double, ptr %906, i64 %903
  %908 = getelementptr double, ptr %381, i64 %905
  %909 = getelementptr double, ptr %908, i64 %903
  %910 = load double, ptr %387, align 8, !tbaa !10
  %911 = load double, ptr %388, align 8, !tbaa !10
  %912 = fmul contract double %911, 5.000000e+00
  %913 = load double, ptr %389, align 8, !tbaa !10
  %914 = fmul contract double %913, 4.000000e+00
  %915 = fsub contract double %912, %914
  %916 = load double, ptr %390, align 8, !tbaa !10
  %917 = fadd contract double %916, %915
  %918 = fmul contract double %899, %917
  %919 = fsub contract double %910, %918
  %920 = getelementptr double, ptr %907, i64 %391
  store double %919, ptr %920, align 8, !tbaa !20
  %921 = load double, ptr %392, align 8, !tbaa !10
  %922 = load double, ptr %388, align 8, !tbaa !10
  %923 = fmul contract double %922, 4.000000e+00
  %924 = load double, ptr %389, align 8, !tbaa !10
  %925 = fmul contract double %924, 6.000000e+00
  %926 = fsub contract double %925, %923
  %927 = load double, ptr %390, align 8, !tbaa !10
  %928 = fmul contract double %927, 4.000000e+00
  %929 = fsub contract double %926, %928
  %930 = load double, ptr %393, align 8, !tbaa !10
  %931 = fadd contract double %930, %929
  %932 = fmul contract double %899, %931
  %933 = fsub contract double %921, %932
  %934 = getelementptr double, ptr %909, i64 %391
  store double %933, ptr %934, align 8, !tbaa !20
  %935 = load double, ptr %394, align 8, !tbaa !10
  %936 = load double, ptr %395, align 8, !tbaa !10
  %937 = fmul contract double %936, 5.000000e+00
  %938 = load double, ptr %396, align 8, !tbaa !10
  %939 = fmul contract double %938, 4.000000e+00
  %940 = fsub contract double %937, %939
  %941 = load double, ptr %397, align 8, !tbaa !10
  %942 = fadd contract double %941, %940
  %943 = fmul contract double %899, %942
  %944 = fsub contract double %935, %943
  %945 = getelementptr double, ptr %907, i64 %398
  store double %944, ptr %945, align 8, !tbaa !20
  %946 = load double, ptr %399, align 8, !tbaa !10
  %947 = load double, ptr %395, align 8, !tbaa !10
  %948 = fmul contract double %947, 4.000000e+00
  %949 = load double, ptr %396, align 8, !tbaa !10
  %950 = fmul contract double %949, 6.000000e+00
  %951 = fsub contract double %950, %948
  %952 = load double, ptr %397, align 8, !tbaa !10
  %953 = fmul contract double %952, 4.000000e+00
  %954 = fsub contract double %951, %953
  %955 = load double, ptr %400, align 8, !tbaa !10
  %956 = fadd contract double %955, %954
  %957 = fmul contract double %899, %956
  %958 = fsub contract double %946, %957
  %959 = getelementptr double, ptr %909, i64 %398
  store double %958, ptr %959, align 8, !tbaa !20
  %960 = load double, ptr %401, align 8, !tbaa !10
  %961 = load double, ptr %402, align 8, !tbaa !10
  %962 = fmul contract double %961, 5.000000e+00
  %963 = load double, ptr %403, align 8, !tbaa !10
  %964 = fmul contract double %963, 4.000000e+00
  %965 = fsub contract double %962, %964
  %966 = load double, ptr %404, align 8, !tbaa !10
  %967 = fadd contract double %966, %965
  %968 = fmul contract double %899, %967
  %969 = fsub contract double %960, %968
  %970 = getelementptr double, ptr %907, i64 %405
  store double %969, ptr %970, align 8, !tbaa !20
  %971 = load double, ptr %406, align 8, !tbaa !10
  %972 = load double, ptr %402, align 8, !tbaa !10
  %973 = fmul contract double %972, 4.000000e+00
  %974 = load double, ptr %403, align 8, !tbaa !10
  %975 = fmul contract double %974, 6.000000e+00
  %976 = fsub contract double %975, %973
  %977 = load double, ptr %404, align 8, !tbaa !10
  %978 = fmul contract double %977, 4.000000e+00
  %979 = fsub contract double %976, %978
  %980 = load double, ptr %407, align 8, !tbaa !10
  %981 = fadd contract double %980, %979
  %982 = fmul contract double %899, %981
  %983 = fsub contract double %971, %982
  %984 = getelementptr double, ptr %909, i64 %405
  store double %983, ptr %984, align 8, !tbaa !20
  %985 = load double, ptr %408, align 8, !tbaa !10
  %986 = load double, ptr %409, align 8, !tbaa !10
  %987 = fmul contract double %986, 5.000000e+00
  %988 = load double, ptr %410, align 8, !tbaa !10
  %989 = fmul contract double %988, 4.000000e+00
  %990 = fsub contract double %987, %989
  %991 = load double, ptr %411, align 8, !tbaa !10
  %992 = fadd contract double %991, %990
  %993 = fmul contract double %899, %992
  %994 = fsub contract double %985, %993
  %995 = getelementptr double, ptr %907, i64 %412
  store double %994, ptr %995, align 8, !tbaa !20
  %996 = load double, ptr %413, align 8, !tbaa !10
  %997 = load double, ptr %409, align 8, !tbaa !10
  %998 = fmul contract double %997, 4.000000e+00
  %999 = load double, ptr %410, align 8, !tbaa !10
  %1000 = fmul contract double %999, 6.000000e+00
  %1001 = fsub contract double %1000, %998
  %1002 = load double, ptr %411, align 8, !tbaa !10
  %1003 = fmul contract double %1002, 4.000000e+00
  %1004 = fsub contract double %1001, %1003
  %1005 = load double, ptr %414, align 8, !tbaa !10
  %1006 = fadd contract double %1005, %1004
  %1007 = fmul contract double %899, %1006
  %1008 = fsub contract double %996, %1007
  %1009 = getelementptr double, ptr %909, i64 %412
  store double %1008, ptr %1009, align 8, !tbaa !20
  %1010 = load double, ptr %415, align 8, !tbaa !10
  %1011 = load double, ptr %416, align 8, !tbaa !10
  %1012 = fmul contract double %1011, 5.000000e+00
  %1013 = load double, ptr %417, align 8, !tbaa !10
  %1014 = fmul contract double %1013, 4.000000e+00
  %1015 = fsub contract double %1012, %1014
  %1016 = load double, ptr %418, align 8, !tbaa !10
  %1017 = fadd contract double %1016, %1015
  %1018 = fmul contract double %899, %1017
  %1019 = fsub contract double %1010, %1018
  %1020 = getelementptr double, ptr %907, i64 %419
  store double %1019, ptr %1020, align 8, !tbaa !20
  %1021 = load double, ptr %420, align 8, !tbaa !10
  %1022 = load double, ptr %416, align 8, !tbaa !10
  %1023 = fmul contract double %1022, 4.000000e+00
  %1024 = load double, ptr %417, align 8, !tbaa !10
  %1025 = fmul contract double %1024, 6.000000e+00
  %1026 = fsub contract double %1025, %1023
  %1027 = load double, ptr %418, align 8, !tbaa !10
  %1028 = fmul contract double %1027, 4.000000e+00
  %1029 = fsub contract double %1026, %1028
  %1030 = load double, ptr %421, align 8, !tbaa !10
  %1031 = fadd contract double %1030, %1029
  %1032 = fmul contract double %899, %1031
  %1033 = fsub contract double %1021, %1032
  %1034 = getelementptr double, ptr %909, i64 %419
  store double %1033, ptr %1034, align 8, !tbaa !20
  %1035 = add i32 %758, -3
  %1036 = sext i32 %1035 to i64
  %1037 = icmp sgt i32 %1035, 3
  br i1 %1037, label %omp.wsloop.region270.preheader.lr.ph, label %omp.wsloop.region274.preheader

omp.wsloop.region270.preheader.lr.ph:             ; preds = %omp.wsloop.region265.preheader
  %1038 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %invariant.gep5992 = getelementptr double, ptr %.unpack4127, i64 %905
  %invariant.gep5994 = getelementptr double, ptr %invariant.gep5992, i64 %903
  br label %omp.wsloop.region270.preheader

omp.wsloop.region274.preheader:                   ; preds = %omp.wsloop.region270.preheader, %omp.wsloop.region265.preheader
  %1039 = add i32 %758, -2
  %1040 = sext i32 %1039 to i64
  %1041 = add nsw i64 %1040, -1
  %1042 = mul nsw i64 %1041, 5
  %1043 = getelementptr double, ptr %8, i64 %1042
  %1044 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %1045 = add i32 %758, -4
  %1046 = sext i32 %1045 to i64
  %1047 = mul nsw i64 %1046, 6
  %gep5997 = getelementptr double, ptr %invariant.gep5996, i64 %1047
  %1048 = mul nsw i64 %1036, 6
  %gep5999 = getelementptr double, ptr %invariant.gep5996, i64 %1048
  %1049 = mul nsw i64 %1041, 6
  %1050 = getelementptr double, ptr %7, i64 %1049
  %1051 = mul nsw i64 %759, 6
  %gep6001 = getelementptr double, ptr %invariant.gep5996, i64 %1051
  %1052 = sub nsw i64 %1040, %.unpack4134.unpack4137.unpack
  %1053 = mul nsw i64 %1052, %375
  %1054 = getelementptr double, ptr %.unpack4127, i64 %1053
  %1055 = getelementptr double, ptr %1054, i64 %905
  %1056 = getelementptr double, ptr %1055, i64 %903
  %1057 = add nsw i64 %759, -1
  %1058 = mul nsw i64 %1057, 5
  %1059 = getelementptr double, ptr %8, i64 %1058
  %1060 = mul nsw i64 %1040, 6
  %gep6003 = getelementptr double, ptr %invariant.gep5996, i64 %1060
  %1061 = mul nsw i64 %1057, 6
  %1062 = getelementptr double, ptr %7, i64 %1061
  %1063 = sub nsw i64 %759, %.unpack4134.unpack4137.unpack
  %1064 = mul nsw i64 %1063, %375
  %1065 = getelementptr double, ptr %.unpack4127, i64 %1064
  %1066 = getelementptr double, ptr %1065, i64 %905
  %1067 = getelementptr double, ptr %1066, i64 %903
  %1068 = load double, ptr %1043, align 8, !tbaa !10
  %1069 = load double, ptr %gep5997, align 8, !tbaa !10
  %1070 = load double, ptr %gep5999, align 8, !tbaa !10
  %1071 = fmul contract double %1070, 4.000000e+00
  %1072 = fsub contract double %1069, %1071
  %1073 = load double, ptr %1050, align 8, !tbaa !10
  %1074 = fmul contract double %1073, 6.000000e+00
  %1075 = fadd contract double %1072, %1074
  %1076 = load double, ptr %gep6001, align 8, !tbaa !10
  %1077 = fmul contract double %1076, 4.000000e+00
  %1078 = fsub contract double %1075, %1077
  %1079 = fmul contract double %1044, %1078
  %1080 = fsub contract double %1068, %1079
  %1081 = getelementptr double, ptr %1056, i64 %391
  store double %1080, ptr %1081, align 8, !tbaa !20
  %1082 = load double, ptr %1059, align 8, !tbaa !10
  %1083 = load double, ptr %gep5999, align 8, !tbaa !10
  %1084 = load double, ptr %gep6003, align 8, !tbaa !10
  %1085 = fmul contract double %1084, 4.000000e+00
  %1086 = fsub contract double %1083, %1085
  %1087 = load double, ptr %1062, align 8, !tbaa !10
  %1088 = fmul contract double %1087, 5.000000e+00
  %1089 = fadd contract double %1086, %1088
  %1090 = fmul contract double %1044, %1089
  %1091 = fsub contract double %1082, %1090
  %1092 = getelementptr double, ptr %1067, i64 %391
  store double %1091, ptr %1092, align 8, !tbaa !20
  %1093 = getelementptr i8, ptr %1043, i64 8
  %1094 = load double, ptr %1093, align 8, !tbaa !10
  %1095 = getelementptr i8, ptr %gep5997, i64 8
  %1096 = load double, ptr %1095, align 8, !tbaa !10
  %1097 = getelementptr i8, ptr %gep5999, i64 8
  %1098 = load double, ptr %1097, align 8, !tbaa !10
  %1099 = fmul contract double %1098, 4.000000e+00
  %1100 = fsub contract double %1096, %1099
  %1101 = getelementptr i8, ptr %1050, i64 8
  %1102 = load double, ptr %1101, align 8, !tbaa !10
  %1103 = fmul contract double %1102, 6.000000e+00
  %1104 = fadd contract double %1100, %1103
  %1105 = getelementptr i8, ptr %gep6001, i64 8
  %1106 = load double, ptr %1105, align 8, !tbaa !10
  %1107 = fmul contract double %1106, 4.000000e+00
  %1108 = fsub contract double %1104, %1107
  %1109 = fmul contract double %1044, %1108
  %1110 = fsub contract double %1094, %1109
  %1111 = getelementptr double, ptr %1056, i64 %398
  store double %1110, ptr %1111, align 8, !tbaa !20
  %1112 = getelementptr i8, ptr %1059, i64 8
  %1113 = load double, ptr %1112, align 8, !tbaa !10
  %1114 = load double, ptr %1097, align 8, !tbaa !10
  %1115 = getelementptr i8, ptr %gep6003, i64 8
  %1116 = load double, ptr %1115, align 8, !tbaa !10
  %1117 = fmul contract double %1116, 4.000000e+00
  %1118 = fsub contract double %1114, %1117
  %1119 = getelementptr i8, ptr %1062, i64 8
  %1120 = load double, ptr %1119, align 8, !tbaa !10
  %1121 = fmul contract double %1120, 5.000000e+00
  %1122 = fadd contract double %1118, %1121
  %1123 = fmul contract double %1044, %1122
  %1124 = fsub contract double %1113, %1123
  %1125 = getelementptr double, ptr %1067, i64 %398
  store double %1124, ptr %1125, align 8, !tbaa !20
  %1126 = getelementptr i8, ptr %1043, i64 16
  %1127 = load double, ptr %1126, align 8, !tbaa !10
  %1128 = getelementptr i8, ptr %gep5997, i64 16
  %1129 = load double, ptr %1128, align 8, !tbaa !10
  %1130 = getelementptr i8, ptr %gep5999, i64 16
  %1131 = load double, ptr %1130, align 8, !tbaa !10
  %1132 = fmul contract double %1131, 4.000000e+00
  %1133 = fsub contract double %1129, %1132
  %1134 = getelementptr i8, ptr %1050, i64 16
  %1135 = load double, ptr %1134, align 8, !tbaa !10
  %1136 = fmul contract double %1135, 6.000000e+00
  %1137 = fadd contract double %1133, %1136
  %1138 = getelementptr i8, ptr %gep6001, i64 16
  %1139 = load double, ptr %1138, align 8, !tbaa !10
  %1140 = fmul contract double %1139, 4.000000e+00
  %1141 = fsub contract double %1137, %1140
  %1142 = fmul contract double %1044, %1141
  %1143 = fsub contract double %1127, %1142
  %1144 = getelementptr double, ptr %1056, i64 %405
  store double %1143, ptr %1144, align 8, !tbaa !20
  %1145 = getelementptr i8, ptr %1059, i64 16
  %1146 = load double, ptr %1145, align 8, !tbaa !10
  %1147 = load double, ptr %1130, align 8, !tbaa !10
  %1148 = getelementptr i8, ptr %gep6003, i64 16
  %1149 = load double, ptr %1148, align 8, !tbaa !10
  %1150 = fmul contract double %1149, 4.000000e+00
  %1151 = fsub contract double %1147, %1150
  %1152 = getelementptr i8, ptr %1062, i64 16
  %1153 = load double, ptr %1152, align 8, !tbaa !10
  %1154 = fmul contract double %1153, 5.000000e+00
  %1155 = fadd contract double %1151, %1154
  %1156 = fmul contract double %1044, %1155
  %1157 = fsub contract double %1146, %1156
  %1158 = getelementptr double, ptr %1067, i64 %405
  store double %1157, ptr %1158, align 8, !tbaa !20
  %1159 = getelementptr i8, ptr %1043, i64 24
  %1160 = load double, ptr %1159, align 8, !tbaa !10
  %1161 = getelementptr i8, ptr %gep5997, i64 24
  %1162 = load double, ptr %1161, align 8, !tbaa !10
  %1163 = getelementptr i8, ptr %gep5999, i64 24
  %1164 = load double, ptr %1163, align 8, !tbaa !10
  %1165 = fmul contract double %1164, 4.000000e+00
  %1166 = fsub contract double %1162, %1165
  %1167 = getelementptr i8, ptr %1050, i64 24
  %1168 = load double, ptr %1167, align 8, !tbaa !10
  %1169 = fmul contract double %1168, 6.000000e+00
  %1170 = fadd contract double %1166, %1169
  %1171 = getelementptr i8, ptr %gep6001, i64 24
  %1172 = load double, ptr %1171, align 8, !tbaa !10
  %1173 = fmul contract double %1172, 4.000000e+00
  %1174 = fsub contract double %1170, %1173
  %1175 = fmul contract double %1044, %1174
  %1176 = fsub contract double %1160, %1175
  %1177 = getelementptr double, ptr %1056, i64 %412
  store double %1176, ptr %1177, align 8, !tbaa !20
  %1178 = getelementptr i8, ptr %1059, i64 24
  %1179 = load double, ptr %1178, align 8, !tbaa !10
  %1180 = load double, ptr %1163, align 8, !tbaa !10
  %1181 = getelementptr i8, ptr %gep6003, i64 24
  %1182 = load double, ptr %1181, align 8, !tbaa !10
  %1183 = fmul contract double %1182, 4.000000e+00
  %1184 = fsub contract double %1180, %1183
  %1185 = getelementptr i8, ptr %1062, i64 24
  %1186 = load double, ptr %1185, align 8, !tbaa !10
  %1187 = fmul contract double %1186, 5.000000e+00
  %1188 = fadd contract double %1184, %1187
  %1189 = fmul contract double %1044, %1188
  %1190 = fsub contract double %1179, %1189
  %1191 = getelementptr double, ptr %1067, i64 %412
  store double %1190, ptr %1191, align 8, !tbaa !20
  %1192 = getelementptr i8, ptr %1043, i64 32
  %1193 = load double, ptr %1192, align 8, !tbaa !10
  %1194 = getelementptr i8, ptr %gep5997, i64 32
  %1195 = load double, ptr %1194, align 8, !tbaa !10
  %1196 = getelementptr i8, ptr %gep5999, i64 32
  %1197 = load double, ptr %1196, align 8, !tbaa !10
  %1198 = fmul contract double %1197, 4.000000e+00
  %1199 = fsub contract double %1195, %1198
  %1200 = getelementptr i8, ptr %1050, i64 32
  %1201 = load double, ptr %1200, align 8, !tbaa !10
  %1202 = fmul contract double %1201, 6.000000e+00
  %1203 = fadd contract double %1199, %1202
  %1204 = getelementptr i8, ptr %gep6001, i64 32
  %1205 = load double, ptr %1204, align 8, !tbaa !10
  %1206 = fmul contract double %1205, 4.000000e+00
  %1207 = fsub contract double %1203, %1206
  %1208 = fmul contract double %1044, %1207
  %1209 = fsub contract double %1193, %1208
  %1210 = getelementptr double, ptr %1056, i64 %419
  store double %1209, ptr %1210, align 8, !tbaa !20
  %1211 = getelementptr i8, ptr %1059, i64 32
  %1212 = load double, ptr %1211, align 8, !tbaa !10
  %1213 = load double, ptr %1196, align 8, !tbaa !10
  %1214 = getelementptr i8, ptr %gep6003, i64 32
  %1215 = load double, ptr %1214, align 8, !tbaa !10
  %1216 = fmul contract double %1215, 4.000000e+00
  %1217 = fsub contract double %1213, %1216
  %1218 = getelementptr i8, ptr %1062, i64 32
  %1219 = load double, ptr %1218, align 8, !tbaa !10
  %1220 = fmul contract double %1219, 5.000000e+00
  %1221 = fadd contract double %1217, %1220
  %1222 = fmul contract double %1044, %1221
  %1223 = fsub contract double %1212, %1222
  %1224 = getelementptr double, ptr %1067, i64 %419
  store double %1223, ptr %1224, align 8, !tbaa !20
  %omp_collapsed.next286 = add nuw i32 %omp_collapsed.iv2846005, 1
  %exitcond6122.not = icmp eq i32 %omp_collapsed.iv2846005, %reass.sub6022
  br i1 %exitcond6122.not, label %omp_collapsed.exit282, label %omp_collapsed.body280

omp.wsloop.region270.preheader:                   ; preds = %omp.wsloop.region270.preheader.lr.ph, %omp.wsloop.region270.preheader
  %indvars.iv6114 = phi i64 [ 4, %omp.wsloop.region270.preheader.lr.ph ], [ %indvars.iv.next6115, %omp.wsloop.region270.preheader ]
  %1225 = add nsw i64 %indvars.iv6114, -1
  %1226 = mul nuw nsw i64 %1225, 5
  %1227 = getelementptr double, ptr %8, i64 %1226
  %1228 = mul i64 %indvars.iv6114, 6
  %1229 = getelementptr double, ptr %invariant.gep5996, i64 %1228
  %gep5985 = getelementptr i8, ptr %1229, i64 -96
  %1230 = mul nuw nsw i64 %1225, 6
  %gep5987 = getelementptr double, ptr %invariant.gep5996, i64 %1230
  %1231 = getelementptr double, ptr %7, i64 %1230
  %indvars.iv.next6115 = add nuw nsw i64 %indvars.iv6114, 1
  %sext6187 = shl i64 %indvars.iv.next6115, 32
  %1232 = ashr exact i64 %sext6187, 32
  %1233 = mul nsw i64 %1232, 6
  %gep5989 = getelementptr double, ptr %invariant.gep5996, i64 %1233
  %1234 = shl i64 %indvars.iv6114, 32
  %sext6188 = add i64 %1234, 8589934592
  %1235 = ashr exact i64 %sext6188, 32
  %1236 = mul nsw i64 %1235, 6
  %gep5991 = getelementptr double, ptr %invariant.gep5996, i64 %1236
  %1237 = sub nsw i64 %indvars.iv6114, %.unpack4134.unpack4137.unpack
  %1238 = mul nsw i64 %375, %1237
  %gep5995 = getelementptr double, ptr %invariant.gep5994, i64 %1238
  %1239 = load double, ptr %1227, align 8, !tbaa !10
  %1240 = load double, ptr %gep5985, align 8, !tbaa !10
  %1241 = load double, ptr %gep5987, align 8, !tbaa !10
  %1242 = fmul contract double %1241, 4.000000e+00
  %1243 = fsub contract double %1240, %1242
  %1244 = load double, ptr %1231, align 8, !tbaa !10
  %1245 = fmul contract double %1244, 6.000000e+00
  %1246 = fadd contract double %1243, %1245
  %1247 = load double, ptr %gep5989, align 8, !tbaa !10
  %1248 = fmul contract double %1247, 4.000000e+00
  %1249 = fsub contract double %1246, %1248
  %1250 = load double, ptr %gep5991, align 8, !tbaa !10
  %1251 = fadd contract double %1250, %1249
  %1252 = fmul contract double %1038, %1251
  %1253 = fsub contract double %1239, %1252
  %1254 = getelementptr double, ptr %gep5995, i64 %391
  store double %1253, ptr %1254, align 8, !tbaa !20
  %1255 = getelementptr i8, ptr %1227, i64 8
  %1256 = load double, ptr %1255, align 8, !tbaa !10
  %1257 = getelementptr i8, ptr %1229, i64 -88
  %1258 = load double, ptr %1257, align 8, !tbaa !10
  %1259 = getelementptr i8, ptr %gep5987, i64 8
  %1260 = load double, ptr %1259, align 8, !tbaa !10
  %1261 = fmul contract double %1260, 4.000000e+00
  %1262 = fsub contract double %1258, %1261
  %1263 = getelementptr i8, ptr %1231, i64 8
  %1264 = load double, ptr %1263, align 8, !tbaa !10
  %1265 = fmul contract double %1264, 6.000000e+00
  %1266 = fadd contract double %1262, %1265
  %1267 = getelementptr i8, ptr %gep5989, i64 8
  %1268 = load double, ptr %1267, align 8, !tbaa !10
  %1269 = fmul contract double %1268, 4.000000e+00
  %1270 = fsub contract double %1266, %1269
  %1271 = getelementptr i8, ptr %gep5991, i64 8
  %1272 = load double, ptr %1271, align 8, !tbaa !10
  %1273 = fadd contract double %1272, %1270
  %1274 = fmul contract double %1038, %1273
  %1275 = fsub contract double %1256, %1274
  %1276 = getelementptr double, ptr %gep5995, i64 %398
  store double %1275, ptr %1276, align 8, !tbaa !20
  %1277 = getelementptr i8, ptr %1227, i64 16
  %1278 = load double, ptr %1277, align 8, !tbaa !10
  %1279 = getelementptr i8, ptr %1229, i64 -80
  %1280 = load double, ptr %1279, align 8, !tbaa !10
  %1281 = getelementptr i8, ptr %gep5987, i64 16
  %1282 = load double, ptr %1281, align 8, !tbaa !10
  %1283 = fmul contract double %1282, 4.000000e+00
  %1284 = fsub contract double %1280, %1283
  %1285 = getelementptr i8, ptr %1231, i64 16
  %1286 = load double, ptr %1285, align 8, !tbaa !10
  %1287 = fmul contract double %1286, 6.000000e+00
  %1288 = fadd contract double %1284, %1287
  %1289 = getelementptr i8, ptr %gep5989, i64 16
  %1290 = load double, ptr %1289, align 8, !tbaa !10
  %1291 = fmul contract double %1290, 4.000000e+00
  %1292 = fsub contract double %1288, %1291
  %1293 = getelementptr i8, ptr %gep5991, i64 16
  %1294 = load double, ptr %1293, align 8, !tbaa !10
  %1295 = fadd contract double %1294, %1292
  %1296 = fmul contract double %1038, %1295
  %1297 = fsub contract double %1278, %1296
  %1298 = getelementptr double, ptr %gep5995, i64 %405
  store double %1297, ptr %1298, align 8, !tbaa !20
  %1299 = getelementptr i8, ptr %1227, i64 24
  %1300 = load double, ptr %1299, align 8, !tbaa !10
  %1301 = getelementptr i8, ptr %1229, i64 -72
  %1302 = load double, ptr %1301, align 8, !tbaa !10
  %1303 = getelementptr i8, ptr %gep5987, i64 24
  %1304 = load double, ptr %1303, align 8, !tbaa !10
  %1305 = fmul contract double %1304, 4.000000e+00
  %1306 = fsub contract double %1302, %1305
  %1307 = getelementptr i8, ptr %1231, i64 24
  %1308 = load double, ptr %1307, align 8, !tbaa !10
  %1309 = fmul contract double %1308, 6.000000e+00
  %1310 = fadd contract double %1306, %1309
  %1311 = getelementptr i8, ptr %gep5989, i64 24
  %1312 = load double, ptr %1311, align 8, !tbaa !10
  %1313 = fmul contract double %1312, 4.000000e+00
  %1314 = fsub contract double %1310, %1313
  %1315 = getelementptr i8, ptr %gep5991, i64 24
  %1316 = load double, ptr %1315, align 8, !tbaa !10
  %1317 = fadd contract double %1316, %1314
  %1318 = fmul contract double %1038, %1317
  %1319 = fsub contract double %1300, %1318
  %1320 = getelementptr double, ptr %gep5995, i64 %412
  store double %1319, ptr %1320, align 8, !tbaa !20
  %1321 = getelementptr i8, ptr %1227, i64 32
  %1322 = load double, ptr %1321, align 8, !tbaa !10
  %1323 = getelementptr i8, ptr %1229, i64 -64
  %1324 = load double, ptr %1323, align 8, !tbaa !10
  %1325 = getelementptr i8, ptr %gep5987, i64 32
  %1326 = load double, ptr %1325, align 8, !tbaa !10
  %1327 = fmul contract double %1326, 4.000000e+00
  %1328 = fsub contract double %1324, %1327
  %1329 = getelementptr i8, ptr %1231, i64 32
  %1330 = load double, ptr %1329, align 8, !tbaa !10
  %1331 = fmul contract double %1330, 6.000000e+00
  %1332 = fadd contract double %1328, %1331
  %1333 = getelementptr i8, ptr %gep5989, i64 32
  %1334 = load double, ptr %1333, align 8, !tbaa !10
  %1335 = fmul contract double %1334, 4.000000e+00
  %1336 = fsub contract double %1332, %1335
  %1337 = getelementptr i8, ptr %gep5991, i64 32
  %1338 = load double, ptr %1337, align 8, !tbaa !10
  %1339 = fadd contract double %1338, %1336
  %1340 = fmul contract double %1038, %1339
  %1341 = fsub contract double %1322, %1340
  %1342 = getelementptr double, ptr %gep5995, i64 %419
  store double %1341, ptr %1342, align 8, !tbaa !20
  %exitcond6117.not = icmp eq i64 %indvars.iv6114, %1036
  br i1 %exitcond6117.not, label %omp.wsloop.region274.preheader, label %omp.wsloop.region270.preheader

omp.wsloop.region263:                             ; preds = %omp.wsloop.region263.preheader, %omp.wsloop.region263
  %indvars.iv6102 = phi i64 [ %indvars.iv.next6103, %omp.wsloop.region263 ], [ %indvars.iv6102.ph, %omp.wsloop.region263.preheader ]
  %1343 = add nsw i64 %indvars.iv6102, -1
  %1344 = mul nuw nsw i64 %1343, 5
  %1345 = getelementptr double, ptr %8, i64 %1344
  %1346 = load double, ptr %1345, align 8, !tbaa !10
  %1347 = mul nuw nsw i64 %1343, 6
  %1348 = getelementptr double, ptr %7, i64 %1347
  %1349 = getelementptr i8, ptr %1348, i64 -48
  %1350 = load double, ptr %1349, align 8, !tbaa !10
  %1351 = load double, ptr %1348, align 8, !tbaa !10
  %1352 = fmul contract double %1351, 2.000000e+00
  %1353 = fsub contract double %1350, %1352
  %indvars.iv.next6103 = add nuw nsw i64 %indvars.iv6102, 1
  %sext6186 = shl i64 %indvars.iv.next6103, 32
  %1354 = ashr exact i64 %sext6186, 32
  %1355 = add nsw i64 %1354, -1
  %1356 = mul nsw i64 %1355, 6
  %1357 = getelementptr double, ptr %7, i64 %1356
  %1358 = load double, ptr %1357, align 8, !tbaa !10
  %1359 = fadd contract double %1358, %1353
  %1360 = fmul contract double %763, %1359
  %1361 = fadd contract double %1346, %1360
  store double %1361, ptr %1345, align 8, !tbaa !10
  %1362 = add nuw nsw i64 %1344, 1
  %1363 = getelementptr double, ptr %8, i64 %1362
  %1364 = load double, ptr %1363, align 8, !tbaa !10
  %1365 = mul nsw i64 %1355, 5
  %1366 = getelementptr double, ptr %6, i64 %1365
  %1367 = getelementptr i8, ptr %1366, i64 8
  %1368 = load double, ptr %1367, align 8, !tbaa !10
  %1369 = getelementptr double, ptr %6, i64 %1362
  %1370 = load double, ptr %1369, align 8, !tbaa !10
  %1371 = fsub contract double %1368, %1370
  %1372 = fmul contract double %765, %1371
  %1373 = fadd contract double %1364, %1372
  %1374 = getelementptr i8, ptr %1348, i64 -40
  %1375 = load double, ptr %1374, align 8, !tbaa !10
  %1376 = or disjoint i64 %1347, 1
  %1377 = getelementptr double, ptr %7, i64 %1376
  %1378 = load double, ptr %1377, align 8, !tbaa !10
  %1379 = fmul contract double %1378, 2.000000e+00
  %1380 = fsub contract double %1375, %1379
  %1381 = or disjoint i64 %1356, 1
  %1382 = getelementptr double, ptr %7, i64 %1381
  %1383 = load double, ptr %1382, align 8, !tbaa !10
  %1384 = fadd contract double %1383, %1380
  %1385 = fmul contract double %767, %1384
  %1386 = fadd contract double %1373, %1385
  store double %1386, ptr %1363, align 8, !tbaa !10
  %1387 = add nuw nsw i64 %1344, 2
  %1388 = getelementptr double, ptr %8, i64 %1387
  %1389 = load double, ptr %1388, align 8, !tbaa !10
  %1390 = getelementptr i8, ptr %1366, i64 16
  %1391 = load double, ptr %1390, align 8, !tbaa !10
  %1392 = getelementptr double, ptr %6, i64 %1387
  %1393 = load double, ptr %1392, align 8, !tbaa !10
  %1394 = fsub contract double %1391, %1393
  %1395 = fmul contract double %765, %1394
  %1396 = fadd contract double %1389, %1395
  %1397 = getelementptr i8, ptr %1348, i64 -32
  %1398 = load double, ptr %1397, align 8, !tbaa !10
  %1399 = getelementptr i8, ptr %1348, i64 16
  %1400 = load double, ptr %1399, align 8, !tbaa !10
  %1401 = fmul contract double %1400, 2.000000e+00
  %1402 = fsub contract double %1398, %1401
  %1403 = getelementptr i8, ptr %1357, i64 16
  %1404 = load double, ptr %1403, align 8, !tbaa !10
  %1405 = fadd contract double %1404, %1402
  %1406 = fmul contract double %769, %1405
  %1407 = fadd contract double %1396, %1406
  store double %1407, ptr %1388, align 8, !tbaa !10
  %1408 = add nuw nsw i64 %1344, 3
  %1409 = getelementptr double, ptr %8, i64 %1408
  %1410 = load double, ptr %1409, align 8, !tbaa !10
  %1411 = getelementptr i8, ptr %1366, i64 24
  %1412 = load double, ptr %1411, align 8, !tbaa !10
  %1413 = getelementptr double, ptr %6, i64 %1408
  %1414 = load double, ptr %1413, align 8, !tbaa !10
  %1415 = fsub contract double %1412, %1414
  %1416 = fmul contract double %765, %1415
  %1417 = fadd contract double %1410, %1416
  %1418 = getelementptr i8, ptr %1348, i64 -24
  %1419 = load double, ptr %1418, align 8, !tbaa !10
  %1420 = getelementptr i8, ptr %1348, i64 24
  %1421 = load double, ptr %1420, align 8, !tbaa !10
  %1422 = fmul contract double %1421, 2.000000e+00
  %1423 = fsub contract double %1419, %1422
  %1424 = getelementptr i8, ptr %1357, i64 24
  %1425 = load double, ptr %1424, align 8, !tbaa !10
  %1426 = fadd contract double %1425, %1423
  %1427 = fmul contract double %771, %1426
  %1428 = fadd contract double %1417, %1427
  store double %1428, ptr %1409, align 8, !tbaa !10
  %1429 = add nuw nsw i64 %1344, 4
  %1430 = getelementptr double, ptr %8, i64 %1429
  %1431 = load double, ptr %1430, align 8, !tbaa !10
  %1432 = getelementptr i8, ptr %1366, i64 32
  %1433 = load double, ptr %1432, align 8, !tbaa !10
  %1434 = getelementptr double, ptr %6, i64 %1429
  %1435 = load double, ptr %1434, align 8, !tbaa !10
  %1436 = fsub contract double %1433, %1435
  %1437 = fmul contract double %765, %1436
  %1438 = fadd contract double %1431, %1437
  %1439 = getelementptr i8, ptr %1348, i64 -16
  %1440 = load double, ptr %1439, align 8, !tbaa !10
  %1441 = getelementptr i8, ptr %1348, i64 32
  %1442 = load double, ptr %1441, align 8, !tbaa !10
  %1443 = fmul contract double %1442, 2.000000e+00
  %1444 = fsub contract double %1440, %1443
  %1445 = getelementptr i8, ptr %1357, i64 32
  %1446 = load double, ptr %1445, align 8, !tbaa !10
  %1447 = fadd contract double %1446, %1444
  %1448 = fmul contract double %773, %1447
  %1449 = fadd contract double %1438, %1448
  store double %1449, ptr %1430, align 8, !tbaa !10
  %exitcond6105.not = icmp eq i64 %indvars.iv6102, %759
  br i1 %exitcond6105.not, label %omp.wsloop.region265.preheader, label %omp.wsloop.region263, !llvm.loop !70

omp.wsloop.region260:                             ; preds = %omp.wsloop.region260.preheader6630, %omp.wsloop.region260
  %indvars.iv6098 = phi i64 [ %indvars.iv.next6099, %omp.wsloop.region260 ], [ %indvars.iv6098.ph, %omp.wsloop.region260.preheader6630 ]
  %1450 = add nsw i64 %indvars.iv6098, -1
  %1451 = mul nuw nsw i64 %1450, 6
  %1452 = getelementptr double, ptr %7, i64 %1451
  %1453 = getelementptr i8, ptr %1452, i64 40
  %1454 = load double, ptr %1453, align 8, !tbaa !10
  %1455 = or disjoint i64 %1451, 1
  %1456 = getelementptr double, ptr %7, i64 %1455
  %1457 = load double, ptr %1456, align 8, !tbaa !10
  %1458 = fmul contract double %1454, %1457
  %1459 = getelementptr i8, ptr %1452, i64 16
  %1460 = load double, ptr %1459, align 8, !tbaa !10
  %1461 = fmul contract double %1454, %1460
  %1462 = getelementptr i8, ptr %1452, i64 24
  %1463 = load double, ptr %1462, align 8, !tbaa !10
  %1464 = fmul contract double %1454, %1463
  %1465 = getelementptr i8, ptr %1452, i64 32
  %1466 = load double, ptr %1465, align 8, !tbaa !10
  %1467 = fmul contract double %1454, %1466
  %1468 = getelementptr i8, ptr %1452, i64 -8
  %1469 = load double, ptr %1468, align 8, !tbaa !10
  %1470 = getelementptr i8, ptr %1452, i64 -40
  %1471 = load double, ptr %1470, align 8, !tbaa !10
  %1472 = fmul contract double %1469, %1471
  %1473 = getelementptr i8, ptr %1452, i64 -32
  %1474 = load double, ptr %1473, align 8, !tbaa !10
  %1475 = fmul contract double %1469, %1474
  %1476 = getelementptr i8, ptr %1452, i64 -24
  %1477 = load double, ptr %1476, align 8, !tbaa !10
  %1478 = fmul contract double %1469, %1477
  %1479 = getelementptr i8, ptr %1452, i64 -16
  %1480 = load double, ptr %1479, align 8, !tbaa !10
  %1481 = fmul contract double %1469, %1480
  %1482 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44
  %1483 = fsub contract double %1458, %1472
  %1484 = fmul contract double %1483, %1482
  %1485 = mul nuw nsw i64 %1450, 5
  %1486 = getelementptr double, ptr %6, i64 %1485
  %1487 = getelementptr i8, ptr %1486, i64 8
  store double %1484, ptr %1487, align 8, !tbaa !10
  %1488 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44
  %1489 = fsub contract double %1461, %1475
  %1490 = fmul contract double %1489, %1488
  %1491 = getelementptr i8, ptr %1486, i64 16
  store double %1490, ptr %1491, align 8, !tbaa !10
  %1492 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44
  %1493 = fmul contract double %1492, 0x3FF5555555555555
  %1494 = fsub contract double %1464, %1478
  %1495 = fmul contract double %1494, %1493
  %1496 = getelementptr i8, ptr %1486, i64 24
  store double %1495, ptr %1496, align 8, !tbaa !10
  %1497 = load double, ptr @_QMlu_dataEtz3, align 8, !tbaa !44
  %1498 = fmul contract double %1497, 0x3FDEB851EB851EB6
  %1499 = fmul double %1458, %1458
  %1500 = fmul double %1461, %1461
  %1501 = fadd contract double %1499, %1500
  %1502 = fmul double %1464, %1464
  %1503 = fadd contract double %1501, %1502
  %1504 = fmul double %1472, %1472
  %1505 = fmul double %1475, %1475
  %1506 = fadd contract double %1504, %1505
  %1507 = fmul double %1478, %1478
  %1508 = fadd contract double %1506, %1507
  %1509 = fsub contract double %1503, %1508
  %1510 = fmul contract double %1509, %1498
  %1511 = fmul contract double %1497, 0x3FC5555555555555
  %1512 = fsub contract double %1502, %1507
  %1513 = fmul contract double %1512, %1511
  %1514 = fsub contract double %1513, %1510
  %1515 = fmul contract double %1497, 0x3FFF5C28F5C28F5B
  %1516 = fsub contract double %1467, %1481
  %1517 = fmul contract double %1516, %1515
  %1518 = fadd contract double %1517, %1514
  %1519 = getelementptr i8, ptr %1486, i64 32
  store double %1518, ptr %1519, align 8, !tbaa !10
  %indvars.iv.next6099 = add nuw nsw i64 %indvars.iv6098, 1
  %exitcond6101.not = icmp eq i64 %indvars.iv6098, %622
  br i1 %exitcond6101.not, label %omp.wsloop.region261.loopexit, label %omp.wsloop.region260, !llvm.loop !71

omp.wsloop.region251:                             ; preds = %omp.wsloop.region251.lr.ph, %omp.wsloop.region251
  %indvars.iv6090 = phi i64 [ 1, %omp.wsloop.region251.lr.ph ], [ %indvars.iv.next6091, %omp.wsloop.region251 ]
  %1520 = add nsw i64 %indvars.iv6090, -1
  %1521 = mul nuw nsw i64 %1520, 6
  %1522 = getelementptr double, ptr %7, i64 %1521
  %1523 = getelementptr i8, ptr %1522, i64 24
  %1524 = load double, ptr %1523, align 8, !tbaa !10
  %1525 = mul nuw nsw i64 %1520, 5
  %1526 = getelementptr double, ptr %6, i64 %1525
  store double %1524, ptr %1526, align 8, !tbaa !10
  %1527 = getelementptr i8, ptr %1522, i64 40
  %1528 = load double, ptr %1527, align 8, !tbaa !10
  %1529 = fmul contract double %1524, %1528
  %1530 = sub nsw i64 %indvars.iv6090, %.unpack4158.unpack4160.unpack
  %1531 = mul nsw i64 %373, %1530
  %gep5971 = getelementptr double, ptr %invariant.gep5970, i64 %1531
  %1532 = load double, ptr %gep5971, align 8, !tbaa !26
  %1533 = or disjoint i64 %1521, 1
  %1534 = getelementptr double, ptr %7, i64 %1533
  %1535 = load double, ptr %1534, align 8, !tbaa !10
  %1536 = fmul contract double %1529, %1535
  %1537 = getelementptr i8, ptr %1526, i64 8
  store double %1536, ptr %1537, align 8, !tbaa !10
  %1538 = getelementptr i8, ptr %1522, i64 16
  %1539 = load double, ptr %1538, align 8, !tbaa !10
  %1540 = fmul contract double %1529, %1539
  %1541 = getelementptr i8, ptr %1526, i64 16
  store double %1540, ptr %1541, align 8, !tbaa !10
  %1542 = load double, ptr %1523, align 8, !tbaa !10
  %1543 = fmul contract double %1529, %1542
  %1544 = getelementptr i8, ptr %1522, i64 32
  %1545 = load double, ptr %1544, align 8, !tbaa !10
  %1546 = fsub contract double %1545, %1532
  %1547 = fmul contract double %1546, 4.000000e-01
  %1548 = fadd contract double %1543, %1547
  %1549 = getelementptr i8, ptr %1526, i64 24
  store double %1548, ptr %1549, align 8, !tbaa !10
  %1550 = load double, ptr %1544, align 8, !tbaa !10
  %1551 = fmul contract double %1550, 1.400000e+00
  %1552 = fmul contract double %1532, 4.000000e-01
  %1553 = fsub contract double %1551, %1552
  %1554 = fmul contract double %1529, %1553
  %1555 = getelementptr i8, ptr %1526, i64 32
  store double %1554, ptr %1555, align 8, !tbaa !10
  %indvars.iv.next6091 = add nuw nsw i64 %indvars.iv6090, 1
  %exitcond6093.not = icmp eq i64 %indvars.iv6090, %430
  br i1 %exitcond6093.not, label %omp.wsloop.region252.loopexit, label %omp.wsloop.region251

omp.wsloop.region248:                             ; preds = %omp.wsloop.region248.lr.ph, %omp.wsloop.region248
  %indvars.iv6086 = phi i64 [ 1, %omp.wsloop.region248.lr.ph ], [ %indvars.iv.next6087, %omp.wsloop.region248 ]
  %1556 = sub nsw i64 %indvars.iv6086, %.unpack4178.unpack4181.unpack
  %1557 = mul nsw i64 %371, %1556
  %gep5963 = getelementptr double, ptr %invariant.gep5962, i64 %1557
  %1558 = getelementptr i8, ptr %gep5963, i64 8
  %1559 = load double, ptr %1558, align 8, !tbaa !22
  %1560 = mul nuw nsw i64 %indvars.iv6086, 6
  %1561 = getelementptr double, ptr %7, i64 %1560
  %1562 = getelementptr i8, ptr %1561, i64 -48
  store double %1559, ptr %1562, align 8, !tbaa !10
  %1563 = getelementptr i8, ptr %gep5963, i64 16
  %1564 = load double, ptr %1563, align 8, !tbaa !22
  %1565 = getelementptr i8, ptr %1561, i64 -40
  store double %1564, ptr %1565, align 8, !tbaa !10
  %1566 = getelementptr i8, ptr %gep5963, i64 24
  %1567 = load double, ptr %1566, align 8, !tbaa !22
  %1568 = getelementptr i8, ptr %1561, i64 -32
  store double %1567, ptr %1568, align 8, !tbaa !10
  %1569 = getelementptr i8, ptr %gep5963, i64 32
  %1570 = load double, ptr %1569, align 8, !tbaa !22
  %1571 = getelementptr i8, ptr %1561, i64 -24
  store double %1570, ptr %1571, align 8, !tbaa !10
  %1572 = getelementptr i8, ptr %gep5963, i64 40
  %1573 = load double, ptr %1572, align 8, !tbaa !22
  %1574 = getelementptr i8, ptr %1561, i64 -16
  store double %1573, ptr %1574, align 8, !tbaa !10
  %1575 = sub nsw i64 %indvars.iv6086, %.unpack4302.unpack4304.unpack
  %1576 = mul nsw i64 %372, %1575
  %gep5967 = getelementptr double, ptr %invariant.gep5966, i64 %1576
  %1577 = load double, ptr %gep5967, align 8, !tbaa !24
  %1578 = getelementptr i8, ptr %1561, i64 -8
  store double %1577, ptr %1578, align 8, !tbaa !10
  %indvars.iv.next6087 = add nuw nsw i64 %indvars.iv6086, 1
  %exitcond6089.not = icmp eq i64 %indvars.iv6086, %430
  br i1 %exitcond6089.not, label %omp.wsloop.region250.preheader, label %omp.wsloop.region248

omp.master.region225:                             ; preds = %omp_collapsed.exit210
  %1579 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not4002 = icmp eq i32 %1579, 0
  br i1 %.not4002, label %omp.region.cont224, label %omp.master.region227

omp.master.region227:                             ; preds = %omp.master.region225
  store i32 3, ptr %2, align 4, !tbaa !10
  call void @timer_stop_(ptr nonnull %2) #2
  %.pr = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not4003 = icmp eq i32 %.pr, 0
  br i1 %.not4003, label %omp.region.cont224, label %omp.master.region228

omp.region.cont224:                               ; preds = %omp.master.region225, %omp.master.region227, %omp.master.region228
  call void @__kmpc_end_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  br label %omp_region.end222

omp.master.region228:                             ; preds = %omp.master.region227
  store i32 4, ptr %1, align 4, !tbaa !10
  call void @timer_start_(ptr nonnull %1) #2
  br label %omp.region.cont224

omp_collapsed.body208:                            ; preds = %omp_collapsed.body208.lr.ph, %omp_collapsed.inc209
  %omp_collapsed.iv2125951 = phi i32 [ 0, %omp_collapsed.body208.lr.ph ], [ %omp_collapsed.next214, %omp_collapsed.inc209 ]
  %1580 = add i32 %omp_collapsed.iv2125951, %285
  %1581 = urem i32 %1580, %282
  %1582 = udiv i32 %1580, %282
  %1583 = add i32 %1582, 2
  %1584 = add i32 %1581, %276
  switch i32 %1584, label %omp.wsloop.region181 [
    i32 2, label %omp.wsloop.region166
    i32 3, label %omp.wsloop.region174
  ]

omp.wsloop.region181:                             ; preds = %omp_collapsed.body208
  %1585 = icmp eq i32 %1584, %311
  br i1 %1585, label %omp.wsloop.region182, label %omp.wsloop.region189

omp.wsloop.region189:                             ; preds = %omp.wsloop.region181
  %1586 = icmp eq i32 %1584, %312
  br i1 %1586, label %omp.wsloop.region190, label %omp.wsloop.region197

omp.wsloop.region197:                             ; preds = %omp.wsloop.region189
  br i1 %292, label %omp.wsloop.region200.preheader.lr.ph, label %omp_collapsed.inc209

omp.wsloop.region200.preheader.lr.ph:             ; preds = %omp.wsloop.region197
  %1587 = sext i32 %1584 to i64
  %1588 = sext i32 %1583 to i64
  %1589 = sub nsw i64 %1587, %.unpack4466.unpack4468.unpack
  %1590 = mul nsw i64 %1589, %293
  %1591 = sub nsw i64 %1588, %.unpack4466.unpack4469.unpack
  %1592 = mul nsw i64 %296, %1591
  %1593 = getelementptr double, ptr %.unpack4459, i64 %1592
  %1594 = getelementptr double, ptr %1593, i64 %1590
  %1595 = add i32 %1584, -2
  %1596 = sext i32 %1595 to i64
  %1597 = sub nsw i64 %1596, %.unpack4490.unpack4492.unpack
  %1598 = mul nsw i64 %1597, %298
  %1599 = sub nsw i64 %1588, %.unpack4490.unpack4493.unpack
  %1600 = mul nsw i64 %301, %1599
  %1601 = getelementptr double, ptr %.unpack4483, i64 %1600
  %1602 = getelementptr double, ptr %1601, i64 %1598
  %1603 = add i32 %1584, -1
  %1604 = sext i32 %1603 to i64
  %1605 = sub nsw i64 %1604, %.unpack4490.unpack4492.unpack
  %1606 = mul nsw i64 %1605, %298
  %1607 = getelementptr double, ptr %1601, i64 %1606
  %1608 = sub nsw i64 %1587, %.unpack4490.unpack4492.unpack
  %1609 = mul nsw i64 %1608, %298
  %1610 = getelementptr double, ptr %1601, i64 %1609
  %1611 = add i32 %1584, 1
  %1612 = sext i32 %1611 to i64
  %1613 = sub nsw i64 %1612, %.unpack4490.unpack4492.unpack
  %1614 = mul nsw i64 %1613, %298
  %1615 = getelementptr double, ptr %1601, i64 %1614
  %1616 = add i32 %1584, 2
  %1617 = sext i32 %1616 to i64
  %1618 = sub nsw i64 %1617, %.unpack4490.unpack4492.unpack
  %1619 = mul nsw i64 %1618, %298
  %1620 = getelementptr double, ptr %1601, i64 %1619
  br label %omp.wsloop.region200.preheader

omp.wsloop.region200.preheader:                   ; preds = %omp.wsloop.region200.preheader.lr.ph, %omp.wsloop.region200.preheader
  %1621 = phi i64 [ %291, %omp.wsloop.region200.preheader.lr.ph ], [ %1740, %omp.wsloop.region200.preheader ]
  %1622 = phi i32 [ %287, %omp.wsloop.region200.preheader.lr.ph ], [ %1739, %omp.wsloop.region200.preheader ]
  %1623 = sext i32 %1622 to i64
  %1624 = sub nsw i64 %1623, %.unpack4466.unpack4467.unpack
  %1625 = mul nsw i64 %1624, %.unpack4466.unpack.unpack4471
  %1626 = getelementptr double, ptr %1594, i64 %1625
  %1627 = sub nsw i64 %1623, %.unpack4490.unpack4491.unpack
  %1628 = mul nsw i64 %1627, %.unpack4490.unpack.unpack4495
  %1629 = getelementptr double, ptr %1626, i64 %341
  %1630 = load double, ptr %1629, align 8, !tbaa !20
  %reass.sub6171 = sub i64 %1628, %.unpack4490.unpack.unpack
  %1631 = add i64 %reass.sub6171, 1
  %1632 = getelementptr double, ptr %1602, i64 %1631
  %1633 = load double, ptr %1632, align 8, !tbaa !22
  %1634 = getelementptr double, ptr %1607, i64 %1631
  %1635 = load double, ptr %1634, align 8, !tbaa !22
  %1636 = fmul contract double %1635, 4.000000e+00
  %1637 = fsub contract double %1633, %1636
  %1638 = getelementptr double, ptr %1610, i64 %1631
  %1639 = load double, ptr %1638, align 8, !tbaa !22
  %1640 = fmul contract double %1639, 6.000000e+00
  %1641 = fadd contract double %1637, %1640
  %1642 = getelementptr double, ptr %1615, i64 %1631
  %1643 = load double, ptr %1642, align 8, !tbaa !22
  %1644 = fmul contract double %1643, 4.000000e+00
  %1645 = fsub contract double %1641, %1644
  %1646 = getelementptr double, ptr %1620, i64 %1631
  %1647 = load double, ptr %1646, align 8, !tbaa !22
  %1648 = fadd contract double %1647, %1645
  %1649 = fmul contract double %297, %1648
  %1650 = fsub contract double %1630, %1649
  store double %1650, ptr %1629, align 8, !tbaa !20
  %1651 = getelementptr double, ptr %1626, i64 %342
  %1652 = load double, ptr %1651, align 8, !tbaa !20
  %reass.sub6172 = sub i64 %1628, %.unpack4490.unpack.unpack
  %1653 = add i64 %reass.sub6172, 2
  %1654 = getelementptr double, ptr %1602, i64 %1653
  %1655 = load double, ptr %1654, align 8, !tbaa !22
  %1656 = getelementptr double, ptr %1607, i64 %1653
  %1657 = load double, ptr %1656, align 8, !tbaa !22
  %1658 = fmul contract double %1657, 4.000000e+00
  %1659 = fsub contract double %1655, %1658
  %1660 = getelementptr double, ptr %1610, i64 %1653
  %1661 = load double, ptr %1660, align 8, !tbaa !22
  %1662 = fmul contract double %1661, 6.000000e+00
  %1663 = fadd contract double %1659, %1662
  %1664 = getelementptr double, ptr %1615, i64 %1653
  %1665 = load double, ptr %1664, align 8, !tbaa !22
  %1666 = fmul contract double %1665, 4.000000e+00
  %1667 = fsub contract double %1663, %1666
  %1668 = getelementptr double, ptr %1620, i64 %1653
  %1669 = load double, ptr %1668, align 8, !tbaa !22
  %1670 = fadd contract double %1669, %1667
  %1671 = fmul contract double %297, %1670
  %1672 = fsub contract double %1652, %1671
  store double %1672, ptr %1651, align 8, !tbaa !20
  %1673 = getelementptr double, ptr %1626, i64 %343
  %1674 = load double, ptr %1673, align 8, !tbaa !20
  %reass.sub6173 = sub i64 %1628, %.unpack4490.unpack.unpack
  %1675 = add i64 %reass.sub6173, 3
  %1676 = getelementptr double, ptr %1602, i64 %1675
  %1677 = load double, ptr %1676, align 8, !tbaa !22
  %1678 = getelementptr double, ptr %1607, i64 %1675
  %1679 = load double, ptr %1678, align 8, !tbaa !22
  %1680 = fmul contract double %1679, 4.000000e+00
  %1681 = fsub contract double %1677, %1680
  %1682 = getelementptr double, ptr %1610, i64 %1675
  %1683 = load double, ptr %1682, align 8, !tbaa !22
  %1684 = fmul contract double %1683, 6.000000e+00
  %1685 = fadd contract double %1681, %1684
  %1686 = getelementptr double, ptr %1615, i64 %1675
  %1687 = load double, ptr %1686, align 8, !tbaa !22
  %1688 = fmul contract double %1687, 4.000000e+00
  %1689 = fsub contract double %1685, %1688
  %1690 = getelementptr double, ptr %1620, i64 %1675
  %1691 = load double, ptr %1690, align 8, !tbaa !22
  %1692 = fadd contract double %1691, %1689
  %1693 = fmul contract double %297, %1692
  %1694 = fsub contract double %1674, %1693
  store double %1694, ptr %1673, align 8, !tbaa !20
  %1695 = getelementptr double, ptr %1626, i64 %344
  %1696 = load double, ptr %1695, align 8, !tbaa !20
  %reass.sub6174 = sub i64 %1628, %.unpack4490.unpack.unpack
  %1697 = add i64 %reass.sub6174, 4
  %1698 = getelementptr double, ptr %1602, i64 %1697
  %1699 = load double, ptr %1698, align 8, !tbaa !22
  %1700 = getelementptr double, ptr %1607, i64 %1697
  %1701 = load double, ptr %1700, align 8, !tbaa !22
  %1702 = fmul contract double %1701, 4.000000e+00
  %1703 = fsub contract double %1699, %1702
  %1704 = getelementptr double, ptr %1610, i64 %1697
  %1705 = load double, ptr %1704, align 8, !tbaa !22
  %1706 = fmul contract double %1705, 6.000000e+00
  %1707 = fadd contract double %1703, %1706
  %1708 = getelementptr double, ptr %1615, i64 %1697
  %1709 = load double, ptr %1708, align 8, !tbaa !22
  %1710 = fmul contract double %1709, 4.000000e+00
  %1711 = fsub contract double %1707, %1710
  %1712 = getelementptr double, ptr %1620, i64 %1697
  %1713 = load double, ptr %1712, align 8, !tbaa !22
  %1714 = fadd contract double %1713, %1711
  %1715 = fmul contract double %297, %1714
  %1716 = fsub contract double %1696, %1715
  store double %1716, ptr %1695, align 8, !tbaa !20
  %1717 = getelementptr double, ptr %1626, i64 %345
  %1718 = load double, ptr %1717, align 8, !tbaa !20
  %reass.sub6175 = sub i64 %1628, %.unpack4490.unpack.unpack
  %1719 = add i64 %reass.sub6175, 5
  %1720 = getelementptr double, ptr %1602, i64 %1719
  %1721 = load double, ptr %1720, align 8, !tbaa !22
  %1722 = getelementptr double, ptr %1607, i64 %1719
  %1723 = load double, ptr %1722, align 8, !tbaa !22
  %1724 = fmul contract double %1723, 4.000000e+00
  %1725 = fsub contract double %1721, %1724
  %1726 = getelementptr double, ptr %1610, i64 %1719
  %1727 = load double, ptr %1726, align 8, !tbaa !22
  %1728 = fmul contract double %1727, 6.000000e+00
  %1729 = fadd contract double %1725, %1728
  %1730 = getelementptr double, ptr %1615, i64 %1719
  %1731 = load double, ptr %1730, align 8, !tbaa !22
  %1732 = fmul contract double %1731, 4.000000e+00
  %1733 = fsub contract double %1729, %1732
  %1734 = getelementptr double, ptr %1620, i64 %1719
  %1735 = load double, ptr %1734, align 8, !tbaa !22
  %1736 = fadd contract double %1735, %1733
  %1737 = fmul contract double %297, %1736
  %1738 = fsub contract double %1718, %1737
  store double %1738, ptr %1717, align 8, !tbaa !20
  %1739 = add i32 %1622, 1
  %1740 = add nsw i64 %1621, -1
  %1741 = icmp sgt i64 %1621, 1
  br i1 %1741, label %omp.wsloop.region200.preheader, label %omp_collapsed.inc209

omp_collapsed.inc209:                             ; preds = %omp.wsloop.region177.preheader, %omp.wsloop.region169.preheader, %omp.wsloop.region200.preheader, %omp.wsloop.region193.preheader, %omp.wsloop.region185.preheader, %omp.wsloop.region174, %omp.wsloop.region166, %omp.wsloop.region197, %omp.wsloop.region190, %omp.wsloop.region182
  %omp_collapsed.next214 = add nuw i32 %omp_collapsed.iv2125951, 1
  %exitcond6085.not = icmp eq i32 %omp_collapsed.iv2125951, %reass.sub6015
  br i1 %exitcond6085.not, label %omp_collapsed.exit210, label %omp_collapsed.body208

omp.wsloop.region190:                             ; preds = %omp.wsloop.region189
  br i1 %292, label %omp.wsloop.region193.preheader.lr.ph, label %omp_collapsed.inc209

omp.wsloop.region193.preheader.lr.ph:             ; preds = %omp.wsloop.region190
  %1742 = sext i32 %1583 to i64
  %1743 = sub nsw i64 %1742, %.unpack4466.unpack4469.unpack
  %1744 = mul nsw i64 %296, %1743
  %gep5957 = getelementptr double, ptr %invariant.gep5956, i64 %1744
  %1745 = sub nsw i64 %1742, %.unpack4490.unpack4493.unpack
  %1746 = mul nsw i64 %301, %1745
  %1747 = getelementptr double, ptr %.unpack4483, i64 %1746
  %1748 = getelementptr double, ptr %1747, i64 %319
  %1749 = getelementptr double, ptr %1747, i64 %322
  %1750 = getelementptr double, ptr %1747, i64 %324
  br label %omp.wsloop.region193.preheader

omp.wsloop.region193.preheader:                   ; preds = %omp.wsloop.region193.preheader.lr.ph, %omp.wsloop.region193.preheader
  %1751 = phi i64 [ %291, %omp.wsloop.region193.preheader.lr.ph ], [ %1835, %omp.wsloop.region193.preheader ]
  %1752 = phi i32 [ %287, %omp.wsloop.region193.preheader.lr.ph ], [ %1834, %omp.wsloop.region193.preheader ]
  %1753 = sext i32 %1752 to i64
  %1754 = sub nsw i64 %1753, %.unpack4466.unpack4467.unpack
  %1755 = mul nsw i64 %1754, %.unpack4466.unpack.unpack4471
  %1756 = getelementptr double, ptr %gep5957, i64 %1755
  %1757 = sub nsw i64 %1753, %.unpack4490.unpack4491.unpack
  %1758 = mul nsw i64 %1757, %.unpack4490.unpack.unpack4495
  %1759 = getelementptr double, ptr %1756, i64 %346
  %1760 = load double, ptr %1759, align 8, !tbaa !20
  %reass.sub6176 = sub i64 %1758, %.unpack4490.unpack.unpack
  %1761 = add i64 %reass.sub6176, 1
  %1762 = getelementptr double, ptr %1748, i64 %1761
  %1763 = load double, ptr %1762, align 8, !tbaa !22
  %1764 = getelementptr double, ptr %1749, i64 %1761
  %1765 = load double, ptr %1764, align 8, !tbaa !22
  %1766 = fmul contract double %1765, 4.000000e+00
  %1767 = fsub contract double %1763, %1766
  %1768 = getelementptr double, ptr %1750, i64 %1761
  %1769 = load double, ptr %1768, align 8, !tbaa !22
  %1770 = fmul contract double %1769, 5.000000e+00
  %1771 = fadd contract double %1767, %1770
  %1772 = fmul contract double %297, %1771
  %1773 = fsub contract double %1760, %1772
  store double %1773, ptr %1759, align 8, !tbaa !20
  %1774 = getelementptr double, ptr %1756, i64 %347
  %1775 = load double, ptr %1774, align 8, !tbaa !20
  %reass.sub6177 = sub i64 %1758, %.unpack4490.unpack.unpack
  %1776 = add i64 %reass.sub6177, 2
  %1777 = getelementptr double, ptr %1748, i64 %1776
  %1778 = load double, ptr %1777, align 8, !tbaa !22
  %1779 = getelementptr double, ptr %1749, i64 %1776
  %1780 = load double, ptr %1779, align 8, !tbaa !22
  %1781 = fmul contract double %1780, 4.000000e+00
  %1782 = fsub contract double %1778, %1781
  %1783 = getelementptr double, ptr %1750, i64 %1776
  %1784 = load double, ptr %1783, align 8, !tbaa !22
  %1785 = fmul contract double %1784, 5.000000e+00
  %1786 = fadd contract double %1782, %1785
  %1787 = fmul contract double %297, %1786
  %1788 = fsub contract double %1775, %1787
  store double %1788, ptr %1774, align 8, !tbaa !20
  %1789 = getelementptr double, ptr %1756, i64 %348
  %1790 = load double, ptr %1789, align 8, !tbaa !20
  %reass.sub6178 = sub i64 %1758, %.unpack4490.unpack.unpack
  %1791 = add i64 %reass.sub6178, 3
  %1792 = getelementptr double, ptr %1748, i64 %1791
  %1793 = load double, ptr %1792, align 8, !tbaa !22
  %1794 = getelementptr double, ptr %1749, i64 %1791
  %1795 = load double, ptr %1794, align 8, !tbaa !22
  %1796 = fmul contract double %1795, 4.000000e+00
  %1797 = fsub contract double %1793, %1796
  %1798 = getelementptr double, ptr %1750, i64 %1791
  %1799 = load double, ptr %1798, align 8, !tbaa !22
  %1800 = fmul contract double %1799, 5.000000e+00
  %1801 = fadd contract double %1797, %1800
  %1802 = fmul contract double %297, %1801
  %1803 = fsub contract double %1790, %1802
  store double %1803, ptr %1789, align 8, !tbaa !20
  %1804 = getelementptr double, ptr %1756, i64 %349
  %1805 = load double, ptr %1804, align 8, !tbaa !20
  %reass.sub6179 = sub i64 %1758, %.unpack4490.unpack.unpack
  %1806 = add i64 %reass.sub6179, 4
  %1807 = getelementptr double, ptr %1748, i64 %1806
  %1808 = load double, ptr %1807, align 8, !tbaa !22
  %1809 = getelementptr double, ptr %1749, i64 %1806
  %1810 = load double, ptr %1809, align 8, !tbaa !22
  %1811 = fmul contract double %1810, 4.000000e+00
  %1812 = fsub contract double %1808, %1811
  %1813 = getelementptr double, ptr %1750, i64 %1806
  %1814 = load double, ptr %1813, align 8, !tbaa !22
  %1815 = fmul contract double %1814, 5.000000e+00
  %1816 = fadd contract double %1812, %1815
  %1817 = fmul contract double %297, %1816
  %1818 = fsub contract double %1805, %1817
  store double %1818, ptr %1804, align 8, !tbaa !20
  %1819 = getelementptr double, ptr %1756, i64 %350
  %1820 = load double, ptr %1819, align 8, !tbaa !20
  %reass.sub6180 = sub i64 %1758, %.unpack4490.unpack.unpack
  %1821 = add i64 %reass.sub6180, 5
  %1822 = getelementptr double, ptr %1748, i64 %1821
  %1823 = load double, ptr %1822, align 8, !tbaa !22
  %1824 = getelementptr double, ptr %1749, i64 %1821
  %1825 = load double, ptr %1824, align 8, !tbaa !22
  %1826 = fmul contract double %1825, 4.000000e+00
  %1827 = fsub contract double %1823, %1826
  %1828 = getelementptr double, ptr %1750, i64 %1821
  %1829 = load double, ptr %1828, align 8, !tbaa !22
  %1830 = fmul contract double %1829, 5.000000e+00
  %1831 = fadd contract double %1827, %1830
  %1832 = fmul contract double %297, %1831
  %1833 = fsub contract double %1820, %1832
  store double %1833, ptr %1819, align 8, !tbaa !20
  %1834 = add i32 %1752, 1
  %1835 = add nsw i64 %1751, -1
  %1836 = icmp sgt i64 %1751, 1
  br i1 %1836, label %omp.wsloop.region193.preheader, label %omp_collapsed.inc209

omp.wsloop.region182:                             ; preds = %omp.wsloop.region181
  br i1 %292, label %omp.wsloop.region185.preheader.lr.ph, label %omp_collapsed.inc209

omp.wsloop.region185.preheader.lr.ph:             ; preds = %omp.wsloop.region182
  %1837 = sext i32 %1583 to i64
  %1838 = sub nsw i64 %1837, %.unpack4466.unpack4469.unpack
  %1839 = mul nsw i64 %296, %1838
  %gep5959 = getelementptr double, ptr %invariant.gep5958, i64 %1839
  %1840 = sub nsw i64 %1837, %.unpack4490.unpack4493.unpack
  %1841 = mul nsw i64 %301, %1840
  %1842 = getelementptr double, ptr %.unpack4483, i64 %1841
  %1843 = getelementptr double, ptr %1842, i64 %330
  %1844 = getelementptr double, ptr %1842, i64 %319
  %1845 = getelementptr double, ptr %1842, i64 %322
  %1846 = getelementptr double, ptr %1842, i64 %324
  br label %omp.wsloop.region185.preheader

omp.wsloop.region185.preheader:                   ; preds = %omp.wsloop.region185.preheader.lr.ph, %omp.wsloop.region185.preheader
  %1847 = phi i64 [ %291, %omp.wsloop.region185.preheader.lr.ph ], [ %1951, %omp.wsloop.region185.preheader ]
  %1848 = phi i32 [ %287, %omp.wsloop.region185.preheader.lr.ph ], [ %1950, %omp.wsloop.region185.preheader ]
  %1849 = sext i32 %1848 to i64
  %1850 = sub nsw i64 %1849, %.unpack4466.unpack4467.unpack
  %1851 = mul nsw i64 %1850, %.unpack4466.unpack.unpack4471
  %1852 = getelementptr double, ptr %gep5959, i64 %1851
  %1853 = sub nsw i64 %1849, %.unpack4490.unpack4491.unpack
  %1854 = mul nsw i64 %1853, %.unpack4490.unpack.unpack4495
  %1855 = getelementptr double, ptr %1852, i64 %351
  %1856 = load double, ptr %1855, align 8, !tbaa !20
  %reass.sub6181 = sub i64 %1854, %.unpack4490.unpack.unpack
  %1857 = add i64 %reass.sub6181, 1
  %1858 = getelementptr double, ptr %1843, i64 %1857
  %1859 = load double, ptr %1858, align 8, !tbaa !22
  %1860 = getelementptr double, ptr %1844, i64 %1857
  %1861 = load double, ptr %1860, align 8, !tbaa !22
  %1862 = fmul contract double %1861, 4.000000e+00
  %1863 = fsub contract double %1859, %1862
  %1864 = getelementptr double, ptr %1845, i64 %1857
  %1865 = load double, ptr %1864, align 8, !tbaa !22
  %1866 = fmul contract double %1865, 6.000000e+00
  %1867 = fadd contract double %1863, %1866
  %1868 = getelementptr double, ptr %1846, i64 %1857
  %1869 = load double, ptr %1868, align 8, !tbaa !22
  %1870 = fmul contract double %1869, 4.000000e+00
  %1871 = fsub contract double %1867, %1870
  %1872 = fmul contract double %297, %1871
  %1873 = fsub contract double %1856, %1872
  store double %1873, ptr %1855, align 8, !tbaa !20
  %1874 = getelementptr double, ptr %1852, i64 %352
  %1875 = load double, ptr %1874, align 8, !tbaa !20
  %reass.sub6182 = sub i64 %1854, %.unpack4490.unpack.unpack
  %1876 = add i64 %reass.sub6182, 2
  %1877 = getelementptr double, ptr %1843, i64 %1876
  %1878 = load double, ptr %1877, align 8, !tbaa !22
  %1879 = getelementptr double, ptr %1844, i64 %1876
  %1880 = load double, ptr %1879, align 8, !tbaa !22
  %1881 = fmul contract double %1880, 4.000000e+00
  %1882 = fsub contract double %1878, %1881
  %1883 = getelementptr double, ptr %1845, i64 %1876
  %1884 = load double, ptr %1883, align 8, !tbaa !22
  %1885 = fmul contract double %1884, 6.000000e+00
  %1886 = fadd contract double %1882, %1885
  %1887 = getelementptr double, ptr %1846, i64 %1876
  %1888 = load double, ptr %1887, align 8, !tbaa !22
  %1889 = fmul contract double %1888, 4.000000e+00
  %1890 = fsub contract double %1886, %1889
  %1891 = fmul contract double %297, %1890
  %1892 = fsub contract double %1875, %1891
  store double %1892, ptr %1874, align 8, !tbaa !20
  %1893 = getelementptr double, ptr %1852, i64 %353
  %1894 = load double, ptr %1893, align 8, !tbaa !20
  %reass.sub6183 = sub i64 %1854, %.unpack4490.unpack.unpack
  %1895 = add i64 %reass.sub6183, 3
  %1896 = getelementptr double, ptr %1843, i64 %1895
  %1897 = load double, ptr %1896, align 8, !tbaa !22
  %1898 = getelementptr double, ptr %1844, i64 %1895
  %1899 = load double, ptr %1898, align 8, !tbaa !22
  %1900 = fmul contract double %1899, 4.000000e+00
  %1901 = fsub contract double %1897, %1900
  %1902 = getelementptr double, ptr %1845, i64 %1895
  %1903 = load double, ptr %1902, align 8, !tbaa !22
  %1904 = fmul contract double %1903, 6.000000e+00
  %1905 = fadd contract double %1901, %1904
  %1906 = getelementptr double, ptr %1846, i64 %1895
  %1907 = load double, ptr %1906, align 8, !tbaa !22
  %1908 = fmul contract double %1907, 4.000000e+00
  %1909 = fsub contract double %1905, %1908
  %1910 = fmul contract double %297, %1909
  %1911 = fsub contract double %1894, %1910
  store double %1911, ptr %1893, align 8, !tbaa !20
  %1912 = getelementptr double, ptr %1852, i64 %354
  %1913 = load double, ptr %1912, align 8, !tbaa !20
  %reass.sub6184 = sub i64 %1854, %.unpack4490.unpack.unpack
  %1914 = add i64 %reass.sub6184, 4
  %1915 = getelementptr double, ptr %1843, i64 %1914
  %1916 = load double, ptr %1915, align 8, !tbaa !22
  %1917 = getelementptr double, ptr %1844, i64 %1914
  %1918 = load double, ptr %1917, align 8, !tbaa !22
  %1919 = fmul contract double %1918, 4.000000e+00
  %1920 = fsub contract double %1916, %1919
  %1921 = getelementptr double, ptr %1845, i64 %1914
  %1922 = load double, ptr %1921, align 8, !tbaa !22
  %1923 = fmul contract double %1922, 6.000000e+00
  %1924 = fadd contract double %1920, %1923
  %1925 = getelementptr double, ptr %1846, i64 %1914
  %1926 = load double, ptr %1925, align 8, !tbaa !22
  %1927 = fmul contract double %1926, 4.000000e+00
  %1928 = fsub contract double %1924, %1927
  %1929 = fmul contract double %297, %1928
  %1930 = fsub contract double %1913, %1929
  store double %1930, ptr %1912, align 8, !tbaa !20
  %1931 = getelementptr double, ptr %1852, i64 %355
  %1932 = load double, ptr %1931, align 8, !tbaa !20
  %reass.sub6185 = sub i64 %1854, %.unpack4490.unpack.unpack
  %1933 = add i64 %reass.sub6185, 5
  %1934 = getelementptr double, ptr %1843, i64 %1933
  %1935 = load double, ptr %1934, align 8, !tbaa !22
  %1936 = getelementptr double, ptr %1844, i64 %1933
  %1937 = load double, ptr %1936, align 8, !tbaa !22
  %1938 = fmul contract double %1937, 4.000000e+00
  %1939 = fsub contract double %1935, %1938
  %1940 = getelementptr double, ptr %1845, i64 %1933
  %1941 = load double, ptr %1940, align 8, !tbaa !22
  %1942 = fmul contract double %1941, 6.000000e+00
  %1943 = fadd contract double %1939, %1942
  %1944 = getelementptr double, ptr %1846, i64 %1933
  %1945 = load double, ptr %1944, align 8, !tbaa !22
  %1946 = fmul contract double %1945, 4.000000e+00
  %1947 = fsub contract double %1943, %1946
  %1948 = fmul contract double %297, %1947
  %1949 = fsub contract double %1932, %1948
  store double %1949, ptr %1931, align 8, !tbaa !20
  %1950 = add i32 %1848, 1
  %1951 = add nsw i64 %1847, -1
  %1952 = icmp sgt i64 %1847, 1
  br i1 %1952, label %omp.wsloop.region185.preheader, label %omp_collapsed.inc209

omp.wsloop.region174:                             ; preds = %omp_collapsed.body208
  br i1 %292, label %omp.wsloop.region177.preheader.lr.ph, label %omp_collapsed.inc209

omp.wsloop.region177.preheader.lr.ph:             ; preds = %omp.wsloop.region174
  %1953 = sext i32 %1583 to i64
  %1954 = sub nsw i64 %1953, %.unpack4466.unpack4469.unpack
  %1955 = mul nsw i64 %296, %1954
  %gep5953 = getelementptr double, ptr %invariant.gep5952, i64 %1955
  %1956 = sub nsw i64 %1953, %.unpack4490.unpack4493.unpack
  %1957 = mul nsw i64 %301, %1956
  %1958 = getelementptr double, ptr %.unpack4483, i64 %1957
  %1959 = getelementptr double, ptr %1958, i64 %300
  %1960 = getelementptr double, ptr %1958, i64 %303
  %1961 = getelementptr double, ptr %1958, i64 %305
  %1962 = getelementptr double, ptr %1958, i64 %307
  br label %omp.wsloop.region177.preheader

omp.wsloop.region177.preheader:                   ; preds = %omp.wsloop.region177.preheader.lr.ph, %omp.wsloop.region177.preheader
  %1963 = phi i64 [ %291, %omp.wsloop.region177.preheader.lr.ph ], [ %2067, %omp.wsloop.region177.preheader ]
  %1964 = phi i32 [ %287, %omp.wsloop.region177.preheader.lr.ph ], [ %2066, %omp.wsloop.region177.preheader ]
  %1965 = sext i32 %1964 to i64
  %1966 = sub nsw i64 %1965, %.unpack4466.unpack4467.unpack
  %1967 = mul nsw i64 %1966, %.unpack4466.unpack.unpack4471
  %1968 = getelementptr double, ptr %gep5953, i64 %1967
  %1969 = sub nsw i64 %1965, %.unpack4490.unpack4491.unpack
  %1970 = mul nsw i64 %1969, %.unpack4490.unpack.unpack4495
  %1971 = getelementptr double, ptr %1968, i64 %331
  %1972 = load double, ptr %1971, align 8, !tbaa !20
  %reass.sub6161 = sub i64 %1970, %.unpack4490.unpack.unpack
  %1973 = add i64 %reass.sub6161, 1
  %1974 = getelementptr double, ptr %1959, i64 %1973
  %1975 = load double, ptr %1974, align 8, !tbaa !22
  %1976 = fmul contract double %1975, 4.000000e+00
  %1977 = getelementptr double, ptr %1960, i64 %1973
  %1978 = load double, ptr %1977, align 8, !tbaa !22
  %1979 = fmul contract double %1978, 6.000000e+00
  %1980 = fsub contract double %1979, %1976
  %1981 = getelementptr double, ptr %1961, i64 %1973
  %1982 = load double, ptr %1981, align 8, !tbaa !22
  %1983 = fmul contract double %1982, 4.000000e+00
  %1984 = fsub contract double %1980, %1983
  %1985 = getelementptr double, ptr %1962, i64 %1973
  %1986 = load double, ptr %1985, align 8, !tbaa !22
  %1987 = fadd contract double %1986, %1984
  %1988 = fmul contract double %297, %1987
  %1989 = fsub contract double %1972, %1988
  store double %1989, ptr %1971, align 8, !tbaa !20
  %1990 = getelementptr double, ptr %1968, i64 %332
  %1991 = load double, ptr %1990, align 8, !tbaa !20
  %reass.sub6162 = sub i64 %1970, %.unpack4490.unpack.unpack
  %1992 = add i64 %reass.sub6162, 2
  %1993 = getelementptr double, ptr %1959, i64 %1992
  %1994 = load double, ptr %1993, align 8, !tbaa !22
  %1995 = fmul contract double %1994, 4.000000e+00
  %1996 = getelementptr double, ptr %1960, i64 %1992
  %1997 = load double, ptr %1996, align 8, !tbaa !22
  %1998 = fmul contract double %1997, 6.000000e+00
  %1999 = fsub contract double %1998, %1995
  %2000 = getelementptr double, ptr %1961, i64 %1992
  %2001 = load double, ptr %2000, align 8, !tbaa !22
  %2002 = fmul contract double %2001, 4.000000e+00
  %2003 = fsub contract double %1999, %2002
  %2004 = getelementptr double, ptr %1962, i64 %1992
  %2005 = load double, ptr %2004, align 8, !tbaa !22
  %2006 = fadd contract double %2005, %2003
  %2007 = fmul contract double %297, %2006
  %2008 = fsub contract double %1991, %2007
  store double %2008, ptr %1990, align 8, !tbaa !20
  %2009 = getelementptr double, ptr %1968, i64 %333
  %2010 = load double, ptr %2009, align 8, !tbaa !20
  %reass.sub6163 = sub i64 %1970, %.unpack4490.unpack.unpack
  %2011 = add i64 %reass.sub6163, 3
  %2012 = getelementptr double, ptr %1959, i64 %2011
  %2013 = load double, ptr %2012, align 8, !tbaa !22
  %2014 = fmul contract double %2013, 4.000000e+00
  %2015 = getelementptr double, ptr %1960, i64 %2011
  %2016 = load double, ptr %2015, align 8, !tbaa !22
  %2017 = fmul contract double %2016, 6.000000e+00
  %2018 = fsub contract double %2017, %2014
  %2019 = getelementptr double, ptr %1961, i64 %2011
  %2020 = load double, ptr %2019, align 8, !tbaa !22
  %2021 = fmul contract double %2020, 4.000000e+00
  %2022 = fsub contract double %2018, %2021
  %2023 = getelementptr double, ptr %1962, i64 %2011
  %2024 = load double, ptr %2023, align 8, !tbaa !22
  %2025 = fadd contract double %2024, %2022
  %2026 = fmul contract double %297, %2025
  %2027 = fsub contract double %2010, %2026
  store double %2027, ptr %2009, align 8, !tbaa !20
  %2028 = getelementptr double, ptr %1968, i64 %334
  %2029 = load double, ptr %2028, align 8, !tbaa !20
  %reass.sub6164 = sub i64 %1970, %.unpack4490.unpack.unpack
  %2030 = add i64 %reass.sub6164, 4
  %2031 = getelementptr double, ptr %1959, i64 %2030
  %2032 = load double, ptr %2031, align 8, !tbaa !22
  %2033 = fmul contract double %2032, 4.000000e+00
  %2034 = getelementptr double, ptr %1960, i64 %2030
  %2035 = load double, ptr %2034, align 8, !tbaa !22
  %2036 = fmul contract double %2035, 6.000000e+00
  %2037 = fsub contract double %2036, %2033
  %2038 = getelementptr double, ptr %1961, i64 %2030
  %2039 = load double, ptr %2038, align 8, !tbaa !22
  %2040 = fmul contract double %2039, 4.000000e+00
  %2041 = fsub contract double %2037, %2040
  %2042 = getelementptr double, ptr %1962, i64 %2030
  %2043 = load double, ptr %2042, align 8, !tbaa !22
  %2044 = fadd contract double %2043, %2041
  %2045 = fmul contract double %297, %2044
  %2046 = fsub contract double %2029, %2045
  store double %2046, ptr %2028, align 8, !tbaa !20
  %2047 = getelementptr double, ptr %1968, i64 %335
  %2048 = load double, ptr %2047, align 8, !tbaa !20
  %reass.sub6165 = sub i64 %1970, %.unpack4490.unpack.unpack
  %2049 = add i64 %reass.sub6165, 5
  %2050 = getelementptr double, ptr %1959, i64 %2049
  %2051 = load double, ptr %2050, align 8, !tbaa !22
  %2052 = fmul contract double %2051, 4.000000e+00
  %2053 = getelementptr double, ptr %1960, i64 %2049
  %2054 = load double, ptr %2053, align 8, !tbaa !22
  %2055 = fmul contract double %2054, 6.000000e+00
  %2056 = fsub contract double %2055, %2052
  %2057 = getelementptr double, ptr %1961, i64 %2049
  %2058 = load double, ptr %2057, align 8, !tbaa !22
  %2059 = fmul contract double %2058, 4.000000e+00
  %2060 = fsub contract double %2056, %2059
  %2061 = getelementptr double, ptr %1962, i64 %2049
  %2062 = load double, ptr %2061, align 8, !tbaa !22
  %2063 = fadd contract double %2062, %2060
  %2064 = fmul contract double %297, %2063
  %2065 = fsub contract double %2048, %2064
  store double %2065, ptr %2047, align 8, !tbaa !20
  %2066 = add i32 %1964, 1
  %2067 = add nsw i64 %1963, -1
  %2068 = icmp sgt i64 %1963, 1
  br i1 %2068, label %omp.wsloop.region177.preheader, label %omp_collapsed.inc209

omp.wsloop.region166:                             ; preds = %omp_collapsed.body208
  br i1 %292, label %omp.wsloop.region169.preheader.lr.ph, label %omp_collapsed.inc209

omp.wsloop.region169.preheader.lr.ph:             ; preds = %omp.wsloop.region166
  %2069 = sext i32 %1583 to i64
  %2070 = sub nsw i64 %2069, %.unpack4466.unpack4469.unpack
  %2071 = mul nsw i64 %296, %2070
  %gep5955 = getelementptr double, ptr %invariant.gep5954, i64 %2071
  %2072 = sub nsw i64 %2069, %.unpack4490.unpack4493.unpack
  %2073 = mul nsw i64 %301, %2072
  %2074 = getelementptr double, ptr %.unpack4483, i64 %2073
  %2075 = getelementptr double, ptr %2074, i64 %300
  %2076 = getelementptr double, ptr %2074, i64 %303
  %2077 = getelementptr double, ptr %2074, i64 %305
  br label %omp.wsloop.region169.preheader

omp.wsloop.region169.preheader:                   ; preds = %omp.wsloop.region169.preheader.lr.ph, %omp.wsloop.region169.preheader
  %2078 = phi i64 [ %291, %omp.wsloop.region169.preheader.lr.ph ], [ %2162, %omp.wsloop.region169.preheader ]
  %2079 = phi i32 [ %287, %omp.wsloop.region169.preheader.lr.ph ], [ %2161, %omp.wsloop.region169.preheader ]
  %2080 = sext i32 %2079 to i64
  %2081 = sub nsw i64 %2080, %.unpack4466.unpack4467.unpack
  %2082 = mul nsw i64 %2081, %.unpack4466.unpack.unpack4471
  %2083 = getelementptr double, ptr %gep5955, i64 %2082
  %2084 = sub nsw i64 %2080, %.unpack4490.unpack4491.unpack
  %2085 = mul nsw i64 %2084, %.unpack4490.unpack.unpack4495
  %2086 = getelementptr double, ptr %2083, i64 %336
  %2087 = load double, ptr %2086, align 8, !tbaa !20
  %reass.sub6166 = sub i64 %2085, %.unpack4490.unpack.unpack
  %2088 = add i64 %reass.sub6166, 1
  %2089 = getelementptr double, ptr %2075, i64 %2088
  %2090 = load double, ptr %2089, align 8, !tbaa !22
  %2091 = fmul contract double %2090, 5.000000e+00
  %2092 = getelementptr double, ptr %2076, i64 %2088
  %2093 = load double, ptr %2092, align 8, !tbaa !22
  %2094 = fmul contract double %2093, 4.000000e+00
  %2095 = fsub contract double %2091, %2094
  %2096 = getelementptr double, ptr %2077, i64 %2088
  %2097 = load double, ptr %2096, align 8, !tbaa !22
  %2098 = fadd contract double %2097, %2095
  %2099 = fmul contract double %297, %2098
  %2100 = fsub contract double %2087, %2099
  store double %2100, ptr %2086, align 8, !tbaa !20
  %2101 = getelementptr double, ptr %2083, i64 %337
  %2102 = load double, ptr %2101, align 8, !tbaa !20
  %reass.sub6167 = sub i64 %2085, %.unpack4490.unpack.unpack
  %2103 = add i64 %reass.sub6167, 2
  %2104 = getelementptr double, ptr %2075, i64 %2103
  %2105 = load double, ptr %2104, align 8, !tbaa !22
  %2106 = fmul contract double %2105, 5.000000e+00
  %2107 = getelementptr double, ptr %2076, i64 %2103
  %2108 = load double, ptr %2107, align 8, !tbaa !22
  %2109 = fmul contract double %2108, 4.000000e+00
  %2110 = fsub contract double %2106, %2109
  %2111 = getelementptr double, ptr %2077, i64 %2103
  %2112 = load double, ptr %2111, align 8, !tbaa !22
  %2113 = fadd contract double %2112, %2110
  %2114 = fmul contract double %297, %2113
  %2115 = fsub contract double %2102, %2114
  store double %2115, ptr %2101, align 8, !tbaa !20
  %2116 = getelementptr double, ptr %2083, i64 %338
  %2117 = load double, ptr %2116, align 8, !tbaa !20
  %reass.sub6168 = sub i64 %2085, %.unpack4490.unpack.unpack
  %2118 = add i64 %reass.sub6168, 3
  %2119 = getelementptr double, ptr %2075, i64 %2118
  %2120 = load double, ptr %2119, align 8, !tbaa !22
  %2121 = fmul contract double %2120, 5.000000e+00
  %2122 = getelementptr double, ptr %2076, i64 %2118
  %2123 = load double, ptr %2122, align 8, !tbaa !22
  %2124 = fmul contract double %2123, 4.000000e+00
  %2125 = fsub contract double %2121, %2124
  %2126 = getelementptr double, ptr %2077, i64 %2118
  %2127 = load double, ptr %2126, align 8, !tbaa !22
  %2128 = fadd contract double %2127, %2125
  %2129 = fmul contract double %297, %2128
  %2130 = fsub contract double %2117, %2129
  store double %2130, ptr %2116, align 8, !tbaa !20
  %2131 = getelementptr double, ptr %2083, i64 %339
  %2132 = load double, ptr %2131, align 8, !tbaa !20
  %reass.sub6169 = sub i64 %2085, %.unpack4490.unpack.unpack
  %2133 = add i64 %reass.sub6169, 4
  %2134 = getelementptr double, ptr %2075, i64 %2133
  %2135 = load double, ptr %2134, align 8, !tbaa !22
  %2136 = fmul contract double %2135, 5.000000e+00
  %2137 = getelementptr double, ptr %2076, i64 %2133
  %2138 = load double, ptr %2137, align 8, !tbaa !22
  %2139 = fmul contract double %2138, 4.000000e+00
  %2140 = fsub contract double %2136, %2139
  %2141 = getelementptr double, ptr %2077, i64 %2133
  %2142 = load double, ptr %2141, align 8, !tbaa !22
  %2143 = fadd contract double %2142, %2140
  %2144 = fmul contract double %297, %2143
  %2145 = fsub contract double %2132, %2144
  store double %2145, ptr %2131, align 8, !tbaa !20
  %2146 = getelementptr double, ptr %2083, i64 %340
  %2147 = load double, ptr %2146, align 8, !tbaa !20
  %reass.sub6170 = sub i64 %2085, %.unpack4490.unpack.unpack
  %2148 = add i64 %reass.sub6170, 5
  %2149 = getelementptr double, ptr %2075, i64 %2148
  %2150 = load double, ptr %2149, align 8, !tbaa !22
  %2151 = fmul contract double %2150, 5.000000e+00
  %2152 = getelementptr double, ptr %2076, i64 %2148
  %2153 = load double, ptr %2152, align 8, !tbaa !22
  %2154 = fmul contract double %2153, 4.000000e+00
  %2155 = fsub contract double %2151, %2154
  %2156 = getelementptr double, ptr %2077, i64 %2148
  %2157 = load double, ptr %2156, align 8, !tbaa !22
  %2158 = fadd contract double %2157, %2155
  %2159 = fmul contract double %297, %2158
  %2160 = fsub contract double %2147, %2159
  store double %2160, ptr %2146, align 8, !tbaa !20
  %2161 = add i32 %2079, 1
  %2162 = add nsw i64 %2078, -1
  %2163 = icmp sgt i64 %2078, 1
  br i1 %2163, label %omp.wsloop.region169.preheader, label %omp_collapsed.inc209

omp_collapsed.body136:                            ; preds = %omp_collapsed.body136.lr.ph, %omp.wsloop.region132
  %omp_collapsed.iv1405949 = phi i32 [ 0, %omp_collapsed.body136.lr.ph ], [ %omp_collapsed.next142, %omp.wsloop.region132 ]
  %2164 = add i32 %omp_collapsed.iv1405949, %238
  %2165 = urem i32 %2164, %235
  %2166 = udiv i32 %2164, %235
  %2167 = add i32 %2166, 2
  %2168 = add i32 %2165, %229
  %2169 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !13
  %2170 = icmp sgt i32 %2169, 0
  br i1 %2170, label %omp.wsloop.region119.lr.ph, label %omp.wsloop.region120

omp.wsloop.region119.lr.ph:                       ; preds = %omp_collapsed.body136
  %2171 = sext i32 %2168 to i64
  %2172 = sext i32 %2167 to i64
  %2173 = sub nsw i64 %2171, %.unpack4884.unpack4885.unpack
  %2174 = mul nsw i64 %2173, %.unpack4884.unpack.unpack4889
  %reass.sub4901 = sub i64 %2174, %.unpack4884.unpack.unpack
  %2175 = sub nsw i64 %2172, %.unpack4884.unpack4887.unpack
  %2176 = mul nsw i64 %241, %2175
  %2177 = getelementptr double, ptr %.unpack4877, i64 %2176
  %invariant.gep5930 = getelementptr double, ptr %2177, i64 %reass.sub4901
  %2178 = sub nsw i64 %2171, %.unpack4934.unpack.unpack
  %2179 = sub i64 %2172, %.unpack4934.unpack4936.unpack
  %2180 = mul nsw i64 %242, %2179
  %2181 = getelementptr double, ptr %.unpack4927, i64 %2180
  %invariant.gep5932 = getelementptr double, ptr %2181, i64 %2178
  %2182 = sub nsw i64 %2171, %.unpack4954.unpack.unpack
  %2183 = sub i64 %2172, %.unpack4954.unpack4956.unpack
  %2184 = mul nsw i64 %243, %2183
  %2185 = getelementptr double, ptr %.unpack4947, i64 %2184
  %invariant.gep5934 = getelementptr double, ptr %2185, i64 %2182
  %narrow6160 = add nuw i32 %2169, 1
  %2186 = zext i32 %narrow6160 to i64
  %2187 = add nsw i64 %2186, -1
  %min.iters.check6474 = icmp ult i32 %2169, 20
  %brmerge = select i1 %min.iters.check6474, i1 true, i1 %273
  br i1 %brmerge, label %omp.wsloop.region119.preheader, label %vector.memcheck6410

vector.memcheck6410:                              ; preds = %omp.wsloop.region119.lr.ph
  %2188 = mul nuw nsw i64 %2186, 40
  %scevgep6412 = getelementptr i8, ptr %scevgep6411, i64 %2188
  %2189 = mul i64 %255, %2175
  %reass.sub6624 = sub i64 %2189, %254
  %2190 = add i64 %reass.sub6624, -8
  %2191 = shl nuw nsw i64 %2186, 3
  %2192 = add i64 %2190, %2191
  %2193 = mul i64 %.unpack4884.unpack4885.unpack4892, %2192
  %2194 = add i64 %253, %2193
  %2195 = shl nsw i64 %2171, 3
  %2196 = add i64 %2194, %2195
  %2197 = mul i64 %.unpack4884.unpack.unpack4889, %2196
  %scevgep6414 = getelementptr i8, ptr %scevgep6413, i64 %2197
  %reass.sub6625 = sub i64 %2189, %254
  %2198 = add i64 %reass.sub6625, 8
  %2199 = mul i64 %.unpack4884.unpack4885.unpack4892, %2198
  %2200 = add i64 %253, %2199
  %2201 = add i64 %2200, %2195
  %2202 = mul i64 %.unpack4884.unpack.unpack4889, %2201
  %scevgep6416 = getelementptr i8, ptr %scevgep6415, i64 %2202
  %2203 = icmp ult ptr %scevgep6414, %scevgep6416
  %umin6417 = select i1 %2203, ptr %scevgep6414, ptr %scevgep6416
  %2204 = icmp ugt ptr %scevgep6414, %scevgep6416
  %umax6418 = select i1 %2204, ptr %scevgep6414, ptr %scevgep6416
  %scevgep6419 = getelementptr i8, ptr %umax6418, i64 8
  %scevgep6421 = getelementptr i8, ptr %scevgep6420, i64 %2197
  %scevgep6423 = getelementptr i8, ptr %scevgep6422, i64 %2202
  %2205 = icmp ult ptr %scevgep6421, %scevgep6423
  %umin6424 = select i1 %2205, ptr %scevgep6421, ptr %scevgep6423
  %2206 = icmp ugt ptr %scevgep6421, %scevgep6423
  %umax6425 = select i1 %2206, ptr %scevgep6421, ptr %scevgep6423
  %scevgep6426 = getelementptr i8, ptr %umax6425, i64 8
  %scevgep6428 = getelementptr i8, ptr %scevgep6427, i64 %2197
  %scevgep6430 = getelementptr i8, ptr %scevgep6429, i64 %2202
  %2207 = icmp ult ptr %scevgep6428, %scevgep6430
  %umin6431 = select i1 %2207, ptr %scevgep6428, ptr %scevgep6430
  %2208 = icmp ugt ptr %scevgep6428, %scevgep6430
  %umax6432 = select i1 %2208, ptr %scevgep6428, ptr %scevgep6430
  %scevgep6433 = getelementptr i8, ptr %umax6432, i64 8
  %scevgep6435 = getelementptr i8, ptr %scevgep6434, i64 %2197
  %scevgep6437 = getelementptr i8, ptr %scevgep6436, i64 %2202
  %2209 = icmp ult ptr %scevgep6435, %scevgep6437
  %umin6438 = select i1 %2209, ptr %scevgep6435, ptr %scevgep6437
  %2210 = icmp ugt ptr %scevgep6435, %scevgep6437
  %umax6439 = select i1 %2210, ptr %scevgep6435, ptr %scevgep6437
  %scevgep6440 = getelementptr i8, ptr %umax6439, i64 8
  %2211 = mul i64 %263, %2179
  %2212 = add i64 %2211, %2195
  %scevgep6442 = getelementptr i8, ptr %scevgep6441, i64 %2212
  %2213 = getelementptr i8, ptr %scevgep6443, i64 %2212
  %scevgep6444 = getelementptr i8, ptr %2213, i64 %2191
  %2214 = mul i64 %270, %2183
  %2215 = add i64 %2214, %2195
  %scevgep6446 = getelementptr i8, ptr %scevgep6445, i64 %2215
  %2216 = getelementptr i8, ptr %scevgep6447, i64 %2215
  %scevgep6448 = getelementptr i8, ptr %2216, i64 %2191
  %bound06449 = icmp ult ptr %6, %scevgep6419
  %bound16450 = icmp ult ptr %umin6417, %scevgep6412
  %found.conflict6451 = and i1 %bound06449, %bound16450
  %bound06452 = icmp ult ptr %6, %scevgep6426
  %bound16453 = icmp ult ptr %umin6424, %scevgep6412
  %found.conflict6454 = and i1 %bound06452, %bound16453
  %conflict.rdx6455 = or i1 %found.conflict6451, %found.conflict6454
  %bound06456 = icmp ult ptr %6, %scevgep6433
  %bound16457 = icmp ult ptr %umin6431, %scevgep6412
  %found.conflict6458 = and i1 %bound06456, %bound16457
  %conflict.rdx6459 = or i1 %conflict.rdx6455, %found.conflict6458
  %bound06460 = icmp ult ptr %6, %scevgep6440
  %bound16461 = icmp ult ptr %umin6438, %scevgep6412
  %found.conflict6462 = and i1 %bound06460, %bound16461
  %conflict.rdx6463 = or i1 %conflict.rdx6459, %found.conflict6462
  %bound06464 = icmp ult ptr %6, %scevgep6444
  %bound16465 = icmp ult ptr %scevgep6442, %scevgep6412
  %found.conflict6466 = and i1 %bound06464, %bound16465
  %conflict.rdx6467 = or i1 %conflict.rdx6463, %found.conflict6466
  %bound06468 = icmp ult ptr %6, %scevgep6448
  %bound16469 = icmp ult ptr %scevgep6446, %scevgep6412
  %found.conflict6470 = and i1 %bound06468, %bound16469
  %conflict.rdx6471 = or i1 %conflict.rdx6467, %found.conflict6470
  br i1 %conflict.rdx6471, label %omp.wsloop.region119.preheader, label %vector.ph6475

vector.ph6475:                                    ; preds = %vector.memcheck6410
  %n.vec6477 = and i64 %2187, -2
  %ind.end6478 = or i64 %2187, 1
  br label %vector.body6481

vector.body6481:                                  ; preds = %vector.body6481, %vector.ph6475
  %index6482 = phi i64 [ 0, %vector.ph6475 ], [ %index.next6487, %vector.body6481 ]
  %offset.idx6483 = or disjoint i64 %index6482, 1
  %2217 = add i64 %index6482, 2
  %2218 = sub nsw i64 %offset.idx6483, %.unpack4884.unpack4886.unpack
  %2219 = sub nsw i64 %2217, %.unpack4884.unpack4886.unpack
  %2220 = mul nsw i64 %2218, %240
  %2221 = mul nsw i64 %2219, %240
  %2222 = getelementptr double, ptr %invariant.gep5930, i64 %2220
  %2223 = getelementptr double, ptr %invariant.gep5930, i64 %2221
  %2224 = getelementptr i8, ptr %2222, i64 24
  %2225 = getelementptr i8, ptr %2223, i64 24
  %2226 = load double, ptr %2224, align 8, !tbaa !22, !alias.scope !72
  %2227 = load double, ptr %2225, align 8, !tbaa !22, !alias.scope !72
  %2228 = insertelement <2 x double> poison, double %2226, i64 0
  %2229 = insertelement <2 x double> %2228, double %2227, i64 1
  %2230 = mul nuw nsw i64 %offset.idx6483, 5
  %2231 = sub nsw i64 %offset.idx6483, %.unpack4934.unpack4935.unpack
  %2232 = getelementptr double, ptr %invariant.gep5932, i64 %2231
  %wide.load6484 = load <2 x double>, ptr %2232, align 8, !tbaa !24, !alias.scope !75
  %2233 = fmul contract <2 x double> %2229, %wide.load6484
  %2234 = sub nsw i64 %offset.idx6483, %.unpack4954.unpack4955.unpack
  %2235 = getelementptr double, ptr %invariant.gep5934, i64 %2234
  %wide.load6485 = load <2 x double>, ptr %2235, align 8, !tbaa !26, !alias.scope !77
  %2236 = getelementptr i8, ptr %2222, i64 16
  %2237 = getelementptr i8, ptr %2223, i64 16
  %2238 = load double, ptr %2236, align 8, !tbaa !22, !alias.scope !79
  %2239 = load double, ptr %2237, align 8, !tbaa !22, !alias.scope !79
  %2240 = insertelement <2 x double> poison, double %2238, i64 0
  %2241 = insertelement <2 x double> %2240, double %2239, i64 1
  %2242 = fmul contract <2 x double> %2233, %2241
  %2243 = load double, ptr %2224, align 8, !tbaa !22, !alias.scope !72
  %2244 = load double, ptr %2225, align 8, !tbaa !22, !alias.scope !72
  %2245 = insertelement <2 x double> poison, double %2243, i64 0
  %2246 = insertelement <2 x double> %2245, double %2244, i64 1
  %2247 = fmul contract <2 x double> %2233, %2246
  %2248 = getelementptr i8, ptr %2222, i64 40
  %2249 = getelementptr i8, ptr %2223, i64 40
  %2250 = load double, ptr %2248, align 8, !tbaa !22, !alias.scope !81
  %2251 = load double, ptr %2249, align 8, !tbaa !22, !alias.scope !81
  %2252 = insertelement <2 x double> poison, double %2250, i64 0
  %2253 = insertelement <2 x double> %2252, double %2251, i64 1
  %2254 = fsub contract <2 x double> %2253, %wide.load6485
  %2255 = fmul contract <2 x double> %2254, <double 4.000000e-01, double 4.000000e-01>
  %2256 = fadd contract <2 x double> %2247, %2255
  %2257 = getelementptr i8, ptr %2222, i64 32
  %2258 = getelementptr i8, ptr %2223, i64 32
  %2259 = load double, ptr %2257, align 8, !tbaa !22, !alias.scope !83
  %2260 = load double, ptr %2258, align 8, !tbaa !22, !alias.scope !83
  %2261 = insertelement <2 x double> poison, double %2259, i64 0
  %2262 = insertelement <2 x double> %2261, double %2260, i64 1
  %2263 = fmul contract <2 x double> %2233, %2262
  %2264 = load double, ptr %2248, align 8, !tbaa !22, !alias.scope !81
  %2265 = load double, ptr %2249, align 8, !tbaa !22, !alias.scope !81
  %2266 = insertelement <2 x double> poison, double %2264, i64 0
  %2267 = insertelement <2 x double> %2266, double %2265, i64 1
  %2268 = fmul contract <2 x double> %2267, <double 1.400000e+00, double 1.400000e+00>
  %2269 = fmul contract <2 x double> %wide.load6485, <double 4.000000e-01, double 4.000000e-01>
  %2270 = fsub contract <2 x double> %2268, %2269
  %2271 = fmul contract <2 x double> %2233, %2270
  %gep6640 = getelementptr double, ptr %invariant.gep6639, i64 %2230
  %2272 = shufflevector <2 x double> %2229, <2 x double> %2242, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2273 = shufflevector <2 x double> %2256, <2 x double> %2263, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2274 = shufflevector <4 x double> %2272, <4 x double> %2273, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2275 = shufflevector <2 x double> %2271, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec6486 = shufflevector <8 x double> %2274, <8 x double> %2275, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec6486, ptr %gep6640, align 8, !tbaa !10
  %index.next6487 = add nuw i64 %index6482, 2
  %2276 = icmp eq i64 %index.next6487, %n.vec6477
  br i1 %2276, label %middle.block6472, label %vector.body6481, !llvm.loop !85

middle.block6472:                                 ; preds = %vector.body6481
  %cmp.n6480 = icmp eq i64 %2187, %n.vec6477
  br i1 %cmp.n6480, label %omp.wsloop.region120, label %omp.wsloop.region119.preheader

omp.wsloop.region119.preheader:                   ; preds = %omp.wsloop.region119.lr.ph, %vector.memcheck6410, %middle.block6472
  %indvars.iv6056.ph = phi i64 [ 1, %vector.memcheck6410 ], [ 1, %omp.wsloop.region119.lr.ph ], [ %ind.end6478, %middle.block6472 ]
  br label %omp.wsloop.region119

omp.wsloop.region120:                             ; preds = %omp.wsloop.region119, %middle.block6472, %omp_collapsed.body136
  %2277 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !28
  %2278 = sext i32 %2277 to i64
  %2279 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !30
  %2280 = sext i32 %2279 to i64
  %reass.sub6012 = sub nsw i64 %2280, %2278
  %2281 = icmp sgt i64 %reass.sub6012, -1
  br i1 %2281, label %omp.wsloop.region123.preheader.lr.ph, label %omp.wsloop.region126

omp.wsloop.region123.preheader.lr.ph:             ; preds = %omp.wsloop.region120
  %2282 = add nuw nsw i64 %reass.sub6012, 1
  %2283 = sext i32 %2168 to i64
  %2284 = sext i32 %2167 to i64
  %2285 = sub nsw i64 %2283, %.unpack4860.unpack4861.unpack
  %2286 = mul nsw i64 %2285, %.unpack4860.unpack.unpack4865
  %2287 = sub nsw i64 %2284, %.unpack4860.unpack4863.unpack
  %2288 = mul nsw i64 %245, %2287
  %2289 = getelementptr double, ptr %.unpack4853, i64 %2288
  %invariant.gep5940 = getelementptr double, ptr %2289, i64 %2286
  %2290 = load double, ptr @_QMlu_dataEty2, align 8, !tbaa !86
  br label %omp.wsloop.region123.preheader

omp.wsloop.region123.preheader:                   ; preds = %omp.wsloop.region123.preheader.lr.ph, %omp.wsloop.region123.preheader
  %2291 = phi i64 [ %2282, %omp.wsloop.region123.preheader.lr.ph ], [ %2345, %omp.wsloop.region123.preheader ]
  %2292 = phi i32 [ %2277, %omp.wsloop.region123.preheader.lr.ph ], [ %2296, %omp.wsloop.region123.preheader ]
  %2293 = sext i32 %2292 to i64
  %2294 = sub nsw i64 %2293, %.unpack4860.unpack4862.unpack
  %2295 = mul nsw i64 %2294, %244
  %gep5941 = getelementptr double, ptr %invariant.gep5940, i64 %2295
  %2296 = add i32 %2292, 1
  %2297 = sext i32 %2296 to i64
  %2298 = mul nsw i64 %2297, 5
  %gep5937 = getelementptr double, ptr %invariant.gep5936, i64 %2298
  %2299 = add i32 %2292, -1
  %2300 = sext i32 %2299 to i64
  %2301 = mul nsw i64 %2300, 5
  %gep5939 = getelementptr double, ptr %invariant.gep5936, i64 %2301
  %2302 = getelementptr double, ptr %gep5941, i64 %246
  %2303 = load double, ptr %2302, align 8, !tbaa !20
  %2304 = load double, ptr %gep5937, align 8, !tbaa !10
  %2305 = load double, ptr %gep5939, align 8, !tbaa !10
  %2306 = fsub contract double %2304, %2305
  %2307 = fmul contract double %2290, %2306
  %2308 = fsub contract double %2303, %2307
  store double %2308, ptr %2302, align 8, !tbaa !20
  %2309 = getelementptr double, ptr %gep5941, i64 %247
  %2310 = load double, ptr %2309, align 8, !tbaa !20
  %2311 = getelementptr i8, ptr %gep5937, i64 8
  %2312 = load double, ptr %2311, align 8, !tbaa !10
  %2313 = getelementptr i8, ptr %gep5939, i64 8
  %2314 = load double, ptr %2313, align 8, !tbaa !10
  %2315 = fsub contract double %2312, %2314
  %2316 = fmul contract double %2290, %2315
  %2317 = fsub contract double %2310, %2316
  store double %2317, ptr %2309, align 8, !tbaa !20
  %2318 = getelementptr double, ptr %gep5941, i64 %248
  %2319 = load double, ptr %2318, align 8, !tbaa !20
  %2320 = getelementptr i8, ptr %gep5937, i64 16
  %2321 = load double, ptr %2320, align 8, !tbaa !10
  %2322 = getelementptr i8, ptr %gep5939, i64 16
  %2323 = load double, ptr %2322, align 8, !tbaa !10
  %2324 = fsub contract double %2321, %2323
  %2325 = fmul contract double %2290, %2324
  %2326 = fsub contract double %2319, %2325
  store double %2326, ptr %2318, align 8, !tbaa !20
  %2327 = getelementptr double, ptr %gep5941, i64 %249
  %2328 = load double, ptr %2327, align 8, !tbaa !20
  %2329 = getelementptr i8, ptr %gep5937, i64 24
  %2330 = load double, ptr %2329, align 8, !tbaa !10
  %2331 = getelementptr i8, ptr %gep5939, i64 24
  %2332 = load double, ptr %2331, align 8, !tbaa !10
  %2333 = fsub contract double %2330, %2332
  %2334 = fmul contract double %2290, %2333
  %2335 = fsub contract double %2328, %2334
  store double %2335, ptr %2327, align 8, !tbaa !20
  %2336 = getelementptr double, ptr %gep5941, i64 %250
  %2337 = load double, ptr %2336, align 8, !tbaa !20
  %2338 = getelementptr i8, ptr %gep5937, i64 32
  %2339 = load double, ptr %2338, align 8, !tbaa !10
  %2340 = getelementptr i8, ptr %gep5939, i64 32
  %2341 = load double, ptr %2340, align 8, !tbaa !10
  %2342 = fsub contract double %2339, %2341
  %2343 = fmul contract double %2290, %2342
  %2344 = fsub contract double %2337, %2343
  store double %2344, ptr %2336, align 8, !tbaa !20
  %2345 = add nsw i64 %2291, -1
  %2346 = icmp ugt i64 %2291, 1
  br i1 %2346, label %omp.wsloop.region123.preheader, label %omp.wsloop.region126

omp.wsloop.region126:                             ; preds = %omp.wsloop.region123.preheader, %omp.wsloop.region120
  %2347 = load i32, ptr @_QMlu_dataEny, align 4, !tbaa !13
  %2348 = sext i32 %2347 to i64
  %reass.sub6013 = sub nsw i64 %2348, %2278
  %2349 = icmp sgt i64 %reass.sub6013, -1
  br i1 %2349, label %omp.wsloop.region128.lr.ph, label %omp.wsloop.region129

omp.wsloop.region128.lr.ph:                       ; preds = %omp.wsloop.region126
  %2350 = add nuw nsw i64 %reass.sub6013, 1
  %2351 = sext i32 %2168 to i64
  %2352 = sext i32 %2167 to i64
  %2353 = sub nsw i64 %2351, %.unpack4934.unpack.unpack
  %2354 = sub nsw i64 %2352, %.unpack4934.unpack4936.unpack
  %2355 = mul nsw i64 %242, %2354
  %2356 = getelementptr double, ptr %.unpack4927, i64 %2355
  %invariant.gep5942 = getelementptr double, ptr %2356, i64 %2353
  %2357 = sub nsw i64 %2351, %.unpack4884.unpack4885.unpack
  %2358 = mul nsw i64 %2357, %.unpack4884.unpack.unpack4889
  %reass.sub4849 = sub i64 %2358, %.unpack4884.unpack.unpack
  %2359 = add i64 %reass.sub4849, 2
  %2360 = sub nsw i64 %2352, %.unpack4884.unpack4887.unpack
  %2361 = mul nsw i64 %241, %2360
  %2362 = getelementptr double, ptr %.unpack4877, i64 %2361
  %2363 = add i64 %reass.sub4849, 3
  %2364 = add i64 %reass.sub4849, 4
  %2365 = add i64 %reass.sub4849, 5
  br label %omp.wsloop.region128

omp.wsloop.region129.loopexit:                    ; preds = %omp.wsloop.region128
  %.pre6124 = load i32, ptr @_QMlu_dataEjst, align 4, !tbaa !28
  %.pre6125 = load i32, ptr @_QMlu_dataEjend, align 4, !tbaa !30
  %.pre6129 = sext i32 %.pre6124 to i64
  %.pre6131 = sext i32 %.pre6125 to i64
  %.pre6133 = sub nsw i64 %.pre6131, %.pre6129
  br label %omp.wsloop.region129

omp.wsloop.region129:                             ; preds = %omp.wsloop.region129.loopexit, %omp.wsloop.region126
  %reass.sub6014.pre-phi = phi i64 [ %.pre6133, %omp.wsloop.region129.loopexit ], [ %reass.sub6012, %omp.wsloop.region126 ]
  %2366 = phi i32 [ %.pre6124, %omp.wsloop.region129.loopexit ], [ %2277, %omp.wsloop.region126 ]
  %2367 = icmp sgt i64 %reass.sub6014.pre-phi, -1
  br i1 %2367, label %omp.wsloop.region131.lr.ph, label %omp.wsloop.region132

omp.wsloop.region131.lr.ph:                       ; preds = %omp.wsloop.region129
  %2368 = add nuw nsw i64 %reass.sub6014.pre-phi, 1
  %2369 = sext i32 %2168 to i64
  %2370 = sext i32 %2167 to i64
  %2371 = sub nsw i64 %2369, %.unpack4860.unpack4861.unpack
  %2372 = mul nsw i64 %2371, %.unpack4860.unpack.unpack4865
  %reass.sub4579 = sub i64 %2372, %.unpack4860.unpack.unpack
  %2373 = sub nsw i64 %2370, %.unpack4860.unpack4863.unpack
  %2374 = mul nsw i64 %245, %2373
  %2375 = getelementptr double, ptr %.unpack4853, i64 %2374
  %invariant.gep5946 = getelementptr double, ptr %2375, i64 %reass.sub4579
  %2376 = load double, ptr @_QMlu_dataEdy1, align 8, !tbaa !88
  %2377 = load double, ptr @_QMlu_dataEty1, align 8, !tbaa !90
  %2378 = fmul contract double %2376, %2377
  %2379 = sub nsw i64 %2369, %.unpack4884.unpack4885.unpack
  %2380 = mul nsw i64 %2379, %.unpack4884.unpack.unpack4889
  %reass.sub4604 = sub i64 %2380, %.unpack4884.unpack.unpack
  %2381 = add i64 %reass.sub4604, 1
  %2382 = sub nsw i64 %2370, %.unpack4884.unpack4887.unpack
  %2383 = mul nsw i64 %241, %2382
  %2384 = getelementptr double, ptr %.unpack4877, i64 %2383
  %2385 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !92
  %2386 = fmul contract double %2385, 1.000000e-01
  %2387 = load double, ptr @_QMlu_dataEdy2, align 8, !tbaa !94
  %2388 = fmul contract double %2377, %2387
  %2389 = add i64 %reass.sub4604, 2
  %2390 = load double, ptr @_QMlu_dataEdy3, align 8, !tbaa !96
  %2391 = fmul contract double %2377, %2390
  %2392 = add i64 %reass.sub4604, 3
  %2393 = load double, ptr @_QMlu_dataEdy4, align 8, !tbaa !98
  %2394 = fmul contract double %2377, %2393
  %2395 = add i64 %reass.sub4604, 4
  %2396 = load double, ptr @_QMlu_dataEdy5, align 8, !tbaa !100
  %2397 = fmul contract double %2377, %2396
  %2398 = add i64 %reass.sub4604, 5
  br label %omp.wsloop.region131

omp.wsloop.region132:                             ; preds = %omp.wsloop.region131, %omp.wsloop.region129
  %omp_collapsed.next142 = add i32 %omp_collapsed.iv1405949, 1
  %exitcond6064.not = icmp eq i32 %omp_collapsed.iv1405949, %reass.sub6011
  br i1 %exitcond6064.not, label %omp_collapsed.exit138, label %omp_collapsed.body136

omp.wsloop.region131:                             ; preds = %omp.wsloop.region131.lr.ph, %omp.wsloop.region131
  %2399 = phi i64 [ %2368, %omp.wsloop.region131.lr.ph ], [ %2514, %omp.wsloop.region131 ]
  %2400 = phi i32 [ %2366, %omp.wsloop.region131.lr.ph ], [ %2420, %omp.wsloop.region131 ]
  %2401 = sext i32 %2400 to i64
  %2402 = sub nsw i64 %2401, %.unpack4860.unpack4862.unpack
  %2403 = mul nsw i64 %2402, %244
  %gep5947 = getelementptr double, ptr %invariant.gep5946, i64 %2403
  %2404 = getelementptr i8, ptr %gep5947, i64 8
  %2405 = load double, ptr %2404, align 8, !tbaa !20
  %2406 = add i32 %2400, -1
  %2407 = sext i32 %2406 to i64
  %2408 = sub nsw i64 %2407, %.unpack4884.unpack4886.unpack
  %2409 = mul nsw i64 %2408, %240
  %2410 = getelementptr double, ptr %2384, i64 %2409
  %2411 = getelementptr double, ptr %2410, i64 %2381
  %2412 = load double, ptr %2411, align 8, !tbaa !22
  %2413 = sub nsw i64 %2401, %.unpack4884.unpack4886.unpack
  %2414 = mul nsw i64 %2413, %240
  %2415 = getelementptr double, ptr %2384, i64 %2414
  %2416 = getelementptr double, ptr %2415, i64 %2381
  %2417 = load double, ptr %2416, align 8, !tbaa !22
  %2418 = fmul contract double %2417, 2.000000e+00
  %2419 = fsub contract double %2412, %2418
  %2420 = add i32 %2400, 1
  %2421 = sext i32 %2420 to i64
  %2422 = sub nsw i64 %2421, %.unpack4884.unpack4886.unpack
  %2423 = mul nsw i64 %2422, %240
  %2424 = getelementptr double, ptr %2384, i64 %2423
  %2425 = getelementptr double, ptr %2424, i64 %2381
  %2426 = load double, ptr %2425, align 8, !tbaa !22
  %2427 = fadd contract double %2426, %2419
  %2428 = fmul contract double %2378, %2427
  %2429 = fadd contract double %2405, %2428
  store double %2429, ptr %2404, align 8, !tbaa !20
  %2430 = getelementptr i8, ptr %gep5947, i64 16
  %2431 = load double, ptr %2430, align 8, !tbaa !20
  %2432 = mul nsw i64 %2421, 5
  %2433 = getelementptr double, ptr %6, i64 %2432
  %2434 = getelementptr i8, ptr %2433, i64 -32
  %2435 = load double, ptr %2434, align 8, !tbaa !10
  %2436 = mul nsw i64 %2401, 5
  %2437 = getelementptr double, ptr %6, i64 %2436
  %2438 = getelementptr i8, ptr %2437, i64 -32
  %2439 = load double, ptr %2438, align 8, !tbaa !10
  %2440 = fsub contract double %2435, %2439
  %2441 = fmul contract double %2386, %2440
  %2442 = fadd contract double %2431, %2441
  %2443 = getelementptr double, ptr %2410, i64 %2389
  %2444 = load double, ptr %2443, align 8, !tbaa !22
  %2445 = getelementptr double, ptr %2415, i64 %2389
  %2446 = load double, ptr %2445, align 8, !tbaa !22
  %2447 = fmul contract double %2446, 2.000000e+00
  %2448 = fsub contract double %2444, %2447
  %2449 = getelementptr double, ptr %2424, i64 %2389
  %2450 = load double, ptr %2449, align 8, !tbaa !22
  %2451 = fadd contract double %2450, %2448
  %2452 = fmul contract double %2388, %2451
  %2453 = fadd contract double %2442, %2452
  store double %2453, ptr %2430, align 8, !tbaa !20
  %2454 = getelementptr i8, ptr %gep5947, i64 24
  %2455 = load double, ptr %2454, align 8, !tbaa !20
  %2456 = getelementptr i8, ptr %2433, i64 -24
  %2457 = load double, ptr %2456, align 8, !tbaa !10
  %2458 = getelementptr i8, ptr %2437, i64 -24
  %2459 = load double, ptr %2458, align 8, !tbaa !10
  %2460 = fsub contract double %2457, %2459
  %2461 = fmul contract double %2386, %2460
  %2462 = fadd contract double %2455, %2461
  %2463 = getelementptr double, ptr %2410, i64 %2392
  %2464 = load double, ptr %2463, align 8, !tbaa !22
  %2465 = getelementptr double, ptr %2415, i64 %2392
  %2466 = load double, ptr %2465, align 8, !tbaa !22
  %2467 = fmul contract double %2466, 2.000000e+00
  %2468 = fsub contract double %2464, %2467
  %2469 = getelementptr double, ptr %2424, i64 %2392
  %2470 = load double, ptr %2469, align 8, !tbaa !22
  %2471 = fadd contract double %2470, %2468
  %2472 = fmul contract double %2391, %2471
  %2473 = fadd contract double %2462, %2472
  store double %2473, ptr %2454, align 8, !tbaa !20
  %2474 = getelementptr i8, ptr %gep5947, i64 32
  %2475 = load double, ptr %2474, align 8, !tbaa !20
  %2476 = getelementptr i8, ptr %2433, i64 -16
  %2477 = load double, ptr %2476, align 8, !tbaa !10
  %2478 = getelementptr i8, ptr %2437, i64 -16
  %2479 = load double, ptr %2478, align 8, !tbaa !10
  %2480 = fsub contract double %2477, %2479
  %2481 = fmul contract double %2386, %2480
  %2482 = fadd contract double %2475, %2481
  %2483 = getelementptr double, ptr %2410, i64 %2395
  %2484 = load double, ptr %2483, align 8, !tbaa !22
  %2485 = getelementptr double, ptr %2415, i64 %2395
  %2486 = load double, ptr %2485, align 8, !tbaa !22
  %2487 = fmul contract double %2486, 2.000000e+00
  %2488 = fsub contract double %2484, %2487
  %2489 = getelementptr double, ptr %2424, i64 %2395
  %2490 = load double, ptr %2489, align 8, !tbaa !22
  %2491 = fadd contract double %2490, %2488
  %2492 = fmul contract double %2394, %2491
  %2493 = fadd contract double %2482, %2492
  store double %2493, ptr %2474, align 8, !tbaa !20
  %2494 = getelementptr i8, ptr %gep5947, i64 40
  %2495 = load double, ptr %2494, align 8, !tbaa !20
  %2496 = getelementptr i8, ptr %2433, i64 -8
  %2497 = load double, ptr %2496, align 8, !tbaa !10
  %2498 = getelementptr i8, ptr %2437, i64 -8
  %2499 = load double, ptr %2498, align 8, !tbaa !10
  %2500 = fsub contract double %2497, %2499
  %2501 = fmul contract double %2386, %2500
  %2502 = fadd contract double %2495, %2501
  %2503 = getelementptr double, ptr %2410, i64 %2398
  %2504 = load double, ptr %2503, align 8, !tbaa !22
  %2505 = getelementptr double, ptr %2415, i64 %2398
  %2506 = load double, ptr %2505, align 8, !tbaa !22
  %2507 = fmul contract double %2506, 2.000000e+00
  %2508 = fsub contract double %2504, %2507
  %2509 = getelementptr double, ptr %2424, i64 %2398
  %2510 = load double, ptr %2509, align 8, !tbaa !22
  %2511 = fadd contract double %2510, %2508
  %2512 = fmul contract double %2397, %2511
  %2513 = fadd contract double %2502, %2512
  store double %2513, ptr %2494, align 8, !tbaa !20
  %2514 = add nsw i64 %2399, -1
  %2515 = icmp ugt i64 %2399, 1
  br i1 %2515, label %omp.wsloop.region131, label %omp.wsloop.region132

omp.wsloop.region128:                             ; preds = %omp.wsloop.region128.lr.ph, %omp.wsloop.region128
  %2516 = phi i64 [ %2350, %omp.wsloop.region128.lr.ph ], [ %2596, %omp.wsloop.region128 ]
  %2517 = phi i32 [ %2277, %omp.wsloop.region128.lr.ph ], [ %2595, %omp.wsloop.region128 ]
  %2518 = sext i32 %2517 to i64
  %2519 = sub nsw i64 %2518, %.unpack4934.unpack4935.unpack
  %2520 = mul nsw i64 %2519, %.unpack4934.unpack.unpack4938
  %gep5943 = getelementptr double, ptr %invariant.gep5942, i64 %2520
  %2521 = load double, ptr %gep5943, align 8, !tbaa !24
  %2522 = sub nsw i64 %2518, %.unpack4884.unpack4886.unpack
  %2523 = mul nsw i64 %2522, %240
  %2524 = getelementptr double, ptr %2362, i64 %2523
  %2525 = getelementptr double, ptr %2524, i64 %2359
  %2526 = load double, ptr %2525, align 8, !tbaa !22
  %2527 = fmul contract double %2521, %2526
  %2528 = getelementptr double, ptr %2524, i64 %2363
  %2529 = load double, ptr %2528, align 8, !tbaa !22
  %2530 = fmul contract double %2521, %2529
  %2531 = getelementptr double, ptr %2524, i64 %2364
  %2532 = load double, ptr %2531, align 8, !tbaa !22
  %2533 = fmul contract double %2521, %2532
  %2534 = getelementptr double, ptr %2524, i64 %2365
  %2535 = load double, ptr %2534, align 8, !tbaa !22
  %2536 = fmul contract double %2521, %2535
  %2537 = add i32 %2517, -1
  %2538 = sext i32 %2537 to i64
  %2539 = sub nsw i64 %2538, %.unpack4934.unpack4935.unpack
  %2540 = mul nsw i64 %2539, %.unpack4934.unpack.unpack4938
  %gep5945 = getelementptr double, ptr %invariant.gep5942, i64 %2540
  %2541 = load double, ptr %gep5945, align 8, !tbaa !24
  %2542 = sub nsw i64 %2538, %.unpack4884.unpack4886.unpack
  %2543 = mul nsw i64 %2542, %240
  %2544 = getelementptr double, ptr %2362, i64 %2543
  %2545 = getelementptr double, ptr %2544, i64 %2359
  %2546 = load double, ptr %2545, align 8, !tbaa !22
  %2547 = fmul contract double %2541, %2546
  %2548 = getelementptr double, ptr %2544, i64 %2363
  %2549 = load double, ptr %2548, align 8, !tbaa !22
  %2550 = fmul contract double %2541, %2549
  %2551 = getelementptr double, ptr %2544, i64 %2364
  %2552 = load double, ptr %2551, align 8, !tbaa !22
  %2553 = fmul contract double %2541, %2552
  %2554 = getelementptr double, ptr %2544, i64 %2365
  %2555 = load double, ptr %2554, align 8, !tbaa !22
  %2556 = fmul contract double %2541, %2555
  %2557 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !92
  %2558 = fsub contract double %2527, %2547
  %2559 = fmul contract double %2558, %2557
  %2560 = mul nsw i64 %2518, 5
  %2561 = getelementptr double, ptr %6, i64 %2560
  %2562 = getelementptr i8, ptr %2561, i64 -32
  store double %2559, ptr %2562, align 8, !tbaa !10
  %2563 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !92
  %2564 = fmul contract double %2563, 0x3FF5555555555555
  %2565 = fsub contract double %2530, %2550
  %2566 = fmul contract double %2565, %2564
  %2567 = getelementptr i8, ptr %2561, i64 -24
  store double %2566, ptr %2567, align 8, !tbaa !10
  %2568 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !92
  %2569 = fsub contract double %2533, %2553
  %2570 = fmul contract double %2569, %2568
  %2571 = getelementptr i8, ptr %2561, i64 -16
  store double %2570, ptr %2571, align 8, !tbaa !10
  %2572 = load double, ptr @_QMlu_dataEty3, align 8, !tbaa !92
  %2573 = fmul contract double %2572, 0x3FDEB851EB851EB6
  %2574 = fmul double %2527, %2527
  %2575 = fmul double %2530, %2530
  %2576 = fadd contract double %2574, %2575
  %2577 = fmul double %2533, %2533
  %2578 = fadd contract double %2576, %2577
  %2579 = fmul double %2547, %2547
  %2580 = fmul double %2550, %2550
  %2581 = fadd contract double %2579, %2580
  %2582 = fmul double %2553, %2553
  %2583 = fadd contract double %2581, %2582
  %2584 = fsub contract double %2578, %2583
  %2585 = fmul contract double %2584, %2573
  %2586 = fmul contract double %2572, 0x3FC5555555555555
  %2587 = fsub contract double %2575, %2580
  %2588 = fmul contract double %2587, %2586
  %2589 = fsub contract double %2588, %2585
  %2590 = fmul contract double %2572, 0x3FFF5C28F5C28F5B
  %2591 = fsub contract double %2536, %2556
  %2592 = fmul contract double %2591, %2590
  %2593 = fadd contract double %2592, %2589
  %2594 = getelementptr i8, ptr %2561, i64 -8
  store double %2593, ptr %2594, align 8, !tbaa !10
  %2595 = add i32 %2517, 1
  %2596 = add nsw i64 %2516, -1
  %2597 = icmp ugt i64 %2516, 1
  br i1 %2597, label %omp.wsloop.region128, label %omp.wsloop.region129.loopexit

omp.wsloop.region119:                             ; preds = %omp.wsloop.region119.preheader, %omp.wsloop.region119
  %indvars.iv6056 = phi i64 [ %indvars.iv.next6057, %omp.wsloop.region119 ], [ %indvars.iv6056.ph, %omp.wsloop.region119.preheader ]
  %2598 = sub nsw i64 %indvars.iv6056, %.unpack4884.unpack4886.unpack
  %2599 = mul nsw i64 %2598, %240
  %gep5931 = getelementptr double, ptr %invariant.gep5930, i64 %2599
  %2600 = getelementptr i8, ptr %gep5931, i64 24
  %2601 = load double, ptr %2600, align 8, !tbaa !22
  %2602 = mul nuw nsw i64 %indvars.iv6056, 5
  %2603 = getelementptr double, ptr %6, i64 %2602
  %2604 = getelementptr i8, ptr %2603, i64 -40
  store double %2601, ptr %2604, align 8, !tbaa !10
  %2605 = sub nsw i64 %indvars.iv6056, %.unpack4934.unpack4935.unpack
  %2606 = mul nsw i64 %2605, %.unpack4934.unpack.unpack4938
  %gep5933 = getelementptr double, ptr %invariant.gep5932, i64 %2606
  %2607 = load double, ptr %gep5933, align 8, !tbaa !24
  %2608 = fmul contract double %2601, %2607
  %2609 = sub nsw i64 %indvars.iv6056, %.unpack4954.unpack4955.unpack
  %2610 = mul nsw i64 %2609, %.unpack4954.unpack.unpack4958
  %gep5935 = getelementptr double, ptr %invariant.gep5934, i64 %2610
  %2611 = load double, ptr %gep5935, align 8, !tbaa !26
  %2612 = getelementptr i8, ptr %gep5931, i64 16
  %2613 = load double, ptr %2612, align 8, !tbaa !22
  %2614 = fmul contract double %2608, %2613
  %2615 = getelementptr i8, ptr %2603, i64 -32
  store double %2614, ptr %2615, align 8, !tbaa !10
  %2616 = load double, ptr %2600, align 8, !tbaa !22
  %2617 = fmul contract double %2608, %2616
  %2618 = getelementptr i8, ptr %gep5931, i64 40
  %2619 = load double, ptr %2618, align 8, !tbaa !22
  %2620 = fsub contract double %2619, %2611
  %2621 = fmul contract double %2620, 4.000000e-01
  %2622 = fadd contract double %2617, %2621
  %2623 = getelementptr i8, ptr %2603, i64 -24
  store double %2622, ptr %2623, align 8, !tbaa !10
  %2624 = getelementptr i8, ptr %gep5931, i64 32
  %2625 = load double, ptr %2624, align 8, !tbaa !22
  %2626 = fmul contract double %2608, %2625
  %2627 = getelementptr i8, ptr %2603, i64 -16
  store double %2626, ptr %2627, align 8, !tbaa !10
  %2628 = load double, ptr %2618, align 8, !tbaa !22
  %2629 = fmul contract double %2628, 1.400000e+00
  %2630 = fmul contract double %2611, 4.000000e-01
  %2631 = fsub contract double %2629, %2630
  %2632 = fmul contract double %2608, %2631
  %2633 = getelementptr i8, ptr %2603, i64 -8
  store double %2632, ptr %2633, align 8, !tbaa !10
  %indvars.iv.next6057 = add nuw nsw i64 %indvars.iv6056, 1
  %exitcond6059.not = icmp eq i64 %indvars.iv.next6057, %2186
  br i1 %exitcond6059.not, label %omp.wsloop.region120, label %omp.wsloop.region119, !llvm.loop !102

omp.master.region96:                              ; preds = %omp_collapsed.exit81
  %2634 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not3999 = icmp eq i32 %2634, 0
  br i1 %.not3999, label %omp.region.cont95, label %omp.master.region98

omp.master.region98:                              ; preds = %omp.master.region96
  store i32 2, ptr %4, align 4, !tbaa !10
  call void @timer_stop_(ptr nonnull %4) #2
  %.pr5904 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not4000 = icmp eq i32 %.pr5904, 0
  br i1 %.not4000, label %omp.region.cont95, label %omp.master.region99

omp.region.cont95:                                ; preds = %omp.master.region96, %omp.master.region98, %omp.master.region99
  call void @__kmpc_end_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  br label %omp_region.end93

omp.master.region99:                              ; preds = %omp.master.region98
  store i32 3, ptr %3, align 4, !tbaa !10
  call void @timer_start_(ptr nonnull %3) #2
  br label %omp.region.cont95

omp_collapsed.body79:                             ; preds = %omp_collapsed.body79.lr.ph, %omp.wsloop.region73.preheader
  %omp_collapsed.iv835929 = phi i32 [ 0, %omp_collapsed.body79.lr.ph ], [ %omp_collapsed.next85, %omp.wsloop.region73.preheader ]
  %2635 = add i32 %omp_collapsed.iv835929, %134
  %2636 = urem i32 %2635, %131
  %2637 = udiv i32 %2635, %131
  %2638 = add i32 %2637, 2
  %2639 = add i32 %2636, %125
  %2640 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !15
  %2641 = icmp sgt i32 %2640, 0
  br i1 %2641, label %omp.wsloop.region50.lr.ph, label %omp.wsloop.region51

omp.wsloop.region50.lr.ph:                        ; preds = %omp_collapsed.body79
  %2642 = sext i32 %2639 to i64
  %2643 = sext i32 %2638 to i64
  %2644 = sub nsw i64 %2642, %.unpack5604.unpack5606.unpack
  %2645 = mul nsw i64 %2644, %136
  %2646 = sub nsw i64 %2643, %.unpack5604.unpack5607.unpack
  %2647 = mul nsw i64 %137, %2646
  %2648 = getelementptr double, ptr %.unpack5597, i64 %2647
  %2649 = getelementptr double, ptr %2648, i64 %2645
  %2650 = sub nsw i64 %2642, %.unpack5654.unpack5655.unpack
  %2651 = mul nsw i64 %2650, %.unpack5654.unpack.unpack5658
  %2652 = sub i64 %2643, %.unpack5654.unpack5656.unpack
  %2653 = mul nsw i64 %138, %2652
  %2654 = getelementptr double, ptr %.unpack5647, i64 %2653
  %2655 = getelementptr double, ptr %2654, i64 %2651
  %2656 = sub nsw i64 %2642, %.unpack5674.unpack5675.unpack
  %2657 = mul nsw i64 %2656, %.unpack5674.unpack.unpack5678
  %2658 = sub i64 %2643, %.unpack5674.unpack5676.unpack
  %2659 = mul nsw i64 %139, %2658
  %2660 = getelementptr double, ptr %.unpack5667, i64 %2659
  %2661 = getelementptr double, ptr %2660, i64 %2657
  %narrow = add nuw i32 %2640, 1
  %2662 = zext i32 %narrow to i64
  %2663 = add nsw i64 %2662, -1
  %min.iters.check6395 = icmp ult i32 %2640, 10
  br i1 %min.iters.check6395, label %omp.wsloop.region50.preheader, label %vector.memcheck6331

vector.memcheck6331:                              ; preds = %omp.wsloop.region50.lr.ph
  %2664 = mul nuw nsw i64 %2662, 40
  %scevgep6333 = getelementptr i8, ptr %scevgep6332, i64 %2664
  %2665 = mul i64 %203, %2646
  %2666 = sub i64 %2665, %215
  %2667 = shl nsw i64 %2642, 3
  %2668 = add i64 %2666, %2667
  %2669 = mul i64 %.unpack5604.unpack5605.unpack5612, %2668
  %reass.sub6622 = sub i64 %2669, %202
  %2670 = add i64 %reass.sub6622, -8
  %2671 = shl nuw nsw i64 %2662, 3
  %2672 = add i64 %2670, %2671
  %2673 = mul i64 %.unpack5604.unpack.unpack5609, %2672
  %scevgep6335 = getelementptr i8, ptr %scevgep6334, i64 %2673
  %reass.sub6623 = sub i64 %2669, %202
  %2674 = add i64 %reass.sub6623, 8
  %2675 = mul i64 %.unpack5604.unpack.unpack5609, %2674
  %scevgep6337 = getelementptr i8, ptr %scevgep6336, i64 %2675
  %2676 = icmp ult ptr %scevgep6335, %scevgep6337
  %umin6338 = select i1 %2676, ptr %scevgep6335, ptr %scevgep6337
  %2677 = icmp ugt ptr %scevgep6335, %scevgep6337
  %umax6339 = select i1 %2677, ptr %scevgep6335, ptr %scevgep6337
  %scevgep6340 = getelementptr i8, ptr %umax6339, i64 8
  %scevgep6342 = getelementptr i8, ptr %scevgep6341, i64 %2673
  %scevgep6344 = getelementptr i8, ptr %scevgep6343, i64 %2675
  %2678 = icmp ult ptr %scevgep6342, %scevgep6344
  %umin6345 = select i1 %2678, ptr %scevgep6342, ptr %scevgep6344
  %2679 = icmp ugt ptr %scevgep6342, %scevgep6344
  %umax6346 = select i1 %2679, ptr %scevgep6342, ptr %scevgep6344
  %scevgep6347 = getelementptr i8, ptr %umax6346, i64 8
  %scevgep6349 = getelementptr i8, ptr %scevgep6348, i64 %2673
  %scevgep6351 = getelementptr i8, ptr %scevgep6350, i64 %2675
  %2680 = icmp ult ptr %scevgep6349, %scevgep6351
  %umin6352 = select i1 %2680, ptr %scevgep6349, ptr %scevgep6351
  %2681 = icmp ugt ptr %scevgep6349, %scevgep6351
  %umax6353 = select i1 %2681, ptr %scevgep6349, ptr %scevgep6351
  %scevgep6354 = getelementptr i8, ptr %umax6353, i64 8
  %scevgep6356 = getelementptr i8, ptr %scevgep6355, i64 %2673
  %scevgep6358 = getelementptr i8, ptr %scevgep6357, i64 %2675
  %2682 = icmp ult ptr %scevgep6356, %scevgep6358
  %umin6359 = select i1 %2682, ptr %scevgep6356, ptr %scevgep6358
  %2683 = icmp ugt ptr %scevgep6356, %scevgep6358
  %umax6360 = select i1 %2683, ptr %scevgep6356, ptr %scevgep6358
  %scevgep6361 = getelementptr i8, ptr %umax6360, i64 8
  %2684 = mul i64 %209, %2652
  %2685 = sub i64 %2684, %216
  %2686 = add i64 %2685, %2667
  %2687 = mul i64 %.unpack5654.unpack.unpack5658, %2686
  %scevgep6363 = getelementptr i8, ptr %scevgep6362, i64 %2687
  %2688 = getelementptr i8, ptr %scevgep6364, i64 %2687
  %scevgep6365 = getelementptr i8, ptr %2688, i64 %2671
  %2689 = mul i64 %213, %2658
  %2690 = sub i64 %2689, %217
  %2691 = add i64 %2690, %2667
  %2692 = mul i64 %.unpack5674.unpack.unpack5678, %2691
  %scevgep6367 = getelementptr i8, ptr %scevgep6366, i64 %2692
  %2693 = getelementptr i8, ptr %scevgep6368, i64 %2692
  %scevgep6369 = getelementptr i8, ptr %2693, i64 %2671
  %bound06370 = icmp ult ptr %6, %scevgep6340
  %bound16371 = icmp ult ptr %umin6338, %scevgep6333
  %found.conflict6372 = and i1 %bound06370, %bound16371
  %bound06373 = icmp ult ptr %6, %scevgep6347
  %bound16374 = icmp ult ptr %umin6345, %scevgep6333
  %found.conflict6375 = and i1 %bound06373, %bound16374
  %conflict.rdx6376 = or i1 %found.conflict6372, %found.conflict6375
  %bound06377 = icmp ult ptr %6, %scevgep6354
  %bound16378 = icmp ult ptr %umin6352, %scevgep6333
  %found.conflict6379 = and i1 %bound06377, %bound16378
  %conflict.rdx6380 = or i1 %conflict.rdx6376, %found.conflict6379
  %bound06381 = icmp ult ptr %6, %scevgep6361
  %bound16382 = icmp ult ptr %umin6359, %scevgep6333
  %found.conflict6383 = and i1 %bound06381, %bound16382
  %conflict.rdx6384 = or i1 %conflict.rdx6380, %found.conflict6383
  %bound06385 = icmp ult ptr %6, %scevgep6365
  %bound16386 = icmp ult ptr %scevgep6363, %scevgep6333
  %found.conflict6387 = and i1 %bound06385, %bound16386
  %conflict.rdx6388 = or i1 %conflict.rdx6384, %found.conflict6387
  %bound06389 = icmp ult ptr %6, %scevgep6369
  %bound16390 = icmp ult ptr %scevgep6367, %scevgep6333
  %found.conflict6391 = and i1 %bound06389, %bound16390
  %conflict.rdx6392 = or i1 %conflict.rdx6388, %found.conflict6391
  br i1 %conflict.rdx6392, label %omp.wsloop.region50.preheader, label %vector.ph6396

vector.ph6396:                                    ; preds = %vector.memcheck6331
  %n.vec6398 = and i64 %2663, -2
  %ind.end6399 = or i64 %2663, 1
  br label %vector.body6402

vector.body6402:                                  ; preds = %vector.body6402, %vector.ph6396
  %index6403 = phi i64 [ 0, %vector.ph6396 ], [ %index.next6407, %vector.body6402 ]
  %offset.idx6404 = or disjoint i64 %index6403, 1
  %2694 = add i64 %index6403, 2
  %2695 = sub nsw i64 %offset.idx6404, %.unpack5604.unpack5605.unpack
  %2696 = sub nsw i64 %2694, %.unpack5604.unpack5605.unpack
  %2697 = mul nsw i64 %2695, %.unpack5604.unpack.unpack5609
  %2698 = mul nsw i64 %2696, %.unpack5604.unpack.unpack5609
  %2699 = sub i64 %2697, %.unpack5604.unpack.unpack
  %2700 = sub i64 %2698, %.unpack5604.unpack.unpack
  %2701 = getelementptr double, ptr %2649, i64 %2699
  %2702 = getelementptr double, ptr %2649, i64 %2700
  %2703 = getelementptr i8, ptr %2701, i64 16
  %2704 = getelementptr i8, ptr %2702, i64 16
  %2705 = load double, ptr %2703, align 8, !tbaa !22, !alias.scope !103
  %2706 = load double, ptr %2704, align 8, !tbaa !22, !alias.scope !103
  %2707 = insertelement <2 x double> poison, double %2705, i64 0
  %2708 = insertelement <2 x double> %2707, double %2706, i64 1
  %2709 = mul nuw nsw i64 %offset.idx6404, 5
  %2710 = sub nsw i64 %offset.idx6404, %.unpack5654.unpack.unpack
  %2711 = getelementptr double, ptr %2655, i64 %2710
  %wide.load6405 = load <2 x double>, ptr %2711, align 8, !tbaa !24, !alias.scope !106
  %2712 = fmul contract <2 x double> %2708, %wide.load6405
  %2713 = sub nsw i64 %offset.idx6404, %.unpack5674.unpack.unpack
  %2714 = getelementptr double, ptr %2661, i64 %2713
  %wide.load6406 = load <2 x double>, ptr %2714, align 8, !tbaa !26, !alias.scope !108
  %2715 = fmul contract <2 x double> %2708, %2712
  %2716 = getelementptr i8, ptr %2701, i64 40
  %2717 = getelementptr i8, ptr %2702, i64 40
  %2718 = load double, ptr %2716, align 8, !tbaa !22, !alias.scope !110
  %2719 = load double, ptr %2717, align 8, !tbaa !22, !alias.scope !110
  %2720 = insertelement <2 x double> poison, double %2718, i64 0
  %2721 = insertelement <2 x double> %2720, double %2719, i64 1
  %2722 = fsub contract <2 x double> %2721, %wide.load6406
  %2723 = fmul contract <2 x double> %2722, <double 4.000000e-01, double 4.000000e-01>
  %2724 = fadd contract <2 x double> %2715, %2723
  %2725 = getelementptr i8, ptr %2701, i64 24
  %2726 = getelementptr i8, ptr %2702, i64 24
  %2727 = load double, ptr %2725, align 8, !tbaa !22, !alias.scope !112
  %2728 = load double, ptr %2726, align 8, !tbaa !22, !alias.scope !112
  %2729 = insertelement <2 x double> poison, double %2727, i64 0
  %2730 = insertelement <2 x double> %2729, double %2728, i64 1
  %2731 = fmul contract <2 x double> %2712, %2730
  %2732 = getelementptr i8, ptr %2701, i64 32
  %2733 = getelementptr i8, ptr %2702, i64 32
  %2734 = load double, ptr %2732, align 8, !tbaa !22, !alias.scope !114
  %2735 = load double, ptr %2733, align 8, !tbaa !22, !alias.scope !114
  %2736 = insertelement <2 x double> poison, double %2734, i64 0
  %2737 = insertelement <2 x double> %2736, double %2735, i64 1
  %2738 = fmul contract <2 x double> %2712, %2737
  %2739 = load double, ptr %2716, align 8, !tbaa !22, !alias.scope !110
  %2740 = load double, ptr %2717, align 8, !tbaa !22, !alias.scope !110
  %2741 = insertelement <2 x double> poison, double %2739, i64 0
  %2742 = insertelement <2 x double> %2741, double %2740, i64 1
  %2743 = fmul contract <2 x double> %2742, <double 1.400000e+00, double 1.400000e+00>
  %2744 = fmul contract <2 x double> %wide.load6406, <double 4.000000e-01, double 4.000000e-01>
  %2745 = fsub contract <2 x double> %2743, %2744
  %2746 = fmul contract <2 x double> %2712, %2745
  %gep6638 = getelementptr double, ptr %invariant.gep6637, i64 %2709
  %2747 = shufflevector <2 x double> %2708, <2 x double> %2724, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2748 = shufflevector <2 x double> %2731, <2 x double> %2738, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2749 = shufflevector <4 x double> %2747, <4 x double> %2748, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2750 = shufflevector <2 x double> %2746, <2 x double> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %interleaved.vec = shufflevector <8 x double> %2749, <8 x double> %2750, <10 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 1, i32 3, i32 5, i32 7, i32 9>
  store <10 x double> %interleaved.vec, ptr %gep6638, align 8, !tbaa !10
  %index.next6407 = add nuw i64 %index6403, 2
  %2751 = icmp eq i64 %index.next6407, %n.vec6398
  br i1 %2751, label %middle.block6393, label %vector.body6402, !llvm.loop !116

middle.block6393:                                 ; preds = %vector.body6402
  %cmp.n6401 = icmp eq i64 %2663, %n.vec6398
  br i1 %cmp.n6401, label %omp.wsloop.region51, label %omp.wsloop.region50.preheader

omp.wsloop.region50.preheader:                    ; preds = %vector.memcheck6331, %omp.wsloop.region50.lr.ph, %middle.block6393
  %indvars.iv6031.ph = phi i64 [ 1, %vector.memcheck6331 ], [ 1, %omp.wsloop.region50.lr.ph ], [ %ind.end6399, %middle.block6393 ]
  br label %omp.wsloop.region50

omp.wsloop.region51:                              ; preds = %omp.wsloop.region50, %middle.block6393, %omp_collapsed.body79
  %2752 = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !34
  %2753 = sext i32 %2752 to i64
  %2754 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !36
  %2755 = sext i32 %2754 to i64
  %reass.sub6008 = sub nsw i64 %2755, %2753
  %2756 = icmp sgt i64 %reass.sub6008, -1
  br i1 %2756, label %omp.wsloop.region54.preheader.lr.ph, label %omp.wsloop.region57

omp.wsloop.region54.preheader.lr.ph:              ; preds = %omp.wsloop.region51
  %2757 = add nuw nsw i64 %reass.sub6008, 1
  %2758 = sext i32 %2639 to i64
  %2759 = sext i32 %2638 to i64
  %2760 = sub nsw i64 %2758, %.unpack5580.unpack5582.unpack
  %2761 = mul nsw i64 %2760, %140
  %2762 = sub nsw i64 %2759, %.unpack5580.unpack5583.unpack
  %2763 = mul nsw i64 %141, %2762
  %2764 = getelementptr double, ptr %.unpack5573, i64 %2763
  %2765 = getelementptr double, ptr %2764, i64 %2761
  %2766 = load double, ptr @_QMlu_dataEtx2, align 8, !tbaa !117
  br label %omp.wsloop.region54.preheader

omp.wsloop.region54.preheader:                    ; preds = %omp.wsloop.region54.preheader.lr.ph, %omp.wsloop.region54.preheader
  %2767 = phi i64 [ %2757, %omp.wsloop.region54.preheader.lr.ph ], [ %2822, %omp.wsloop.region54.preheader ]
  %2768 = phi i32 [ %2752, %omp.wsloop.region54.preheader.lr.ph ], [ %2773, %omp.wsloop.region54.preheader ]
  %2769 = sext i32 %2768 to i64
  %2770 = sub nsw i64 %2769, %.unpack5580.unpack5581.unpack
  %2771 = mul nsw i64 %2770, %.unpack5580.unpack.unpack5585
  %2772 = getelementptr double, ptr %2765, i64 %2771
  %2773 = add i32 %2768, 1
  %2774 = sext i32 %2773 to i64
  %2775 = mul nsw i64 %2774, 5
  %gep = getelementptr double, ptr %invariant.gep, i64 %2775
  %2776 = add i32 %2768, -1
  %2777 = sext i32 %2776 to i64
  %2778 = mul nsw i64 %2777, 5
  %gep5927 = getelementptr double, ptr %invariant.gep, i64 %2778
  %2779 = getelementptr double, ptr %2772, i64 %159
  %2780 = load double, ptr %2779, align 8, !tbaa !20
  %2781 = load double, ptr %gep, align 8, !tbaa !10
  %2782 = load double, ptr %gep5927, align 8, !tbaa !10
  %2783 = fsub contract double %2781, %2782
  %2784 = fmul contract double %2766, %2783
  %2785 = fsub contract double %2780, %2784
  store double %2785, ptr %2779, align 8, !tbaa !20
  %2786 = getelementptr double, ptr %2772, i64 %160
  %2787 = load double, ptr %2786, align 8, !tbaa !20
  %2788 = getelementptr i8, ptr %gep, i64 8
  %2789 = load double, ptr %2788, align 8, !tbaa !10
  %2790 = getelementptr i8, ptr %gep5927, i64 8
  %2791 = load double, ptr %2790, align 8, !tbaa !10
  %2792 = fsub contract double %2789, %2791
  %2793 = fmul contract double %2766, %2792
  %2794 = fsub contract double %2787, %2793
  store double %2794, ptr %2786, align 8, !tbaa !20
  %2795 = getelementptr double, ptr %2772, i64 %161
  %2796 = load double, ptr %2795, align 8, !tbaa !20
  %2797 = getelementptr i8, ptr %gep, i64 16
  %2798 = load double, ptr %2797, align 8, !tbaa !10
  %2799 = getelementptr i8, ptr %gep5927, i64 16
  %2800 = load double, ptr %2799, align 8, !tbaa !10
  %2801 = fsub contract double %2798, %2800
  %2802 = fmul contract double %2766, %2801
  %2803 = fsub contract double %2796, %2802
  store double %2803, ptr %2795, align 8, !tbaa !20
  %2804 = getelementptr double, ptr %2772, i64 %162
  %2805 = load double, ptr %2804, align 8, !tbaa !20
  %2806 = getelementptr i8, ptr %gep, i64 24
  %2807 = load double, ptr %2806, align 8, !tbaa !10
  %2808 = getelementptr i8, ptr %gep5927, i64 24
  %2809 = load double, ptr %2808, align 8, !tbaa !10
  %2810 = fsub contract double %2807, %2809
  %2811 = fmul contract double %2766, %2810
  %2812 = fsub contract double %2805, %2811
  store double %2812, ptr %2804, align 8, !tbaa !20
  %2813 = getelementptr double, ptr %2772, i64 %163
  %2814 = load double, ptr %2813, align 8, !tbaa !20
  %2815 = getelementptr i8, ptr %gep, i64 32
  %2816 = load double, ptr %2815, align 8, !tbaa !10
  %2817 = getelementptr i8, ptr %gep5927, i64 32
  %2818 = load double, ptr %2817, align 8, !tbaa !10
  %2819 = fsub contract double %2816, %2818
  %2820 = fmul contract double %2766, %2819
  %2821 = fsub contract double %2814, %2820
  store double %2821, ptr %2813, align 8, !tbaa !20
  %2822 = add nsw i64 %2767, -1
  %2823 = icmp ugt i64 %2767, 1
  br i1 %2823, label %omp.wsloop.region54.preheader, label %omp.wsloop.region57

omp.wsloop.region57:                              ; preds = %omp.wsloop.region54.preheader, %omp.wsloop.region51
  %2824 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !15
  %2825 = sext i32 %2824 to i64
  %reass.sub6009 = sub nsw i64 %2825, %2753
  %2826 = icmp sgt i64 %reass.sub6009, -1
  br i1 %2826, label %omp.wsloop.region59.lr.ph, label %omp.wsloop.region60

omp.wsloop.region59.lr.ph:                        ; preds = %omp.wsloop.region57
  %2827 = add nuw nsw i64 %reass.sub6009, 1
  %2828 = sext i32 %2639 to i64
  %2829 = sext i32 %2638 to i64
  %2830 = sub nsw i64 %2828, %.unpack5654.unpack5655.unpack
  %2831 = mul nsw i64 %2830, %.unpack5654.unpack.unpack5658
  %2832 = sub i64 %2829, %.unpack5654.unpack5656.unpack
  %2833 = mul nsw i64 %138, %2832
  %2834 = getelementptr double, ptr %.unpack5647, i64 %2833
  %2835 = getelementptr double, ptr %2834, i64 %2831
  %2836 = sub nsw i64 %2828, %.unpack5604.unpack5606.unpack
  %2837 = mul nsw i64 %2836, %136
  %2838 = sub i64 %2829, %.unpack5604.unpack5607.unpack
  %2839 = mul nsw i64 %137, %2838
  %2840 = getelementptr double, ptr %.unpack5597, i64 %2839
  %2841 = getelementptr double, ptr %2840, i64 %2837
  %2842 = add nsw i64 %2825, 1
  %2843 = sub nsw i64 %2842, %2753
  %min.iters.check = icmp ult i64 %2843, 12
  br i1 %min.iters.check, label %omp.wsloop.region59.preheader, label %vector.scevcheck

vector.scevcheck:                                 ; preds = %omp.wsloop.region59.lr.ph
  %2844 = sub nsw i64 %2825, %2753
  %2845 = trunc i64 %2844 to i32
  %2846 = add i32 %2752, %2845
  %2847 = icmp slt i32 %2846, %2752
  %2848 = add i32 %2752, -1
  %2849 = trunc i64 %2844 to i32
  %2850 = add i32 %2848, %2849
  %2851 = icmp slt i32 %2850, %2848
  %2852 = icmp ugt i64 %2844, 4294967295
  %2853 = or i1 %2851, %2852
  %2854 = mul nsw i64 %2753, 40
  %scevgep6197 = getelementptr i8, ptr %scevgep, i64 %2854
  %mul = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2844, i64 40)
  %mul.result = extractvalue { i64, i1 } %mul, 0
  %mul.overflow = extractvalue { i64, i1 } %mul, 1
  %2855 = getelementptr i8, ptr %scevgep6197, i64 %mul.result
  %2856 = icmp ult ptr %2855, %scevgep6197
  %2857 = or i1 %2856, %mul.overflow
  %scevgep6199 = getelementptr i8, ptr %scevgep6198, i64 %2854
  %mul6200 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2844, i64 40)
  %mul.result6201 = extractvalue { i64, i1 } %mul6200, 0
  %mul.overflow6202 = extractvalue { i64, i1 } %mul6200, 1
  %2858 = getelementptr i8, ptr %scevgep6199, i64 %mul.result6201
  %2859 = icmp ult ptr %2858, %scevgep6199
  %2860 = or i1 %2859, %mul.overflow6202
  %scevgep6204 = getelementptr i8, ptr %scevgep6203, i64 %2854
  %mul6205 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2844, i64 40)
  %mul.result6206 = extractvalue { i64, i1 } %mul6205, 0
  %mul.overflow6207 = extractvalue { i64, i1 } %mul6205, 1
  %2861 = getelementptr i8, ptr %scevgep6204, i64 %mul.result6206
  %2862 = icmp ult ptr %2861, %scevgep6204
  %2863 = or i1 %2862, %mul.overflow6207
  %scevgep6209 = getelementptr i8, ptr %scevgep6208, i64 %2854
  %mul6210 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %2844, i64 40)
  %mul.result6211 = extractvalue { i64, i1 } %mul6210, 0
  %mul.overflow6212 = extractvalue { i64, i1 } %mul6210, 1
  %2864 = getelementptr i8, ptr %scevgep6209, i64 %mul.result6211
  %2865 = icmp ult ptr %2864, %scevgep6209
  %2866 = or i1 %2865, %mul.overflow6212
  %2867 = or i1 %2847, %2853
  %2868 = or i1 %2867, %2857
  %2869 = or i1 %2868, %2860
  %2870 = or i1 %2869, %2863
  %2871 = or i1 %2870, %2866
  br i1 %2871, label %omp.wsloop.region59.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %vector.scevcheck
  %2872 = mul nsw i64 %2753, 40
  %scevgep6214 = getelementptr i8, ptr %scevgep6213, i64 %2872
  %2873 = mul nsw i64 %2825, 40
  %scevgep6217 = getelementptr i8, ptr %6, i64 %2873
  %2874 = mul i64 %192, %2832
  %2875 = sub i64 %2874, %218
  %2876 = shl nsw i64 %2828, 3
  %2877 = add i64 %2875, %2876
  %2878 = mul i64 %.unpack5654.unpack.unpack5658, %2877
  %2879 = add i32 %2752, -1
  %2880 = sext i32 %2879 to i64
  %2881 = shl nsw i64 %2880, 3
  %2882 = getelementptr i8, ptr %scevgep6218, i64 %2878
  %scevgep6219 = getelementptr i8, ptr %2882, i64 %2881
  %2883 = add nsw i64 %2825, %2880
  %2884 = shl nsw i64 %2883, 3
  %2885 = add i64 %2878, %2884
  %2886 = add i64 %219, %2753
  %2887 = shl i64 %2886, 3
  %2888 = sub i64 %2885, %2887
  %scevgep6221 = getelementptr i8, ptr %scevgep6220, i64 %2888
  %2889 = shl nsw i64 %2753, 3
  %2890 = getelementptr i8, ptr %scevgep6222, i64 %2878
  %scevgep6223 = getelementptr i8, ptr %2890, i64 %2889
  %2891 = shl nsw i64 %2825, 3
  %2892 = add i64 %2878, %2891
  %2893 = sub i64 %2892, %221
  %scevgep6225 = getelementptr i8, ptr %scevgep6224, i64 %2893
  %2894 = mul i64 %195, %2838
  %2895 = sub i64 %2894, %222
  %2896 = add i64 %2895, %2876
  %2897 = mul i64 %.unpack5604.unpack5605.unpack5612, %2896
  %2898 = add i64 %2897, 8
  %2899 = add i64 %2898, %2884
  %2900 = add i64 %223, %2753
  %2901 = shl i64 %2900, 3
  %2902 = sub i64 %2899, %2901
  %2903 = mul i64 %.unpack5604.unpack.unpack5609, %2902
  %scevgep6227 = getelementptr i8, ptr %scevgep6226, i64 %2903
  %2904 = add i64 %196, %2897
  %2905 = add i64 %2904, %2881
  %2906 = mul i64 %.unpack5604.unpack.unpack5609, %2905
  %scevgep6229 = getelementptr i8, ptr %scevgep6228, i64 %2906
  %2907 = icmp ult ptr %scevgep6227, %scevgep6229
  %umin6230 = select i1 %2907, ptr %scevgep6227, ptr %scevgep6229
  %2908 = icmp ugt ptr %scevgep6227, %scevgep6229
  %umax = select i1 %2908, ptr %scevgep6227, ptr %scevgep6229
  %scevgep6231 = getelementptr i8, ptr %umax, i64 8
  %scevgep6233 = getelementptr i8, ptr %scevgep6232, i64 %2903
  %scevgep6235 = getelementptr i8, ptr %scevgep6234, i64 %2906
  %2909 = icmp ult ptr %scevgep6233, %scevgep6235
  %umin6236 = select i1 %2909, ptr %scevgep6233, ptr %scevgep6235
  %2910 = icmp ugt ptr %scevgep6233, %scevgep6235
  %umax6237 = select i1 %2910, ptr %scevgep6233, ptr %scevgep6235
  %scevgep6238 = getelementptr i8, ptr %umax6237, i64 8
  %scevgep6240 = getelementptr i8, ptr %scevgep6239, i64 %2903
  %scevgep6242 = getelementptr i8, ptr %scevgep6241, i64 %2906
  %2911 = icmp ult ptr %scevgep6240, %scevgep6242
  %umin6243 = select i1 %2911, ptr %scevgep6240, ptr %scevgep6242
  %2912 = icmp ugt ptr %scevgep6240, %scevgep6242
  %umax6244 = select i1 %2912, ptr %scevgep6240, ptr %scevgep6242
  %scevgep6245 = getelementptr i8, ptr %umax6244, i64 8
  %scevgep6247 = getelementptr i8, ptr %scevgep6246, i64 %2903
  %scevgep6249 = getelementptr i8, ptr %scevgep6248, i64 %2906
  %2913 = icmp ult ptr %scevgep6247, %scevgep6249
  %umin6250 = select i1 %2913, ptr %scevgep6247, ptr %scevgep6249
  %2914 = icmp ugt ptr %scevgep6247, %scevgep6249
  %umax6251 = select i1 %2914, ptr %scevgep6247, ptr %scevgep6249
  %scevgep6252 = getelementptr i8, ptr %umax6251, i64 8
  %2915 = add i64 %2897, 8
  %2916 = add i64 %2915, %2891
  %2917 = sub i64 %2916, %225
  %2918 = mul i64 %.unpack5604.unpack.unpack5609, %2917
  %scevgep6254 = getelementptr i8, ptr %scevgep6253, i64 %2918
  %2919 = add i64 %196, %2897
  %2920 = add i64 %2919, %2889
  %2921 = mul i64 %.unpack5604.unpack.unpack5609, %2920
  %scevgep6256 = getelementptr i8, ptr %scevgep6255, i64 %2921
  %2922 = icmp ult ptr %scevgep6254, %scevgep6256
  %umin6257 = select i1 %2922, ptr %scevgep6254, ptr %scevgep6256
  %2923 = icmp ugt ptr %scevgep6254, %scevgep6256
  %umax6258 = select i1 %2923, ptr %scevgep6254, ptr %scevgep6256
  %scevgep6259 = getelementptr i8, ptr %umax6258, i64 8
  %scevgep6261 = getelementptr i8, ptr %scevgep6260, i64 %2918
  %scevgep6263 = getelementptr i8, ptr %scevgep6262, i64 %2921
  %2924 = icmp ult ptr %scevgep6261, %scevgep6263
  %umin6264 = select i1 %2924, ptr %scevgep6261, ptr %scevgep6263
  %2925 = icmp ugt ptr %scevgep6261, %scevgep6263
  %umax6265 = select i1 %2925, ptr %scevgep6261, ptr %scevgep6263
  %scevgep6266 = getelementptr i8, ptr %umax6265, i64 8
  %scevgep6268 = getelementptr i8, ptr %scevgep6267, i64 %2918
  %scevgep6270 = getelementptr i8, ptr %scevgep6269, i64 %2921
  %2926 = icmp ult ptr %scevgep6268, %scevgep6270
  %umin6271 = select i1 %2926, ptr %scevgep6268, ptr %scevgep6270
  %2927 = icmp ugt ptr %scevgep6268, %scevgep6270
  %umax6272 = select i1 %2927, ptr %scevgep6268, ptr %scevgep6270
  %scevgep6273 = getelementptr i8, ptr %umax6272, i64 8
  %scevgep6275 = getelementptr i8, ptr %scevgep6274, i64 %2918
  %scevgep6277 = getelementptr i8, ptr %scevgep6276, i64 %2921
  %2928 = icmp ult ptr %scevgep6275, %scevgep6277
  %umin6278 = select i1 %2928, ptr %scevgep6275, ptr %scevgep6277
  %2929 = icmp ugt ptr %scevgep6275, %scevgep6277
  %umax6279 = select i1 %2929, ptr %scevgep6275, ptr %scevgep6277
  %scevgep6280 = getelementptr i8, ptr %umax6279, i64 8
  %bound0 = icmp ugt ptr %scevgep6217, @_QMlu_dataEtx3
  %bound1 = icmp ult ptr %scevgep6214, getelementptr inbounds (double, ptr @_QMlu_dataEtx3, i64 1)
  %found.conflict = and i1 %bound0, %bound1
  %bound06281 = icmp ult ptr %scevgep6214, %scevgep6221
  %bound16282 = icmp ult ptr %scevgep6219, %scevgep6217
  %found.conflict6283 = and i1 %bound06281, %bound16282
  %conflict.rdx = or i1 %found.conflict, %found.conflict6283
  %bound06284 = icmp ult ptr %scevgep6214, %scevgep6225
  %bound16285 = icmp ult ptr %scevgep6223, %scevgep6217
  %found.conflict6286 = and i1 %bound06284, %bound16285
  %conflict.rdx6287 = or i1 %conflict.rdx, %found.conflict6286
  %bound06288 = icmp ult ptr %scevgep6214, %scevgep6231
  %bound16289 = icmp ult ptr %umin6230, %scevgep6217
  %found.conflict6290 = and i1 %bound06288, %bound16289
  %conflict.rdx6291 = or i1 %conflict.rdx6287, %found.conflict6290
  %bound06292 = icmp ult ptr %scevgep6214, %scevgep6238
  %bound16293 = icmp ult ptr %umin6236, %scevgep6217
  %found.conflict6294 = and i1 %bound06292, %bound16293
  %conflict.rdx6295 = or i1 %conflict.rdx6291, %found.conflict6294
  %bound06296 = icmp ult ptr %scevgep6214, %scevgep6245
  %bound16297 = icmp ult ptr %umin6243, %scevgep6217
  %found.conflict6298 = and i1 %bound06296, %bound16297
  %conflict.rdx6299 = or i1 %conflict.rdx6295, %found.conflict6298
  %bound06300 = icmp ult ptr %scevgep6214, %scevgep6252
  %bound16301 = icmp ult ptr %umin6250, %scevgep6217
  %found.conflict6302 = and i1 %bound06300, %bound16301
  %conflict.rdx6303 = or i1 %conflict.rdx6299, %found.conflict6302
  %bound06304 = icmp ult ptr %scevgep6214, %scevgep6259
  %bound16305 = icmp ult ptr %umin6257, %scevgep6217
  %found.conflict6306 = and i1 %bound06304, %bound16305
  %conflict.rdx6307 = or i1 %conflict.rdx6303, %found.conflict6306
  %bound06308 = icmp ult ptr %scevgep6214, %scevgep6266
  %bound16309 = icmp ult ptr %umin6264, %scevgep6217
  %found.conflict6310 = and i1 %bound06308, %bound16309
  %conflict.rdx6311 = or i1 %conflict.rdx6307, %found.conflict6310
  %bound06312 = icmp ult ptr %scevgep6214, %scevgep6273
  %bound16313 = icmp ult ptr %umin6271, %scevgep6217
  %found.conflict6314 = and i1 %bound06312, %bound16313
  %conflict.rdx6315 = or i1 %conflict.rdx6311, %found.conflict6314
  %bound06316 = icmp ult ptr %scevgep6214, %scevgep6280
  %bound16317 = icmp ult ptr %umin6278, %scevgep6217
  %found.conflict6318 = and i1 %bound06316, %bound16317
  %conflict.rdx6319 = or i1 %conflict.rdx6315, %found.conflict6318
  br i1 %conflict.rdx6319, label %omp.wsloop.region59.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %n.vec = and i64 %2843, -2
  %ind.end = sub nsw i64 %2827, %n.vec
  %.cast = trunc i64 %n.vec to i32
  %ind.end6321 = add i32 %2752, %.cast
  %2930 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119, !alias.scope !121, !noalias !124
  %broadcast.splatinsert = insertelement <2 x double> poison, double %2930, i64 0
  %2931 = fmul contract <2 x double> %broadcast.splatinsert, <double 0x3FF5555555555555, double poison>
  %2932 = shufflevector <2 x double> %2931, <2 x double> poison, <2 x i32> zeroinitializer
  %2933 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119, !alias.scope !121, !noalias !124
  %broadcast.splatinsert6325 = insertelement <2 x double> poison, double %2933, i64 0
  %broadcast.splat6326 = shufflevector <2 x double> %broadcast.splatinsert6325, <2 x double> poison, <2 x i32> zeroinitializer
  %2934 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119, !alias.scope !121, !noalias !124
  %broadcast.splatinsert6327 = insertelement <2 x double> poison, double %2934, i64 0
  %broadcast.splat6328 = shufflevector <2 x double> %broadcast.splatinsert6327, <2 x double> poison, <2 x i32> zeroinitializer
  %2935 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119, !alias.scope !121, !noalias !124
  %broadcast.splatinsert6329 = insertelement <2 x double> poison, double %2935, i64 0
  %broadcast.splat6330 = shufflevector <2 x double> %broadcast.splatinsert6329, <2 x double> poison, <2 x i32> zeroinitializer
  %2936 = fmul contract <2 x double> %broadcast.splat6330, <double 0x3FDEB851EB851EB6, double 0x3FDEB851EB851EB6>
  %2937 = fmul contract <2 x double> %broadcast.splat6330, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %2938 = fmul contract <2 x double> %broadcast.splat6330, <double 0x3FFF5C28F5C28F5B, double 0x3FFF5C28F5C28F5B>
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %.cast6323 = trunc i64 %index to i32
  %offset.idx = add i32 %2752, %.cast6323
  %2939 = add i32 %offset.idx, 1
  %2940 = sext i32 %offset.idx to i64
  %2941 = sext i32 %2939 to i64
  %2942 = sub nsw i64 %2940, %.unpack5654.unpack.unpack
  %2943 = getelementptr double, ptr %2835, i64 %2942
  %wide.load = load <2 x double>, ptr %2943, align 8, !tbaa !24, !alias.scope !126
  %2944 = sub nsw i64 %2940, %.unpack5604.unpack5605.unpack
  %2945 = sub nsw i64 %2941, %.unpack5604.unpack5605.unpack
  %2946 = mul nsw i64 %2944, %.unpack5604.unpack.unpack5609
  %2947 = mul nsw i64 %2945, %.unpack5604.unpack.unpack5609
  %2948 = getelementptr double, ptr %2841, i64 %2946
  %2949 = getelementptr double, ptr %2841, i64 %2947
  %2950 = getelementptr double, ptr %2948, i64 %142
  %2951 = getelementptr double, ptr %2949, i64 %142
  %2952 = load double, ptr %2950, align 8, !tbaa !22, !alias.scope !128
  %2953 = load double, ptr %2951, align 8, !tbaa !22, !alias.scope !128
  %2954 = insertelement <2 x double> poison, double %2952, i64 0
  %2955 = insertelement <2 x double> %2954, double %2953, i64 1
  %2956 = fmul contract <2 x double> %wide.load, %2955
  %2957 = getelementptr double, ptr %2948, i64 %143
  %2958 = getelementptr double, ptr %2949, i64 %143
  %2959 = load double, ptr %2957, align 8, !tbaa !22, !alias.scope !130
  %2960 = load double, ptr %2958, align 8, !tbaa !22, !alias.scope !130
  %2961 = insertelement <2 x double> poison, double %2959, i64 0
  %2962 = insertelement <2 x double> %2961, double %2960, i64 1
  %2963 = fmul contract <2 x double> %wide.load, %2962
  %2964 = getelementptr double, ptr %2948, i64 %144
  %2965 = getelementptr double, ptr %2949, i64 %144
  %2966 = load double, ptr %2964, align 8, !tbaa !22, !alias.scope !132
  %2967 = load double, ptr %2965, align 8, !tbaa !22, !alias.scope !132
  %2968 = insertelement <2 x double> poison, double %2966, i64 0
  %2969 = insertelement <2 x double> %2968, double %2967, i64 1
  %2970 = fmul contract <2 x double> %wide.load, %2969
  %2971 = getelementptr double, ptr %2948, i64 %145
  %2972 = getelementptr double, ptr %2949, i64 %145
  %2973 = load double, ptr %2971, align 8, !tbaa !22, !alias.scope !134
  %2974 = load double, ptr %2972, align 8, !tbaa !22, !alias.scope !134
  %2975 = insertelement <2 x double> poison, double %2973, i64 0
  %2976 = insertelement <2 x double> %2975, double %2974, i64 1
  %2977 = fmul contract <2 x double> %wide.load, %2976
  %2978 = add i32 %offset.idx, -1
  %2979 = sext i32 %2978 to i64
  %2980 = sext i32 %offset.idx to i64
  %2981 = sub nsw i64 %2979, %.unpack5654.unpack.unpack
  %2982 = getelementptr double, ptr %2835, i64 %2981
  %wide.load6324 = load <2 x double>, ptr %2982, align 8, !tbaa !24, !alias.scope !136
  %2983 = sub nsw i64 %2979, %.unpack5604.unpack5605.unpack
  %2984 = sub nsw i64 %2980, %.unpack5604.unpack5605.unpack
  %2985 = mul nsw i64 %2983, %.unpack5604.unpack.unpack5609
  %2986 = mul nsw i64 %2984, %.unpack5604.unpack.unpack5609
  %2987 = getelementptr double, ptr %2841, i64 %2985
  %2988 = getelementptr double, ptr %2841, i64 %2986
  %2989 = getelementptr double, ptr %2987, i64 %142
  %2990 = getelementptr double, ptr %2988, i64 %142
  %2991 = load double, ptr %2989, align 8, !tbaa !22, !alias.scope !138
  %2992 = load double, ptr %2990, align 8, !tbaa !22, !alias.scope !138
  %2993 = insertelement <2 x double> poison, double %2991, i64 0
  %2994 = insertelement <2 x double> %2993, double %2992, i64 1
  %2995 = fmul contract <2 x double> %wide.load6324, %2994
  %2996 = getelementptr double, ptr %2987, i64 %143
  %2997 = getelementptr double, ptr %2988, i64 %143
  %2998 = load double, ptr %2996, align 8, !tbaa !22, !alias.scope !140
  %2999 = load double, ptr %2997, align 8, !tbaa !22, !alias.scope !140
  %3000 = insertelement <2 x double> poison, double %2998, i64 0
  %3001 = insertelement <2 x double> %3000, double %2999, i64 1
  %3002 = fmul contract <2 x double> %wide.load6324, %3001
  %3003 = getelementptr double, ptr %2987, i64 %144
  %3004 = getelementptr double, ptr %2988, i64 %144
  %3005 = load double, ptr %3003, align 8, !tbaa !22, !alias.scope !142
  %3006 = load double, ptr %3004, align 8, !tbaa !22, !alias.scope !142
  %3007 = insertelement <2 x double> poison, double %3005, i64 0
  %3008 = insertelement <2 x double> %3007, double %3006, i64 1
  %3009 = fmul contract <2 x double> %wide.load6324, %3008
  %3010 = getelementptr double, ptr %2987, i64 %145
  %3011 = getelementptr double, ptr %2988, i64 %145
  %3012 = load double, ptr %3010, align 8, !tbaa !22, !alias.scope !144
  %3013 = load double, ptr %3011, align 8, !tbaa !22, !alias.scope !144
  %3014 = insertelement <2 x double> poison, double %3012, i64 0
  %3015 = insertelement <2 x double> %3014, double %3013, i64 1
  %3016 = fmul contract <2 x double> %wide.load6324, %3015
  %3017 = fsub contract <2 x double> %2956, %2995
  %3018 = fmul contract <2 x double> %3017, %2932
  %3019 = mul nsw i64 %2940, 5
  %3020 = mul nsw i64 %2941, 5
  %3021 = getelementptr double, ptr %6, i64 %3019
  %3022 = getelementptr double, ptr %6, i64 %3020
  %3023 = getelementptr i8, ptr %3021, i64 -32
  %3024 = getelementptr i8, ptr %3022, i64 -32
  %3025 = extractelement <2 x double> %3018, i64 0
  store double %3025, ptr %3023, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3026 = extractelement <2 x double> %3018, i64 1
  store double %3026, ptr %3024, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3027 = fsub contract <2 x double> %2963, %3002
  %3028 = fmul contract <2 x double> %3027, %broadcast.splat6326
  %3029 = getelementptr i8, ptr %3021, i64 -24
  %3030 = getelementptr i8, ptr %3022, i64 -24
  %3031 = extractelement <2 x double> %3028, i64 0
  store double %3031, ptr %3029, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3032 = extractelement <2 x double> %3028, i64 1
  store double %3032, ptr %3030, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3033 = fsub contract <2 x double> %2970, %3009
  %3034 = fmul contract <2 x double> %3033, %broadcast.splat6328
  %3035 = getelementptr i8, ptr %3021, i64 -16
  %3036 = getelementptr i8, ptr %3022, i64 -16
  %3037 = extractelement <2 x double> %3034, i64 0
  store double %3037, ptr %3035, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3038 = extractelement <2 x double> %3034, i64 1
  store double %3038, ptr %3036, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3039 = fmul <2 x double> %2956, %2956
  %3040 = fmul <2 x double> %2963, %2963
  %3041 = fadd contract <2 x double> %3039, %3040
  %3042 = fmul <2 x double> %2970, %2970
  %3043 = fadd contract <2 x double> %3041, %3042
  %3044 = fmul <2 x double> %2995, %2995
  %3045 = fmul <2 x double> %3002, %3002
  %3046 = fadd contract <2 x double> %3044, %3045
  %3047 = fmul <2 x double> %3009, %3009
  %3048 = fadd contract <2 x double> %3046, %3047
  %3049 = fsub contract <2 x double> %3043, %3048
  %3050 = fmul contract <2 x double> %3049, %2936
  %3051 = fsub contract <2 x double> %3039, %3044
  %3052 = fmul contract <2 x double> %3051, %2937
  %3053 = fsub contract <2 x double> %3052, %3050
  %3054 = fsub contract <2 x double> %2977, %3016
  %3055 = fmul contract <2 x double> %3054, %2938
  %3056 = fadd contract <2 x double> %3055, %3053
  %3057 = getelementptr i8, ptr %3021, i64 -8
  %3058 = getelementptr i8, ptr %3022, i64 -8
  %3059 = extractelement <2 x double> %3056, i64 0
  store double %3059, ptr %3057, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %3060 = extractelement <2 x double> %3056, i64 1
  store double %3060, ptr %3058, align 8, !tbaa !10, !alias.scope !124, !noalias !146
  %index.next = add nuw i64 %index, 2
  %3061 = icmp eq i64 %index.next, %n.vec
  br i1 %3061, label %middle.block, label %vector.body, !llvm.loop !147

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %2843, %n.vec
  br i1 %cmp.n, label %omp.wsloop.region60.loopexit, label %omp.wsloop.region59.preheader

omp.wsloop.region59.preheader:                    ; preds = %vector.memcheck, %vector.scevcheck, %omp.wsloop.region59.lr.ph, %middle.block
  %.ph6635 = phi i64 [ %2827, %vector.memcheck ], [ %2827, %vector.scevcheck ], [ %2827, %omp.wsloop.region59.lr.ph ], [ %ind.end, %middle.block ]
  %.ph6636 = phi i32 [ %2752, %vector.memcheck ], [ %2752, %vector.scevcheck ], [ %2752, %omp.wsloop.region59.lr.ph ], [ %ind.end6321, %middle.block ]
  br label %omp.wsloop.region59

omp.wsloop.region60.loopexit:                     ; preds = %omp.wsloop.region59, %middle.block
  %.pre = load i32, ptr @_QMlu_dataEist, align 4, !tbaa !34
  %.pre6123 = load i32, ptr @_QMlu_dataEiend, align 4, !tbaa !36
  %.pre6134 = sext i32 %.pre to i64
  %.pre6136 = sext i32 %.pre6123 to i64
  %.pre6138 = sub nsw i64 %.pre6136, %.pre6134
  br label %omp.wsloop.region60

omp.wsloop.region60:                              ; preds = %omp.wsloop.region60.loopexit, %omp.wsloop.region57
  %reass.sub6010.pre-phi = phi i64 [ %.pre6138, %omp.wsloop.region60.loopexit ], [ %reass.sub6008, %omp.wsloop.region57 ]
  %3062 = phi i32 [ %.pre, %omp.wsloop.region60.loopexit ], [ %2752, %omp.wsloop.region57 ]
  %3063 = icmp sgt i64 %reass.sub6010.pre-phi, -1
  br i1 %3063, label %omp.wsloop.region62.lr.ph, label %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge

omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge: ; preds = %omp.wsloop.region60
  %.pre6139 = sext i32 %2639 to i64
  %.pre6141 = sext i32 %2638 to i64
  %.pre6143 = sub nsw i64 %.pre6139, %.unpack5580.unpack5582.unpack
  %.pre6145 = mul nsw i64 %.pre6143, %140
  %.pre6147 = sub nsw i64 %.pre6141, %.unpack5580.unpack5583.unpack
  %.pre6149 = mul nsw i64 %141, %.pre6147
  %.pre6151 = sub nsw i64 %.pre6139, %.unpack5604.unpack5606.unpack
  %.pre6153 = mul nsw i64 %.pre6151, %136
  %.pre6155 = sub nsw i64 %.pre6141, %.unpack5604.unpack5607.unpack
  %.pre6157 = mul nsw i64 %137, %.pre6155
  br label %omp.wsloop.region64.preheader

omp.wsloop.region62.lr.ph:                        ; preds = %omp.wsloop.region60
  %3064 = add nuw nsw i64 %reass.sub6010.pre-phi, 1
  %3065 = sext i32 %2639 to i64
  %3066 = sext i32 %2638 to i64
  %3067 = sub nsw i64 %3065, %.unpack5580.unpack5582.unpack
  %3068 = mul nsw i64 %3067, %140
  %3069 = sub nsw i64 %3066, %.unpack5580.unpack5583.unpack
  %3070 = mul nsw i64 %141, %3069
  %3071 = getelementptr double, ptr %.unpack5573, i64 %3070
  %3072 = getelementptr double, ptr %3071, i64 %3068
  %3073 = load double, ptr @_QMlu_dataEdx1, align 8, !tbaa !148
  %3074 = load double, ptr @_QMlu_dataEtx1, align 8, !tbaa !150
  %3075 = fmul contract double %3073, %3074
  %3076 = sub nsw i64 %3065, %.unpack5604.unpack5606.unpack
  %3077 = mul nsw i64 %3076, %136
  %3078 = sub nsw i64 %3066, %.unpack5604.unpack5607.unpack
  %3079 = mul nsw i64 %137, %3078
  %3080 = getelementptr double, ptr %.unpack5597, i64 %3079
  %3081 = getelementptr double, ptr %3080, i64 %3077
  %3082 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119
  %3083 = fmul contract double %3082, 1.000000e-01
  %3084 = load double, ptr @_QMlu_dataEdx2, align 8, !tbaa !152
  %3085 = fmul contract double %3074, %3084
  %3086 = load double, ptr @_QMlu_dataEdx3, align 8, !tbaa !154
  %3087 = fmul contract double %3074, %3086
  %3088 = load double, ptr @_QMlu_dataEdx4, align 8, !tbaa !156
  %3089 = fmul contract double %3074, %3088
  %3090 = load double, ptr @_QMlu_dataEdx5, align 8, !tbaa !158
  %3091 = fmul contract double %3074, %3090
  br label %omp.wsloop.region62

omp.wsloop.region64.preheader:                    ; preds = %omp.wsloop.region62, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge
  %.pre-phi6158 = phi i64 [ %.pre6157, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3079, %omp.wsloop.region62 ]
  %.pre-phi6154 = phi i64 [ %.pre6153, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3077, %omp.wsloop.region62 ]
  %.pre-phi6150 = phi i64 [ %.pre6149, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3070, %omp.wsloop.region62 ]
  %.pre-phi6146 = phi i64 [ %.pre6145, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3068, %omp.wsloop.region62 ]
  %.pre-phi6142 = phi i64 [ %.pre6141, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3066, %omp.wsloop.region62 ]
  %.pre-phi6140 = phi i64 [ %.pre6139, %omp.wsloop.region60.omp.wsloop.region64.preheader_crit_edge ], [ %3065, %omp.wsloop.region62 ]
  %3092 = getelementptr double, ptr %.unpack5573, i64 %.pre-phi6150
  %3093 = getelementptr double, ptr %3092, i64 %.pre-phi6146
  %3094 = getelementptr double, ptr %3093, i64 %148
  %3095 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %3096 = getelementptr double, ptr %.unpack5597, i64 %.pre-phi6158
  %3097 = getelementptr double, ptr %3096, i64 %.pre-phi6154
  %3098 = getelementptr double, ptr %3097, i64 %150
  %3099 = getelementptr double, ptr %3097, i64 %152
  %3100 = getelementptr double, ptr %3097, i64 %154
  %3101 = getelementptr double, ptr %3093, i64 %156
  %3102 = getelementptr double, ptr %3097, i64 %158
  %3103 = getelementptr double, ptr %3094, i64 %164
  %3104 = load double, ptr %3103, align 8, !tbaa !20
  %3105 = getelementptr double, ptr %3098, i64 %146
  %3106 = load double, ptr %3105, align 8, !tbaa !22
  %3107 = fmul contract double %3106, 5.000000e+00
  %3108 = getelementptr double, ptr %3099, i64 %146
  %3109 = load double, ptr %3108, align 8, !tbaa !22
  %3110 = fmul contract double %3109, 4.000000e+00
  %3111 = fsub contract double %3107, %3110
  %3112 = getelementptr double, ptr %3100, i64 %146
  %3113 = load double, ptr %3112, align 8, !tbaa !22
  %3114 = fadd contract double %3113, %3111
  %3115 = fmul contract double %3095, %3114
  %3116 = fsub contract double %3104, %3115
  store double %3116, ptr %3103, align 8, !tbaa !20
  %3117 = getelementptr double, ptr %3101, i64 %164
  %3118 = load double, ptr %3117, align 8, !tbaa !20
  %3119 = fmul contract double %3106, 4.000000e+00
  %3120 = fmul contract double %3109, 6.000000e+00
  %3121 = fsub contract double %3120, %3119
  %3122 = fmul contract double %3113, 4.000000e+00
  %3123 = fsub contract double %3121, %3122
  %3124 = getelementptr double, ptr %3102, i64 %146
  %3125 = load double, ptr %3124, align 8, !tbaa !22
  %3126 = fadd contract double %3123, %3125
  %3127 = fmul contract double %3095, %3126
  %3128 = fsub contract double %3118, %3127
  store double %3128, ptr %3117, align 8, !tbaa !20
  %3129 = getelementptr double, ptr %3094, i64 %165
  %3130 = load double, ptr %3129, align 8, !tbaa !20
  %3131 = getelementptr double, ptr %3098, i64 %142
  %3132 = load double, ptr %3131, align 8, !tbaa !22
  %3133 = fmul contract double %3132, 5.000000e+00
  %3134 = getelementptr double, ptr %3099, i64 %142
  %3135 = load double, ptr %3134, align 8, !tbaa !22
  %3136 = fmul contract double %3135, 4.000000e+00
  %3137 = fsub contract double %3133, %3136
  %3138 = getelementptr double, ptr %3100, i64 %142
  %3139 = load double, ptr %3138, align 8, !tbaa !22
  %3140 = fadd contract double %3139, %3137
  %3141 = fmul contract double %3095, %3140
  %3142 = fsub contract double %3130, %3141
  store double %3142, ptr %3129, align 8, !tbaa !20
  %3143 = getelementptr double, ptr %3101, i64 %165
  %3144 = load double, ptr %3143, align 8, !tbaa !20
  %3145 = fmul contract double %3132, 4.000000e+00
  %3146 = fmul contract double %3135, 6.000000e+00
  %3147 = fsub contract double %3146, %3145
  %3148 = fmul contract double %3139, 4.000000e+00
  %3149 = fsub contract double %3147, %3148
  %3150 = getelementptr double, ptr %3102, i64 %142
  %3151 = load double, ptr %3150, align 8, !tbaa !22
  %3152 = fadd contract double %3149, %3151
  %3153 = fmul contract double %3095, %3152
  %3154 = fsub contract double %3144, %3153
  store double %3154, ptr %3143, align 8, !tbaa !20
  %3155 = getelementptr double, ptr %3094, i64 %166
  %3156 = load double, ptr %3155, align 8, !tbaa !20
  %3157 = getelementptr double, ptr %3098, i64 %143
  %3158 = load double, ptr %3157, align 8, !tbaa !22
  %3159 = fmul contract double %3158, 5.000000e+00
  %3160 = getelementptr double, ptr %3099, i64 %143
  %3161 = load double, ptr %3160, align 8, !tbaa !22
  %3162 = fmul contract double %3161, 4.000000e+00
  %3163 = fsub contract double %3159, %3162
  %3164 = getelementptr double, ptr %3100, i64 %143
  %3165 = load double, ptr %3164, align 8, !tbaa !22
  %3166 = fadd contract double %3165, %3163
  %3167 = fmul contract double %3095, %3166
  %3168 = fsub contract double %3156, %3167
  store double %3168, ptr %3155, align 8, !tbaa !20
  %3169 = getelementptr double, ptr %3101, i64 %166
  %3170 = load double, ptr %3169, align 8, !tbaa !20
  %3171 = fmul contract double %3158, 4.000000e+00
  %3172 = fmul contract double %3161, 6.000000e+00
  %3173 = fsub contract double %3172, %3171
  %3174 = fmul contract double %3165, 4.000000e+00
  %3175 = fsub contract double %3173, %3174
  %3176 = getelementptr double, ptr %3102, i64 %143
  %3177 = load double, ptr %3176, align 8, !tbaa !22
  %3178 = fadd contract double %3175, %3177
  %3179 = fmul contract double %3095, %3178
  %3180 = fsub contract double %3170, %3179
  store double %3180, ptr %3169, align 8, !tbaa !20
  %3181 = getelementptr double, ptr %3094, i64 %167
  %3182 = load double, ptr %3181, align 8, !tbaa !20
  %3183 = getelementptr double, ptr %3098, i64 %144
  %3184 = load double, ptr %3183, align 8, !tbaa !22
  %3185 = fmul contract double %3184, 5.000000e+00
  %3186 = getelementptr double, ptr %3099, i64 %144
  %3187 = load double, ptr %3186, align 8, !tbaa !22
  %3188 = fmul contract double %3187, 4.000000e+00
  %3189 = fsub contract double %3185, %3188
  %3190 = getelementptr double, ptr %3100, i64 %144
  %3191 = load double, ptr %3190, align 8, !tbaa !22
  %3192 = fadd contract double %3191, %3189
  %3193 = fmul contract double %3095, %3192
  %3194 = fsub contract double %3182, %3193
  store double %3194, ptr %3181, align 8, !tbaa !20
  %3195 = getelementptr double, ptr %3101, i64 %167
  %3196 = load double, ptr %3195, align 8, !tbaa !20
  %3197 = fmul contract double %3184, 4.000000e+00
  %3198 = fmul contract double %3187, 6.000000e+00
  %3199 = fsub contract double %3198, %3197
  %3200 = fmul contract double %3191, 4.000000e+00
  %3201 = fsub contract double %3199, %3200
  %3202 = getelementptr double, ptr %3102, i64 %144
  %3203 = load double, ptr %3202, align 8, !tbaa !22
  %3204 = fadd contract double %3201, %3203
  %3205 = fmul contract double %3095, %3204
  %3206 = fsub contract double %3196, %3205
  store double %3206, ptr %3195, align 8, !tbaa !20
  %3207 = getelementptr double, ptr %3094, i64 %168
  %3208 = load double, ptr %3207, align 8, !tbaa !20
  %3209 = getelementptr double, ptr %3098, i64 %145
  %3210 = load double, ptr %3209, align 8, !tbaa !22
  %3211 = fmul contract double %3210, 5.000000e+00
  %3212 = getelementptr double, ptr %3099, i64 %145
  %3213 = load double, ptr %3212, align 8, !tbaa !22
  %3214 = fmul contract double %3213, 4.000000e+00
  %3215 = fsub contract double %3211, %3214
  %3216 = getelementptr double, ptr %3100, i64 %145
  %3217 = load double, ptr %3216, align 8, !tbaa !22
  %3218 = fadd contract double %3217, %3215
  %3219 = fmul contract double %3095, %3218
  %3220 = fsub contract double %3208, %3219
  store double %3220, ptr %3207, align 8, !tbaa !20
  %3221 = getelementptr double, ptr %3101, i64 %168
  %3222 = load double, ptr %3221, align 8, !tbaa !20
  %3223 = fmul contract double %3210, 4.000000e+00
  %3224 = fmul contract double %3213, 6.000000e+00
  %3225 = fsub contract double %3224, %3223
  %3226 = fmul contract double %3217, 4.000000e+00
  %3227 = fsub contract double %3225, %3226
  %3228 = getelementptr double, ptr %3102, i64 %145
  %3229 = load double, ptr %3228, align 8, !tbaa !22
  %3230 = fadd contract double %3227, %3229
  %3231 = fmul contract double %3095, %3230
  %3232 = fsub contract double %3222, %3231
  store double %3232, ptr %3221, align 8, !tbaa !20
  %3233 = load i32, ptr @_QMlu_dataEnx, align 4, !tbaa !15
  %3234 = add i32 %3233, -3
  %3235 = sext i32 %3234 to i64
  %3236 = icmp sgt i32 %3234, 3
  br i1 %3236, label %omp.wsloop.region69.preheader.lr.ph, label %omp.wsloop.region73.preheader

omp.wsloop.region69.preheader.lr.ph:              ; preds = %omp.wsloop.region64.preheader
  %3237 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %3238 = sub nsw i64 %.pre-phi6140, %.unpack5171.unpack5173.unpack
  %3239 = mul nsw i64 %3238, %169
  %3240 = sub nsw i64 %.pre-phi6142, %.unpack5171.unpack5174.unpack
  %3241 = mul nsw i64 %170, %3240
  %3242 = getelementptr double, ptr %.unpack5597, i64 %3241
  %3243 = getelementptr double, ptr %3242, i64 %3239
  br label %omp.wsloop.region69.preheader

omp.wsloop.region73.preheader:                    ; preds = %omp.wsloop.region69.preheader, %omp.wsloop.region64.preheader
  %3244 = add i32 %3233, -2
  %3245 = sext i32 %3244 to i64
  %3246 = sub nsw i64 %3245, %.unpack5051.unpack5052.unpack
  %3247 = mul nsw i64 %3246, %.unpack5051.unpack.unpack5056
  %3248 = sub nsw i64 %.pre-phi6140, %.unpack5051.unpack5053.unpack
  %3249 = mul nsw i64 %3248, %177
  %3250 = sub nsw i64 %.pre-phi6142, %.unpack5051.unpack5054.unpack
  %3251 = mul nsw i64 %178, %3250
  %3252 = getelementptr double, ptr %.unpack5044, i64 %3251
  %3253 = getelementptr double, ptr %3252, i64 %3249
  %3254 = getelementptr double, ptr %3253, i64 %3247
  %3255 = load double, ptr @_QMlu_dataEdssp, align 8, !tbaa !68
  %3256 = add i32 %3233, -4
  %3257 = sext i32 %3256 to i64
  %3258 = sub nsw i64 %3257, %.unpack5075.unpack5076.unpack
  %3259 = mul nsw i64 %3258, %.unpack5075.unpack.unpack5080
  %3260 = sub nsw i64 %.pre-phi6140, %.unpack5075.unpack5077.unpack
  %3261 = mul nsw i64 %3260, %179
  %3262 = sub nsw i64 %.pre-phi6142, %.unpack5075.unpack5078.unpack
  %3263 = mul nsw i64 %180, %3262
  %3264 = getelementptr double, ptr %.unpack5068, i64 %3263
  %3265 = getelementptr double, ptr %3264, i64 %3261
  %3266 = getelementptr double, ptr %3265, i64 %3259
  %3267 = sub nsw i64 %3235, %.unpack5075.unpack5076.unpack
  %3268 = mul nsw i64 %3267, %.unpack5075.unpack.unpack5080
  %3269 = getelementptr double, ptr %3265, i64 %3268
  %3270 = sub nsw i64 %3245, %.unpack5075.unpack5076.unpack
  %3271 = mul nsw i64 %3270, %.unpack5075.unpack.unpack5080
  %3272 = getelementptr double, ptr %3265, i64 %3271
  %3273 = add i32 %3233, -1
  %3274 = sext i32 %3273 to i64
  %3275 = sub nsw i64 %3274, %.unpack5075.unpack5076.unpack
  %3276 = mul nsw i64 %3275, %.unpack5075.unpack.unpack5080
  %3277 = getelementptr double, ptr %3265, i64 %3276
  %3278 = sub nsw i64 %3274, %.unpack5051.unpack5052.unpack
  %3279 = mul nsw i64 %3278, %.unpack5051.unpack.unpack5056
  %3280 = getelementptr double, ptr %3253, i64 %3279
  %3281 = getelementptr double, ptr %3254, i64 %181
  %3282 = load double, ptr %3281, align 8, !tbaa !20
  %3283 = getelementptr double, ptr %3266, i64 %182
  %3284 = load double, ptr %3283, align 8, !tbaa !22
  %3285 = getelementptr double, ptr %3269, i64 %182
  %3286 = load double, ptr %3285, align 8, !tbaa !22
  %3287 = fmul contract double %3286, 4.000000e+00
  %3288 = fsub contract double %3284, %3287
  %3289 = getelementptr double, ptr %3272, i64 %182
  %3290 = load double, ptr %3289, align 8, !tbaa !22
  %3291 = fmul contract double %3290, 6.000000e+00
  %3292 = fadd contract double %3288, %3291
  %3293 = getelementptr double, ptr %3277, i64 %182
  %3294 = load double, ptr %3293, align 8, !tbaa !22
  %3295 = fmul contract double %3294, 4.000000e+00
  %3296 = fsub contract double %3292, %3295
  %3297 = fmul contract double %3255, %3296
  %3298 = fsub contract double %3282, %3297
  store double %3298, ptr %3281, align 8, !tbaa !20
  %3299 = getelementptr double, ptr %3280, i64 %181
  %3300 = load double, ptr %3299, align 8, !tbaa !20
  %3301 = fmul contract double %3290, 4.000000e+00
  %3302 = fsub contract double %3286, %3301
  %3303 = fmul contract double %3294, 5.000000e+00
  %3304 = fadd contract double %3302, %3303
  %3305 = fmul contract double %3255, %3304
  %3306 = fsub contract double %3300, %3305
  store double %3306, ptr %3299, align 8, !tbaa !20
  %3307 = getelementptr double, ptr %3254, i64 %183
  %3308 = load double, ptr %3307, align 8, !tbaa !20
  %3309 = getelementptr double, ptr %3266, i64 %184
  %3310 = load double, ptr %3309, align 8, !tbaa !22
  %3311 = getelementptr double, ptr %3269, i64 %184
  %3312 = load double, ptr %3311, align 8, !tbaa !22
  %3313 = fmul contract double %3312, 4.000000e+00
  %3314 = fsub contract double %3310, %3313
  %3315 = getelementptr double, ptr %3272, i64 %184
  %3316 = load double, ptr %3315, align 8, !tbaa !22
  %3317 = fmul contract double %3316, 6.000000e+00
  %3318 = fadd contract double %3314, %3317
  %3319 = getelementptr double, ptr %3277, i64 %184
  %3320 = load double, ptr %3319, align 8, !tbaa !22
  %3321 = fmul contract double %3320, 4.000000e+00
  %3322 = fsub contract double %3318, %3321
  %3323 = fmul contract double %3255, %3322
  %3324 = fsub contract double %3308, %3323
  store double %3324, ptr %3307, align 8, !tbaa !20
  %3325 = getelementptr double, ptr %3280, i64 %183
  %3326 = load double, ptr %3325, align 8, !tbaa !20
  %3327 = fmul contract double %3316, 4.000000e+00
  %3328 = fsub contract double %3312, %3327
  %3329 = fmul contract double %3320, 5.000000e+00
  %3330 = fadd contract double %3328, %3329
  %3331 = fmul contract double %3255, %3330
  %3332 = fsub contract double %3326, %3331
  store double %3332, ptr %3325, align 8, !tbaa !20
  %3333 = getelementptr double, ptr %3254, i64 %185
  %3334 = load double, ptr %3333, align 8, !tbaa !20
  %3335 = getelementptr double, ptr %3266, i64 %186
  %3336 = load double, ptr %3335, align 8, !tbaa !22
  %3337 = getelementptr double, ptr %3269, i64 %186
  %3338 = load double, ptr %3337, align 8, !tbaa !22
  %3339 = fmul contract double %3338, 4.000000e+00
  %3340 = fsub contract double %3336, %3339
  %3341 = getelementptr double, ptr %3272, i64 %186
  %3342 = load double, ptr %3341, align 8, !tbaa !22
  %3343 = fmul contract double %3342, 6.000000e+00
  %3344 = fadd contract double %3340, %3343
  %3345 = getelementptr double, ptr %3277, i64 %186
  %3346 = load double, ptr %3345, align 8, !tbaa !22
  %3347 = fmul contract double %3346, 4.000000e+00
  %3348 = fsub contract double %3344, %3347
  %3349 = fmul contract double %3255, %3348
  %3350 = fsub contract double %3334, %3349
  store double %3350, ptr %3333, align 8, !tbaa !20
  %3351 = getelementptr double, ptr %3280, i64 %185
  %3352 = load double, ptr %3351, align 8, !tbaa !20
  %3353 = fmul contract double %3342, 4.000000e+00
  %3354 = fsub contract double %3338, %3353
  %3355 = fmul contract double %3346, 5.000000e+00
  %3356 = fadd contract double %3354, %3355
  %3357 = fmul contract double %3255, %3356
  %3358 = fsub contract double %3352, %3357
  store double %3358, ptr %3351, align 8, !tbaa !20
  %3359 = getelementptr double, ptr %3254, i64 %187
  %3360 = load double, ptr %3359, align 8, !tbaa !20
  %3361 = getelementptr double, ptr %3266, i64 %188
  %3362 = load double, ptr %3361, align 8, !tbaa !22
  %3363 = getelementptr double, ptr %3269, i64 %188
  %3364 = load double, ptr %3363, align 8, !tbaa !22
  %3365 = fmul contract double %3364, 4.000000e+00
  %3366 = fsub contract double %3362, %3365
  %3367 = getelementptr double, ptr %3272, i64 %188
  %3368 = load double, ptr %3367, align 8, !tbaa !22
  %3369 = fmul contract double %3368, 6.000000e+00
  %3370 = fadd contract double %3366, %3369
  %3371 = getelementptr double, ptr %3277, i64 %188
  %3372 = load double, ptr %3371, align 8, !tbaa !22
  %3373 = fmul contract double %3372, 4.000000e+00
  %3374 = fsub contract double %3370, %3373
  %3375 = fmul contract double %3255, %3374
  %3376 = fsub contract double %3360, %3375
  store double %3376, ptr %3359, align 8, !tbaa !20
  %3377 = getelementptr double, ptr %3280, i64 %187
  %3378 = load double, ptr %3377, align 8, !tbaa !20
  %3379 = fmul contract double %3368, 4.000000e+00
  %3380 = fsub contract double %3364, %3379
  %3381 = fmul contract double %3372, 5.000000e+00
  %3382 = fadd contract double %3380, %3381
  %3383 = fmul contract double %3255, %3382
  %3384 = fsub contract double %3378, %3383
  store double %3384, ptr %3377, align 8, !tbaa !20
  %3385 = getelementptr double, ptr %3254, i64 %189
  %3386 = load double, ptr %3385, align 8, !tbaa !20
  %3387 = getelementptr double, ptr %3266, i64 %190
  %3388 = load double, ptr %3387, align 8, !tbaa !22
  %3389 = getelementptr double, ptr %3269, i64 %190
  %3390 = load double, ptr %3389, align 8, !tbaa !22
  %3391 = fmul contract double %3390, 4.000000e+00
  %3392 = fsub contract double %3388, %3391
  %3393 = getelementptr double, ptr %3272, i64 %190
  %3394 = load double, ptr %3393, align 8, !tbaa !22
  %3395 = fmul contract double %3394, 6.000000e+00
  %3396 = fadd contract double %3392, %3395
  %3397 = getelementptr double, ptr %3277, i64 %190
  %3398 = load double, ptr %3397, align 8, !tbaa !22
  %3399 = fmul contract double %3398, 4.000000e+00
  %3400 = fsub contract double %3396, %3399
  %3401 = fmul contract double %3255, %3400
  %3402 = fsub contract double %3386, %3401
  store double %3402, ptr %3385, align 8, !tbaa !20
  %3403 = getelementptr double, ptr %3280, i64 %189
  %3404 = load double, ptr %3403, align 8, !tbaa !20
  %3405 = fmul contract double %3394, 4.000000e+00
  %3406 = fsub contract double %3390, %3405
  %3407 = fmul contract double %3398, 5.000000e+00
  %3408 = fadd contract double %3406, %3407
  %3409 = fmul contract double %3255, %3408
  %3410 = fsub contract double %3404, %3409
  store double %3410, ptr %3403, align 8, !tbaa !20
  %omp_collapsed.next85 = add i32 %omp_collapsed.iv835929, 1
  %exitcond6055.not = icmp eq i32 %omp_collapsed.iv835929, %reass.sub6007
  br i1 %exitcond6055.not, label %omp_collapsed.exit81, label %omp_collapsed.body79

omp.wsloop.region69.preheader:                    ; preds = %omp.wsloop.region69.preheader.lr.ph, %omp.wsloop.region69.preheader
  %indvars.iv6047 = phi i64 [ 4, %omp.wsloop.region69.preheader.lr.ph ], [ %indvars.iv.next6048, %omp.wsloop.region69.preheader ]
  %3411 = sub nsw i64 %indvars.iv6047, %.unpack5580.unpack5581.unpack
  %3412 = mul nsw i64 %3411, %.unpack5580.unpack.unpack5585
  %3413 = getelementptr double, ptr %3093, i64 %3412
  %3414 = add nsw i64 %indvars.iv6047, -2
  %3415 = sub nsw i64 %3414, %.unpack5171.unpack5172.unpack
  %3416 = mul nsw i64 %3415, %.unpack5171.unpack.unpack5176
  %3417 = getelementptr double, ptr %3243, i64 %3416
  %3418 = add i64 %indvars.iv6047, %171
  %3419 = mul nsw i64 %3418, %.unpack5171.unpack.unpack5176
  %3420 = getelementptr double, ptr %3243, i64 %3419
  %3421 = sub nsw i64 %indvars.iv6047, %.unpack5171.unpack5172.unpack
  %3422 = mul nsw i64 %3421, %.unpack5171.unpack.unpack5176
  %3423 = getelementptr double, ptr %3243, i64 %3422
  %indvars.iv.next6048 = add nuw nsw i64 %indvars.iv6047, 1
  %sext = shl i64 %indvars.iv.next6048, 32
  %3424 = ashr exact i64 %sext, 32
  %3425 = sub nsw i64 %3424, %.unpack5171.unpack5172.unpack
  %3426 = mul nsw i64 %3425, %.unpack5171.unpack.unpack5176
  %3427 = getelementptr double, ptr %3243, i64 %3426
  %3428 = shl i64 %indvars.iv6047, 32
  %sext6159 = add i64 %3428, 8589934592
  %3429 = ashr exact i64 %sext6159, 32
  %3430 = sub nsw i64 %3429, %.unpack5171.unpack5172.unpack
  %3431 = mul nsw i64 %3430, %.unpack5171.unpack.unpack5176
  %3432 = getelementptr double, ptr %3243, i64 %3431
  %3433 = getelementptr double, ptr %3413, i64 %164
  %3434 = load double, ptr %3433, align 8, !tbaa !20
  %3435 = getelementptr double, ptr %3417, i64 %172
  %3436 = load double, ptr %3435, align 8, !tbaa !22
  %3437 = getelementptr double, ptr %3420, i64 %172
  %3438 = load double, ptr %3437, align 8, !tbaa !22
  %3439 = fmul contract double %3438, 4.000000e+00
  %3440 = fsub contract double %3436, %3439
  %3441 = getelementptr double, ptr %3423, i64 %172
  %3442 = load double, ptr %3441, align 8, !tbaa !22
  %3443 = fmul contract double %3442, 6.000000e+00
  %3444 = fadd contract double %3440, %3443
  %3445 = getelementptr double, ptr %3427, i64 %172
  %3446 = load double, ptr %3445, align 8, !tbaa !22
  %3447 = fmul contract double %3446, 4.000000e+00
  %3448 = fsub contract double %3444, %3447
  %3449 = getelementptr double, ptr %3432, i64 %172
  %3450 = load double, ptr %3449, align 8, !tbaa !22
  %3451 = fadd contract double %3450, %3448
  %3452 = fmul contract double %3237, %3451
  %3453 = fsub contract double %3434, %3452
  store double %3453, ptr %3433, align 8, !tbaa !20
  %3454 = getelementptr double, ptr %3413, i64 %165
  %3455 = load double, ptr %3454, align 8, !tbaa !20
  %3456 = getelementptr double, ptr %3417, i64 %173
  %3457 = load double, ptr %3456, align 8, !tbaa !22
  %3458 = getelementptr double, ptr %3420, i64 %173
  %3459 = load double, ptr %3458, align 8, !tbaa !22
  %3460 = fmul contract double %3459, 4.000000e+00
  %3461 = fsub contract double %3457, %3460
  %3462 = getelementptr double, ptr %3423, i64 %173
  %3463 = load double, ptr %3462, align 8, !tbaa !22
  %3464 = fmul contract double %3463, 6.000000e+00
  %3465 = fadd contract double %3461, %3464
  %3466 = getelementptr double, ptr %3427, i64 %173
  %3467 = load double, ptr %3466, align 8, !tbaa !22
  %3468 = fmul contract double %3467, 4.000000e+00
  %3469 = fsub contract double %3465, %3468
  %3470 = getelementptr double, ptr %3432, i64 %173
  %3471 = load double, ptr %3470, align 8, !tbaa !22
  %3472 = fadd contract double %3471, %3469
  %3473 = fmul contract double %3237, %3472
  %3474 = fsub contract double %3455, %3473
  store double %3474, ptr %3454, align 8, !tbaa !20
  %3475 = getelementptr double, ptr %3413, i64 %166
  %3476 = load double, ptr %3475, align 8, !tbaa !20
  %3477 = getelementptr double, ptr %3417, i64 %174
  %3478 = load double, ptr %3477, align 8, !tbaa !22
  %3479 = getelementptr double, ptr %3420, i64 %174
  %3480 = load double, ptr %3479, align 8, !tbaa !22
  %3481 = fmul contract double %3480, 4.000000e+00
  %3482 = fsub contract double %3478, %3481
  %3483 = getelementptr double, ptr %3423, i64 %174
  %3484 = load double, ptr %3483, align 8, !tbaa !22
  %3485 = fmul contract double %3484, 6.000000e+00
  %3486 = fadd contract double %3482, %3485
  %3487 = getelementptr double, ptr %3427, i64 %174
  %3488 = load double, ptr %3487, align 8, !tbaa !22
  %3489 = fmul contract double %3488, 4.000000e+00
  %3490 = fsub contract double %3486, %3489
  %3491 = getelementptr double, ptr %3432, i64 %174
  %3492 = load double, ptr %3491, align 8, !tbaa !22
  %3493 = fadd contract double %3492, %3490
  %3494 = fmul contract double %3237, %3493
  %3495 = fsub contract double %3476, %3494
  store double %3495, ptr %3475, align 8, !tbaa !20
  %3496 = getelementptr double, ptr %3413, i64 %167
  %3497 = load double, ptr %3496, align 8, !tbaa !20
  %3498 = getelementptr double, ptr %3417, i64 %175
  %3499 = load double, ptr %3498, align 8, !tbaa !22
  %3500 = getelementptr double, ptr %3420, i64 %175
  %3501 = load double, ptr %3500, align 8, !tbaa !22
  %3502 = fmul contract double %3501, 4.000000e+00
  %3503 = fsub contract double %3499, %3502
  %3504 = getelementptr double, ptr %3423, i64 %175
  %3505 = load double, ptr %3504, align 8, !tbaa !22
  %3506 = fmul contract double %3505, 6.000000e+00
  %3507 = fadd contract double %3503, %3506
  %3508 = getelementptr double, ptr %3427, i64 %175
  %3509 = load double, ptr %3508, align 8, !tbaa !22
  %3510 = fmul contract double %3509, 4.000000e+00
  %3511 = fsub contract double %3507, %3510
  %3512 = getelementptr double, ptr %3432, i64 %175
  %3513 = load double, ptr %3512, align 8, !tbaa !22
  %3514 = fadd contract double %3513, %3511
  %3515 = fmul contract double %3237, %3514
  %3516 = fsub contract double %3497, %3515
  store double %3516, ptr %3496, align 8, !tbaa !20
  %3517 = getelementptr double, ptr %3413, i64 %168
  %3518 = load double, ptr %3517, align 8, !tbaa !20
  %3519 = getelementptr double, ptr %3417, i64 %176
  %3520 = load double, ptr %3519, align 8, !tbaa !22
  %3521 = getelementptr double, ptr %3420, i64 %176
  %3522 = load double, ptr %3521, align 8, !tbaa !22
  %3523 = fmul contract double %3522, 4.000000e+00
  %3524 = fsub contract double %3520, %3523
  %3525 = getelementptr double, ptr %3423, i64 %176
  %3526 = load double, ptr %3525, align 8, !tbaa !22
  %3527 = fmul contract double %3526, 6.000000e+00
  %3528 = fadd contract double %3524, %3527
  %3529 = getelementptr double, ptr %3427, i64 %176
  %3530 = load double, ptr %3529, align 8, !tbaa !22
  %3531 = fmul contract double %3530, 4.000000e+00
  %3532 = fsub contract double %3528, %3531
  %3533 = getelementptr double, ptr %3432, i64 %176
  %3534 = load double, ptr %3533, align 8, !tbaa !22
  %3535 = fadd contract double %3534, %3532
  %3536 = fmul contract double %3237, %3535
  %3537 = fsub contract double %3518, %3536
  store double %3537, ptr %3517, align 8, !tbaa !20
  %exitcond6050.not = icmp eq i64 %indvars.iv6047, %3235
  br i1 %exitcond6050.not, label %omp.wsloop.region73.preheader, label %omp.wsloop.region69.preheader

omp.wsloop.region62:                              ; preds = %omp.wsloop.region62.lr.ph, %omp.wsloop.region62
  %3538 = phi i64 [ %3064, %omp.wsloop.region62.lr.ph ], [ %3654, %omp.wsloop.region62 ]
  %3539 = phi i32 [ %3062, %omp.wsloop.region62.lr.ph ], [ %3560, %omp.wsloop.region62 ]
  %3540 = sext i32 %3539 to i64
  %3541 = sub nsw i64 %3540, %.unpack5580.unpack5581.unpack
  %3542 = mul nsw i64 %3541, %.unpack5580.unpack.unpack5585
  %reass.sub5308 = sub i64 %3542, %.unpack5580.unpack.unpack
  %3543 = getelementptr double, ptr %3072, i64 %reass.sub5308
  %3544 = getelementptr i8, ptr %3543, i64 8
  %3545 = load double, ptr %3544, align 8, !tbaa !20
  %3546 = add i32 %3539, -1
  %3547 = sext i32 %3546 to i64
  %3548 = sub nsw i64 %3547, %.unpack5604.unpack5605.unpack
  %3549 = mul nsw i64 %3548, %.unpack5604.unpack.unpack5609
  %3550 = getelementptr double, ptr %3081, i64 %3549
  %3551 = getelementptr double, ptr %3550, i64 %146
  %3552 = load double, ptr %3551, align 8, !tbaa !22
  %3553 = sub nsw i64 %3540, %.unpack5604.unpack5605.unpack
  %3554 = mul nsw i64 %3553, %.unpack5604.unpack.unpack5609
  %3555 = getelementptr double, ptr %3081, i64 %3554
  %3556 = getelementptr double, ptr %3555, i64 %146
  %3557 = load double, ptr %3556, align 8, !tbaa !22
  %3558 = fmul contract double %3557, 2.000000e+00
  %3559 = fsub contract double %3552, %3558
  %3560 = add i32 %3539, 1
  %3561 = sext i32 %3560 to i64
  %3562 = sub nsw i64 %3561, %.unpack5604.unpack5605.unpack
  %3563 = mul nsw i64 %3562, %.unpack5604.unpack.unpack5609
  %3564 = getelementptr double, ptr %3081, i64 %3563
  %3565 = getelementptr double, ptr %3564, i64 %146
  %3566 = load double, ptr %3565, align 8, !tbaa !22
  %3567 = fadd contract double %3566, %3559
  %3568 = fmul contract double %3075, %3567
  %3569 = fadd contract double %3545, %3568
  store double %3569, ptr %3544, align 8, !tbaa !20
  %3570 = getelementptr i8, ptr %3543, i64 16
  %3571 = load double, ptr %3570, align 8, !tbaa !20
  %3572 = mul nsw i64 %3561, 5
  %3573 = getelementptr double, ptr %6, i64 %3572
  %3574 = getelementptr i8, ptr %3573, i64 -32
  %3575 = load double, ptr %3574, align 8, !tbaa !10
  %3576 = mul nsw i64 %3540, 5
  %3577 = getelementptr double, ptr %6, i64 %3576
  %3578 = getelementptr i8, ptr %3577, i64 -32
  %3579 = load double, ptr %3578, align 8, !tbaa !10
  %3580 = fsub contract double %3575, %3579
  %3581 = fmul contract double %3083, %3580
  %3582 = fadd contract double %3571, %3581
  %3583 = getelementptr double, ptr %3550, i64 %142
  %3584 = load double, ptr %3583, align 8, !tbaa !22
  %3585 = getelementptr double, ptr %3555, i64 %142
  %3586 = load double, ptr %3585, align 8, !tbaa !22
  %3587 = fmul contract double %3586, 2.000000e+00
  %3588 = fsub contract double %3584, %3587
  %3589 = getelementptr double, ptr %3564, i64 %142
  %3590 = load double, ptr %3589, align 8, !tbaa !22
  %3591 = fadd contract double %3590, %3588
  %3592 = fmul contract double %3085, %3591
  %3593 = fadd contract double %3582, %3592
  store double %3593, ptr %3570, align 8, !tbaa !20
  %3594 = getelementptr i8, ptr %3543, i64 24
  %3595 = load double, ptr %3594, align 8, !tbaa !20
  %3596 = getelementptr i8, ptr %3573, i64 -24
  %3597 = load double, ptr %3596, align 8, !tbaa !10
  %3598 = getelementptr i8, ptr %3577, i64 -24
  %3599 = load double, ptr %3598, align 8, !tbaa !10
  %3600 = fsub contract double %3597, %3599
  %3601 = fmul contract double %3083, %3600
  %3602 = fadd contract double %3595, %3601
  %3603 = getelementptr double, ptr %3550, i64 %143
  %3604 = load double, ptr %3603, align 8, !tbaa !22
  %3605 = getelementptr double, ptr %3555, i64 %143
  %3606 = load double, ptr %3605, align 8, !tbaa !22
  %3607 = fmul contract double %3606, 2.000000e+00
  %3608 = fsub contract double %3604, %3607
  %3609 = getelementptr double, ptr %3564, i64 %143
  %3610 = load double, ptr %3609, align 8, !tbaa !22
  %3611 = fadd contract double %3610, %3608
  %3612 = fmul contract double %3087, %3611
  %3613 = fadd contract double %3602, %3612
  store double %3613, ptr %3594, align 8, !tbaa !20
  %3614 = getelementptr i8, ptr %3543, i64 32
  %3615 = load double, ptr %3614, align 8, !tbaa !20
  %3616 = getelementptr i8, ptr %3573, i64 -16
  %3617 = load double, ptr %3616, align 8, !tbaa !10
  %3618 = getelementptr i8, ptr %3577, i64 -16
  %3619 = load double, ptr %3618, align 8, !tbaa !10
  %3620 = fsub contract double %3617, %3619
  %3621 = fmul contract double %3083, %3620
  %3622 = fadd contract double %3615, %3621
  %3623 = getelementptr double, ptr %3550, i64 %144
  %3624 = load double, ptr %3623, align 8, !tbaa !22
  %3625 = getelementptr double, ptr %3555, i64 %144
  %3626 = load double, ptr %3625, align 8, !tbaa !22
  %3627 = fmul contract double %3626, 2.000000e+00
  %3628 = fsub contract double %3624, %3627
  %3629 = getelementptr double, ptr %3564, i64 %144
  %3630 = load double, ptr %3629, align 8, !tbaa !22
  %3631 = fadd contract double %3630, %3628
  %3632 = fmul contract double %3089, %3631
  %3633 = fadd contract double %3622, %3632
  store double %3633, ptr %3614, align 8, !tbaa !20
  %3634 = getelementptr i8, ptr %3543, i64 40
  %3635 = load double, ptr %3634, align 8, !tbaa !20
  %3636 = getelementptr i8, ptr %3573, i64 -8
  %3637 = load double, ptr %3636, align 8, !tbaa !10
  %3638 = getelementptr i8, ptr %3577, i64 -8
  %3639 = load double, ptr %3638, align 8, !tbaa !10
  %3640 = fsub contract double %3637, %3639
  %3641 = fmul contract double %3083, %3640
  %3642 = fadd contract double %3635, %3641
  %3643 = getelementptr double, ptr %3550, i64 %145
  %3644 = load double, ptr %3643, align 8, !tbaa !22
  %3645 = getelementptr double, ptr %3555, i64 %145
  %3646 = load double, ptr %3645, align 8, !tbaa !22
  %3647 = fmul contract double %3646, 2.000000e+00
  %3648 = fsub contract double %3644, %3647
  %3649 = getelementptr double, ptr %3564, i64 %145
  %3650 = load double, ptr %3649, align 8, !tbaa !22
  %3651 = fadd contract double %3650, %3648
  %3652 = fmul contract double %3091, %3651
  %3653 = fadd contract double %3642, %3652
  store double %3653, ptr %3634, align 8, !tbaa !20
  %3654 = add nsw i64 %3538, -1
  %3655 = icmp ugt i64 %3538, 1
  br i1 %3655, label %omp.wsloop.region62, label %omp.wsloop.region64.preheader

omp.wsloop.region59:                              ; preds = %omp.wsloop.region59.preheader, %omp.wsloop.region59
  %3656 = phi i64 [ %3736, %omp.wsloop.region59 ], [ %.ph6635, %omp.wsloop.region59.preheader ]
  %3657 = phi i32 [ %3735, %omp.wsloop.region59 ], [ %.ph6636, %omp.wsloop.region59.preheader ]
  %3658 = sext i32 %3657 to i64
  %3659 = sub nsw i64 %3658, %.unpack5654.unpack.unpack
  %3660 = getelementptr double, ptr %2835, i64 %3659
  %3661 = load double, ptr %3660, align 8, !tbaa !24
  %3662 = sub nsw i64 %3658, %.unpack5604.unpack5605.unpack
  %3663 = mul nsw i64 %3662, %.unpack5604.unpack.unpack5609
  %3664 = getelementptr double, ptr %2841, i64 %3663
  %3665 = getelementptr double, ptr %3664, i64 %142
  %3666 = load double, ptr %3665, align 8, !tbaa !22
  %3667 = fmul contract double %3661, %3666
  %3668 = getelementptr double, ptr %3664, i64 %143
  %3669 = load double, ptr %3668, align 8, !tbaa !22
  %3670 = fmul contract double %3661, %3669
  %3671 = getelementptr double, ptr %3664, i64 %144
  %3672 = load double, ptr %3671, align 8, !tbaa !22
  %3673 = fmul contract double %3661, %3672
  %3674 = getelementptr double, ptr %3664, i64 %145
  %3675 = load double, ptr %3674, align 8, !tbaa !22
  %3676 = fmul contract double %3661, %3675
  %3677 = add i32 %3657, -1
  %3678 = sext i32 %3677 to i64
  %3679 = sub nsw i64 %3678, %.unpack5654.unpack.unpack
  %3680 = getelementptr double, ptr %2835, i64 %3679
  %3681 = load double, ptr %3680, align 8, !tbaa !24
  %3682 = sub nsw i64 %3678, %.unpack5604.unpack5605.unpack
  %3683 = mul nsw i64 %3682, %.unpack5604.unpack.unpack5609
  %3684 = getelementptr double, ptr %2841, i64 %3683
  %3685 = getelementptr double, ptr %3684, i64 %142
  %3686 = load double, ptr %3685, align 8, !tbaa !22
  %3687 = fmul contract double %3681, %3686
  %3688 = getelementptr double, ptr %3684, i64 %143
  %3689 = load double, ptr %3688, align 8, !tbaa !22
  %3690 = fmul contract double %3681, %3689
  %3691 = getelementptr double, ptr %3684, i64 %144
  %3692 = load double, ptr %3691, align 8, !tbaa !22
  %3693 = fmul contract double %3681, %3692
  %3694 = getelementptr double, ptr %3684, i64 %145
  %3695 = load double, ptr %3694, align 8, !tbaa !22
  %3696 = fmul contract double %3681, %3695
  %3697 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119
  %3698 = fmul contract double %3697, 0x3FF5555555555555
  %3699 = fsub contract double %3667, %3687
  %3700 = fmul contract double %3699, %3698
  %3701 = mul nsw i64 %3658, 5
  %3702 = getelementptr double, ptr %6, i64 %3701
  %3703 = getelementptr i8, ptr %3702, i64 -32
  store double %3700, ptr %3703, align 8, !tbaa !10
  %3704 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119
  %3705 = fsub contract double %3670, %3690
  %3706 = fmul contract double %3705, %3704
  %3707 = getelementptr i8, ptr %3702, i64 -24
  store double %3706, ptr %3707, align 8, !tbaa !10
  %3708 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119
  %3709 = fsub contract double %3673, %3693
  %3710 = fmul contract double %3709, %3708
  %3711 = getelementptr i8, ptr %3702, i64 -16
  store double %3710, ptr %3711, align 8, !tbaa !10
  %3712 = load double, ptr @_QMlu_dataEtx3, align 8, !tbaa !119
  %3713 = fmul contract double %3712, 0x3FDEB851EB851EB6
  %3714 = fmul double %3667, %3667
  %3715 = fmul double %3670, %3670
  %3716 = fadd contract double %3714, %3715
  %3717 = fmul double %3673, %3673
  %3718 = fadd contract double %3716, %3717
  %3719 = fmul double %3687, %3687
  %3720 = fmul double %3690, %3690
  %3721 = fadd contract double %3719, %3720
  %3722 = fmul double %3693, %3693
  %3723 = fadd contract double %3721, %3722
  %3724 = fsub contract double %3718, %3723
  %3725 = fmul contract double %3724, %3713
  %3726 = fmul contract double %3712, 0x3FC5555555555555
  %3727 = fsub contract double %3714, %3719
  %3728 = fmul contract double %3727, %3726
  %3729 = fsub contract double %3728, %3725
  %3730 = fmul contract double %3712, 0x3FFF5C28F5C28F5B
  %3731 = fsub contract double %3676, %3696
  %3732 = fmul contract double %3731, %3730
  %3733 = fadd contract double %3732, %3729
  %3734 = getelementptr i8, ptr %3702, i64 -8
  store double %3733, ptr %3734, align 8, !tbaa !10
  %3735 = add i32 %3657, 1
  %3736 = add nsw i64 %3656, -1
  %3737 = icmp ugt i64 %3656, 1
  br i1 %3737, label %omp.wsloop.region59, label %omp.wsloop.region60.loopexit, !llvm.loop !160

omp.wsloop.region50:                              ; preds = %omp.wsloop.region50.preheader, %omp.wsloop.region50
  %indvars.iv6031 = phi i64 [ %indvars.iv.next6032, %omp.wsloop.region50 ], [ %indvars.iv6031.ph, %omp.wsloop.region50.preheader ]
  %3738 = sub nsw i64 %indvars.iv6031, %.unpack5604.unpack5605.unpack
  %3739 = mul nsw i64 %3738, %.unpack5604.unpack.unpack5609
  %reass.sub5621 = sub i64 %3739, %.unpack5604.unpack.unpack
  %3740 = getelementptr double, ptr %2649, i64 %reass.sub5621
  %3741 = getelementptr i8, ptr %3740, i64 16
  %3742 = load double, ptr %3741, align 8, !tbaa !22
  %3743 = mul nuw nsw i64 %indvars.iv6031, 5
  %3744 = getelementptr double, ptr %6, i64 %3743
  %3745 = getelementptr i8, ptr %3744, i64 -40
  store double %3742, ptr %3745, align 8, !tbaa !10
  %3746 = sub nsw i64 %indvars.iv6031, %.unpack5654.unpack.unpack
  %3747 = getelementptr double, ptr %2655, i64 %3746
  %3748 = load double, ptr %3747, align 8, !tbaa !24
  %3749 = fmul contract double %3742, %3748
  %3750 = sub nsw i64 %indvars.iv6031, %.unpack5674.unpack.unpack
  %3751 = getelementptr double, ptr %2661, i64 %3750
  %3752 = load double, ptr %3751, align 8, !tbaa !26
  %3753 = fmul contract double %3742, %3749
  %3754 = getelementptr i8, ptr %3740, i64 40
  %3755 = load double, ptr %3754, align 8, !tbaa !22
  %3756 = fsub contract double %3755, %3752
  %3757 = fmul contract double %3756, 4.000000e-01
  %3758 = fadd contract double %3753, %3757
  %3759 = getelementptr i8, ptr %3744, i64 -32
  store double %3758, ptr %3759, align 8, !tbaa !10
  %3760 = getelementptr i8, ptr %3740, i64 24
  %3761 = load double, ptr %3760, align 8, !tbaa !22
  %3762 = fmul contract double %3749, %3761
  %3763 = getelementptr i8, ptr %3744, i64 -24
  store double %3762, ptr %3763, align 8, !tbaa !10
  %3764 = getelementptr i8, ptr %3740, i64 32
  %3765 = load double, ptr %3764, align 8, !tbaa !22
  %3766 = fmul contract double %3749, %3765
  %3767 = getelementptr i8, ptr %3744, i64 -16
  store double %3766, ptr %3767, align 8, !tbaa !10
  %3768 = load double, ptr %3754, align 8, !tbaa !22
  %3769 = fmul contract double %3768, 1.400000e+00
  %3770 = fmul contract double %3752, 4.000000e-01
  %3771 = fsub contract double %3769, %3770
  %3772 = fmul contract double %3749, %3771
  %3773 = getelementptr i8, ptr %3744, i64 -8
  store double %3772, ptr %3773, align 8, !tbaa !10
  %indvars.iv.next6032 = add nuw nsw i64 %indvars.iv6031, 1
  %exitcond6034.not = icmp eq i64 %indvars.iv.next6032, %2662
  br i1 %exitcond6034.not, label %omp.wsloop.region51, label %omp.wsloop.region50, !llvm.loop !161

omp.master.region:                                ; preds = %omp_collapsed.exit
  %3774 = load i32, ptr @_QMlu_dataEtimeron, align 4, !tbaa !4
  %.not3997 = icmp eq i32 %3774, 0
  br i1 %.not3997, label %omp.region.cont29, label %omp.master.region30

omp.region.cont29:                                ; preds = %omp.master.region, %omp.master.region30
  call void @__kmpc_end_master(ptr nonnull @1, i32 %omp_global_thread_num292)
  br label %omp_region.end

omp.master.region30:                              ; preds = %omp.master.region
  store i32 2, ptr %5, align 4, !tbaa !10
  call void @timer_start_(ptr nonnull %5) #2
  br label %omp.region.cont29

omp.par.outlined.exit.exitStub:                   ; preds = %omp.region.cont295, %omp_collapsed.exit282
  ret void
}

declare void @timer_start_(ptr) local_unnamed_addr

declare void @timer_stop_(ptr) local_unnamed_addr

; Function Attrs: nounwind
declare i32 @__kmpc_global_thread_num(ptr) local_unnamed_addr #2

; Function Attrs: nounwind
declare ptr @__kmpc_threadprivate_cached(ptr, i32, ptr, i64, ptr) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @__kmpc_for_static_init_4u(ptr, i32, i32, ptr, ptr, ptr, ptr, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @__kmpc_for_static_fini(ptr, i32) local_unnamed_addr #2

; Function Attrs: convergent nounwind
declare void @__kmpc_barrier(ptr, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @__kmpc_master(ptr, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @__kmpc_end_master(ptr, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare !callback !162 void @__kmpc_fork_call(ptr, i32, ptr, ...) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #4

attributes #0 = { "target-cpu"="x86-64" }
attributes #1 = { nounwind "target-cpu"="x86-64" }
attributes #2 = { nounwind }
attributes #3 = { convergent nounwind }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 7, !"openmp", i32 11}
!2 = !{i32 8, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
!4 = !{!5, !5, i64 0}
!5 = !{!"global data/_QMlu_dataEtimeron", !6, i64 0}
!6 = !{!"global data", !7, i64 0}
!7 = !{!"any data access", !8, i64 0}
!8 = !{!"any access", !9, i64 0}
!9 = !{!"Flang function root _QPrhs"}
!10 = !{!7, !7, i64 0}
!11 = !{!12, !12, i64 0}
!12 = !{!"global data/_QMlu_dataEnz", !6, i64 0}
!13 = !{!14, !14, i64 0}
!14 = !{!"global data/_QMlu_dataEny", !6, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"global data/_QMlu_dataEnx", !6, i64 0}
!17 = !{!18, !18, i64 0}
!18 = !{!"direct data/_QMlu_dataEfrct", !19, i64 0}
!19 = !{!"direct data", !7, i64 0}
!20 = !{!21, !21, i64 0}
!21 = !{!"direct data/_QMlu_dataErsd", !19, i64 0}
!22 = !{!23, !23, i64 0}
!23 = !{!"direct data/_QMlu_dataEu", !19, i64 0}
!24 = !{!25, !25, i64 0}
!25 = !{!"direct data/_QMlu_dataErho_i", !19, i64 0}
!26 = !{!27, !27, i64 0}
!27 = !{!"direct data/_QMlu_dataEqs", !19, i64 0}
!28 = !{!29, !29, i64 0}
!29 = !{!"global data/_QMlu_dataEjst", !6, i64 0}
!30 = !{!31, !31, i64 0}
!31 = !{!"global data/_QMlu_dataEjend", !6, i64 0}
!32 = !{!33, !33, i64 0}
!33 = !{!"descriptor member", !8, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"global data/_QMlu_dataEist", !6, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"global data/_QMlu_dataEiend", !6, i64 0}
!38 = !{!39, !39, i64 0}
!39 = !{!"global data/_QMlu_dataEtz2", !6, i64 0}
!40 = distinct !{!40, !41, !42}
!41 = !{!"llvm.loop.isvectorized", i32 1}
!42 = !{!"llvm.loop.unroll.runtime.disable"}
!43 = distinct !{!43, !41}
!44 = !{!45, !45, i64 0}
!45 = !{!"global data/_QMlu_dataEtz3", !6, i64 0}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = !{!52}
!52 = distinct !{!52, !48}
!53 = !{!50, !47}
!54 = distinct !{!54, !41, !42}
!55 = !{!56, !56, i64 0}
!56 = !{!"global data/_QMlu_dataEdz1", !6, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"global data/_QMlu_dataEtz1", !6, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"global data/_QMlu_dataEdz2", !6, i64 0}
!61 = !{!62, !62, i64 0}
!62 = !{!"global data/_QMlu_dataEdz3", !6, i64 0}
!63 = !{!64, !64, i64 0}
!64 = !{!"global data/_QMlu_dataEdz4", !6, i64 0}
!65 = !{!66, !66, i64 0}
!66 = !{!"global data/_QMlu_dataEdz5", !6, i64 0}
!67 = distinct !{!67, !41, !42}
!68 = !{!69, !69, i64 0}
!69 = !{!"global data/_QMlu_dataEdssp", !6, i64 0}
!70 = distinct !{!70, !41}
!71 = distinct !{!71, !41}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = !{!78}
!78 = distinct !{!78, !74}
!79 = !{!80}
!80 = distinct !{!80, !74}
!81 = !{!82}
!82 = distinct !{!82, !74}
!83 = !{!84}
!84 = distinct !{!84, !74}
!85 = distinct !{!85, !41, !42}
!86 = !{!87, !87, i64 0}
!87 = !{!"global data/_QMlu_dataEty2", !6, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"global data/_QMlu_dataEdy1", !6, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"global data/_QMlu_dataEty1", !6, i64 0}
!92 = !{!93, !93, i64 0}
!93 = !{!"global data/_QMlu_dataEty3", !6, i64 0}
!94 = !{!95, !95, i64 0}
!95 = !{!"global data/_QMlu_dataEdy2", !6, i64 0}
!96 = !{!97, !97, i64 0}
!97 = !{!"global data/_QMlu_dataEdy3", !6, i64 0}
!98 = !{!99, !99, i64 0}
!99 = !{!"global data/_QMlu_dataEdy4", !6, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"global data/_QMlu_dataEdy5", !6, i64 0}
!102 = distinct !{!102, !41}
!103 = !{!104}
!104 = distinct !{!104, !105}
!105 = distinct !{!105, !"LVerDomain"}
!106 = !{!107}
!107 = distinct !{!107, !105}
!108 = !{!109}
!109 = distinct !{!109, !105}
!110 = !{!111}
!111 = distinct !{!111, !105}
!112 = !{!113}
!113 = distinct !{!113, !105}
!114 = !{!115}
!115 = distinct !{!115, !105}
!116 = distinct !{!116, !41, !42}
!117 = !{!118, !118, i64 0}
!118 = !{!"global data/_QMlu_dataEtx2", !6, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"global data/_QMlu_dataEtx3", !6, i64 0}
!121 = !{!122}
!122 = distinct !{!122, !123}
!123 = distinct !{!123, !"LVerDomain"}
!124 = !{!125}
!125 = distinct !{!125, !123}
!126 = !{!127}
!127 = distinct !{!127, !123}
!128 = !{!129}
!129 = distinct !{!129, !123}
!130 = !{!131}
!131 = distinct !{!131, !123}
!132 = !{!133}
!133 = distinct !{!133, !123}
!134 = !{!135}
!135 = distinct !{!135, !123}
!136 = !{!137}
!137 = distinct !{!137, !123}
!138 = !{!139}
!139 = distinct !{!139, !123}
!140 = !{!141}
!141 = distinct !{!141, !123}
!142 = !{!143}
!143 = distinct !{!143, !123}
!144 = !{!145}
!145 = distinct !{!145, !123}
!146 = !{!137, !127, !145, !143, !141, !139, !135, !133, !131, !129}
!147 = distinct !{!147, !41, !42}
!148 = !{!149, !149, i64 0}
!149 = !{!"global data/_QMlu_dataEdx1", !6, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"global data/_QMlu_dataEtx1", !6, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"global data/_QMlu_dataEdx2", !6, i64 0}
!154 = !{!155, !155, i64 0}
!155 = !{!"global data/_QMlu_dataEdx3", !6, i64 0}
!156 = !{!157, !157, i64 0}
!157 = !{!"global data/_QMlu_dataEdx4", !6, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"global data/_QMlu_dataEdx5", !6, i64 0}
!160 = distinct !{!160, !41}
!161 = distinct !{!161, !41}
!162 = !{!163}
!163 = !{i64 2, i64 -1, i64 -1, i1 true}
